 /* Generated by Together */

#ifndef __TRIGGERBANK_H__
#define __TRIGGERBANK_H__

#pragma warning (disable : 4786)

#include <map>
#include <list>
#include "RanaTrigger.h"
#include "RanaMessage.h"
#include "trigger/TriggerSpace.h"

class RanaSpace;
class RanaTriggerBank
{
	friend class RanaSpace;
public:
	typedef RanaSpace * const * TRIGGER_SYSTEM_CONTEXT;
	// 添加一个触发器
	int addTrigger(const RanaTriggerName& triggerName,RanaTrigger* pTriggerBase);
	// 删除一个触发器
	int deleteTrigger(RanaWORD triggerHandle);
	//
	RanaTrigger* getTrigger(RanaWORD triggerHandle);
	RanaTrigger* getTrigger(const RanaTriggerName& triggerName);
public:
	// 添加一个事件
	int addEvent(const RanaEventName& eventName, RanaEvent* pEventBase);
	// 删除一个事件
	int deleteEvent( RanaWORD eventHandle );
	// 向触发器绑定一个事件
	int bindEvent(RanaWORD eventHandle,RanaWORD triggerHandle);

	RanaEvent* getEvent( RanaWORD eventHandle);
	RanaEvent* getEvent( const RanaEventName& eventName);

	RanaSpace& getOwnerSpace() const;
public://Actons
	// 删除所有触发器
	void deleteAllTrigger();

	void listTriggers(std::vector<RanaTrigger*>& output);
public://Events:
	void deleteAllEvent();

	void listEvents(std::vector<RanaEvent*>& output);
	void listEventByType(RanaEventType eventType,std::vector<RanaEvent*>& output);
	void listEventByTrigger(RanaWORD triggerHandle,std::vector<RanaEvent*>& output);
public:
	//
	void onMessage(RanaMessage *pMessage);
	// 触发器状态统计：收到消息
	bool tagMessageCount(RanaWORD triggerHandle);
	//
	bool isTrackLogTrigger() const;
	//
	unsigned long getLagLimit() const;
protected:
	RanaTriggerBank(RanaSpace& space,Trigger::TriggerSpace& triggerSystem);
	~RanaTriggerBank();
	void clear();
private:
	TRIGGER_SYSTEM_CONTEXT getCustomContextForTriggerSystem() const;
	void clearTrackSetting();

	RanaSpace* const m_pRanaSpace;
	Trigger::TriggerSpace& m_triggerSystem;
	
	std::list<RanaWORD> m_unusedTriggerHandle;
	std::vector<RanaTrigger*> m_triggersByHandle;
	std::list<RanaWORD> m_unusedEventHandle;
	std::vector<RanaEvent*> m_eventsByHandle;

	std::map<RanaTriggerName,RanaTrigger*> m_triggerNameMap;
	std::map<RanaTriggerName,RanaEvent*> m_eventNameMap;
	//std::map<RanaWORD,RanaTrigger*> m_triggers;

	bool m_trackLogTrigger;
	unsigned long m_lagLimit;
};

inline unsigned long RanaTriggerBank::getLagLimit() const
{
	return m_lagLimit;
}

inline RanaSpace& RanaTriggerBank::getOwnerSpace() const
{
	return *m_pRanaSpace;
}

inline RanaTriggerBank::TRIGGER_SYSTEM_CONTEXT RanaTriggerBank::getCustomContextForTriggerSystem() const
{
	return &m_pRanaSpace;
}

#endif //__TRIGGERBANK_H__
