# -*- coding: iso-8859-1 -*-
from _AgoTypes import *
#from AgoError import *
#proto commands
ED_RELOADCPSRESULT_NTF = 1688
CS_GETGLOBALLEVELEXPRANKINGS_REQ = 1913
MG_CHANNELINFO_NTF = 351
ZC_SYSTEMMESSAGE_NTF = 557
ZC_CLOSEDIALOG_NTF = 388
SC_UPDATEGUILDTECHNOLOGY_NTF = 2013
SC_QUERYGUILDMEMBER_ACK = 549
ZC_FLUSHSECRETCOMMODITY_ACK = 2422
SC_WEIBO_DELFOLLOWER_ACK = 1826
ED_SHUTDOWNNOTICETEMPLATEUPDATEBEGIN_NTF = 1490
MS_LOADGUILD_NTF = 529
CS_GETSHITLISTPACKAGEMD5_REQ = 1105
CS_QUERYCACHEDCHARACTERCOREINFO_REQ = 286
CS_QUERYTEAM_REQ = 725
SC_QUERYGUILDMONEY_ACK = 2327
ZC_UNITPARAMETERUPDATE_NTF = 501
MH_ITEMUPDATE_NTF = 409
CZ_ADDTOSHOPPINGLIST_REQ = 1780
ZG_CHARLOGOUT_NTF = 184
MI_CHANNELSTOP_NTF = 346
MZ_CREATESUMMONEEATTRACTEDFROMMAPFAILED_NTF = 614
ZD_ADJUSTCHANNELITEMDROPRATE_ACK = 2068
LM_USERLOGOUT_NTF = 1385
SM_MEMBERREMARKUPDATE_NTF = 798
ZD_ADJUSTCHANNELRUNNINGCONFIGSTATUS_ACK = 2093
ZM_CLEARQUESTS_NTF = 294
GC_DELETEDICT_NTF = 1158
ZM_UNSUMMONPET_NTF = 966
ZM_COMPETITIONHISTORYCONTEXT_NTF = 288
EE_MC_STOP_NTF = 941
CZ_LOADCHARCRAFTSTATUS_REQ = 1625
CG_CHARLOGOUT_NTF = 12
ZC_MOVEITEM_NTF = 290
ZC_QUESTPERIODSINFO_NTF = 2406
ZM_SHOPALLRELOADED_NTF = 868
VC_LOADHDBBEGIN_NTF = 1544
CS_LOADFRIENDSINFO_REQ = 733
SC_CHARJOINGUILD_NTF = 790
MG_PAYSERVICESTOP_BRD = 2169
ZM_INSERTCRAFT_NTF = 1627
MQ_QUERYCHARSTATEDESC_REQ = 1904
GC_DOWNLOADDICTBODY_NTF = 1156
CG_SELECTDICT_REQ = 1209
EE_MT_GMCOMMANDONOFFLINECATEGORYINFOS_NTF = 1428
MD_QUERYOBJECTBANINFO_ACK = 1582
CZ_LOADSKILLPRACTICEINFO_NTF = 269
ZC_SCREENCHAT_ACK = 96
SC_WEIBO_LISTINFORMWITHTYPEBODY_NTF = 1841
MZ_QUESTINFOSTART_NTF = 297
CZ_TRYINTERRUPTALLPOSITIVEBEHAVIOUR_NTF = 1725
ZC_COMPETITIONAREACREATE_NTF = 1078
MH_GMHISTORYCONTEXT_NTF = 2034
SC_DELETEGUILD_NTF = 541
CS_UPDATEGUILDQUESTSTATUS_REQ = 2376
MB_CHARLOGOUT_NTF = 1871
MZ_UPDATECOMMODITYCUSTOMVALUE_NTF = 454
ZC_CONFIRMTRADE_NTF = 647
MH_USERPAYREMOVE_NTF = 1750
TM_LOADPROTECTORINFO_ACK = 1382
SC_QUERYGUILDWARCONDITION_ACK = 1244
GS_UPDATEMONEYINFOFORGUILD_NTF = 1096
GZ_VALIDATEPASS_NTF = 785
DE_ENBALEAUTORESTARTS_NTF = 1193
ZM_CHANNELHISTORYCONTEXT_NTF = 1388
MH_GUILDTECHNOLOGYBLUEPRINTINSERT_NTF = 2255
ZM_LORDWARSTART_NTF = 1334
ZC_CUSTOMSIGNAL_NTF = 2239
CS_QUITTEAM_REQ = 232
MZ_ROLEREGISTRYDATAEND_NTF = 1397
ED_ARCHITECTUREREMOVED_NTF = 475
ZM_TURNINGUILDITEM_NTF = 2324
CZ_TAKEPRESENTMONEY_REQ = 1475
ZM_MODIFYCHARZHAO_ACK = 1855
ZC_GETUNITPARAMETERDATA_ACK = 500
ZC_CANCELWALKFROMINDEX_ACK = 80
ZC_QUERYROLELEVEL_ACK = 344
ZM_UNITLIVELONGTIME_NTF = 1952
DE_DAEMONPATCHDATA_NTF = 1056
ZC_CANCELTRADEITEM_NTF = 666
MH_USERLOGOUT_NTF = 1386
MS_WEIBO_LISTOFFLINEFOLLOWINGFEEDSBODY_NTF = 2229
MD_QUERYUSERINFOBYUSERNAME_ACK = 1526
SM_WEIBO_ADDQUEST_ACK = 1879
MH_STOCKDELETE_NTF = 78
SC_WEIBO_ADDBLACK_ACK = 1761
TM_LOADSUMMONEEEXTRAINFO_ROLEUNITATTRIBUTE_ACK = 1409
ZC_KAIFENGITEM_ACK = 1614
CZ_MAPLOADED_REQ = 118
SC_ROLEONLINESTATUSCHANGED_NTF = 759
CV_CHECKRAC_ACK = 1579
ZM_WEIBO_ACCEPTQUEST_ACK = 1951
TM_LOADATTRIBUTE_NTF = 903
DE_UPLOADALLCPSFILEEND_NTF = 1686
MZ_COMMODITYAGENTDATEUPDATE_NTF = 1119
ED_LISTSCCTSDATA_NTF = 1551
ZM_PRODUCEHISTORYCONTEXT_NTF = 2077
ZC_PROTECTOFF_ACK = 635
CS_QUERYGUILDTECHNOLOGYUPDATEDATA_REQ = 2022
CZ_VENDWORD_REQ = 1213
MC_USERPAYINFO_NTF = 1877
MT_LOADSUMMONEEEXTRAINFOEND_NTF = 1405
MC_PAYSERVICESTART_NTF = 2166
DM_MODIFYCHARLEVEL_REQ = 1854
DM_UPDATEGMPROTECTORSTATE_REQ = 697
OG_UPDATECOMPRESSRATE_NTF = 305
CZ_SNSQUESTITEM_REQ = 1945
CZ_PROTECTOFF_REQ = 626
DZ_SERVERLOGRECVINFO_NTF = 1146
ZC_CANCELTRADE_ACK = 645
ZM_LORDWARDEPLOY_NTF = 1353
MQ_QUERYCHARPROTECTORSTATE_REQ = 2161
ZC_COMPETITIONAREAINSIGHT_NTF = 727
CZ_QUERYDIALOGTEMPLATEINFO_REQ = 436
SC_QUERYGUILDYY_ACK = 2276
MH_STOCKCOUNTDEC_NTF = 872
ZI_ASKPETDOCOMMAND_NTF = 673
SM_RESETLORDWARTIME_NTF = 1329
TM_LOADSUMMONEEBASEINFOSEND_NTF = 1412
ZC_MAPPLATFORMSTATEUPDATE_NTF = 737
ZM_PETOWNERLEAVESCENE_NTF = 963
ZC_COMPETITIONMOVEMENTCOMPLETEEND_BRD = 799
CG_LAGCHECKMANAGER_REQ = 1016
ND_QUERYGLOBALNPC_ACK = 1215
MT_LOADCHARSTOCKDATA_REQ = 932
ZD_QUERYGLOBALRECLAIMITEMSTOCKRECOVERPROBONENHANCECONSUMED_ACK = 2249
CZ_MODIFYPASSWORD_REQ = 634
SC_WEIBO_LISTUSERFEED_ACK = 1789
ZC_ANSWERTRADEWITHPLAYER_ACK = 648
MZ_MODIFYCHAREXP_NTF = 1859
MR_GUILDMEMBERONLINECOUNT_NTF = 2073
CZ_QUERYPETROLEINFO_REQ = 787
ZC_MAPSCOPEAREACREATED_NTF = 1079
ZC_LOADCOMMODITYSELLBYMONEYINFO_NTF = 463
MD_GMFORCECHARLOCATION_ACK = 1640
MG_CHANNELSTOP_NTF = 347
ZM_WEIBO_ACCEPTSYSTEMQUEST_ACK = 2349
ZD_RUNGMCOMMANDACKDATAEND_NTF = 471
SC_QUERYALLFRIEND_ACK = 734
MC_LOADGLOBALSTOCKTRADEREOCRD_ACK = 2258
CZ_GETALLITEMDATA_REQ = 169
DE_QUERYSERVERLOG_REQ = 1656
SC_RSYNCFRIEND_ACK = 690
ZM_INNERSIGNAL_NTF = 1447
MD_GETGMCOMMODITYLIST_ACK = 1099
MC_FETCHBILLCOMMODITY_ACK = 1776
GC_RELOADREADER_NTF = 341
DZ_DETACHSERVERLOG_NTF = 1147
XD_UNZIP_ACK = 1299
ZC_UPGRADEFIXZHAO_ACK = 437
ZM_UPDATESHOPPINGLIST_NTF = 1803
MD_SENDPRESENTMONEY_ACK = 1514
MZ_QUESTDATA_NTF = 367
SH_WEIBO_GUILDQUESTACCEPT_HISTORY_NTF = 2325
CM_QUERYGUILITEMLOG_REQ = 1983
MN_MANAGERINFO_NTF = 1199
SC_GUILDCHAT_BRD = 1010
ZC_QUERYPETROLEINFO_ACK = 788
ZM_DESTROYPET_NTF = 573
DE_SHUTDOWNNOTICETEMPLATEUPDATE_REQ = 1489
SG_GUILDWARREGTIMEUPDATE_BRD = 1336
ZM_CHANGEPETNICKNAME_NTF = 743
CZ_GUESSVEND_REQ = 1622
ZD_ADJUSTGLOBALRECLAIMITEMSTOCKRECOVERPROBONPRODUCECONSUMED_ACK = 2246
ED_T_GMCOMMANDCATEGORYINFOSEND_NTF = 1438
ZC_MAPOBJECTADDED_NTF = 58
ZI_AIROLEJOINREPETITION_ACK = 581
EE_TM_ACCESSTOKEN_NTF = 1025
SC_WEIBO_LISTNEWUSERFEED_ACK = 2207
ED_T_GMCOMMANDCATEGORYINFOBEGIN_NTF = 1434
ZC_CHARACTERCOREINFOUPDATE_NTF = 761
SC_WEIBO_LISTHOTQUESTBODY_NTF = 2063
DX_GETACTIVEDINFO_REQ = 1302
MZ_RECORDRECIPESTATUS_NTF = 1966
ZM_VENDEND_NTF = 1957
TM_LOADCHARUNITACTUALITY_ACK = 898
SC_WEIBO_LISTHOTUSERBODY_NTF = 2062
EE_MC_SERVERINFOS_NTF = 1082
ZM_QUERYCHARLOCATION_ACK = 1632
TM_LOADCHARAVATARVERSION_NTF = 1018
MG_FORCECLOSEGATE_NTF = 385
SC_CREATEGUILD_ACK = 519
ZM_UPDATEMONEYINFO_NTF = 406
ZC_LOADCOMMODITYBRIEF_NTF = 453
MD_CREATEGMCOMMODITY_ACK = 1103
SH_WEIBO_QUESTINSERT_HISTORY_NTF = 2092
MS_WEIBO_LISTOFFLINEFOLLOWINGFEEDS_ACK = 2232
ZM_ITEMDROPFORCHAR_NTF = 1647
ZC_PETDESC_NTF = 602
ED_MINITINFO_NTF = 1189
DE_CREATEAUTHORITYGROUP_REQ = 858
CS_GETGUILDWARJOINER_REQ = 1258
MS_LOADGUILDBLUEPRINT_NTF = 2003
DM_FORCEADDSTATE_REQ = 1892
TM_LOADCHARREGISTRY_NTF = 1377
DE_CHANGEMCUSTOMNAME_REQ = 1198
ZC_REMOVEPRESENTMONEY_ACK = 1481
SM_GUILDMONEYINC_NTF = 2306
SC_QUERYALLMUTED_ACK = 1730
SC_TEAMINVITECONFIRM_ACK = 228
TM_LOADPETSEND_NTF = 1376
CM_LOADGLOBALSTOCKTRADEREOCRD_REQ = 2257
MH_GUILDFUNDUPDATE_NTF = 1599
CZ_PRODUCEBYFREE_REQ = 2329
SM_TEAMMEMBERQUITTED_NTF = 259
CZ_GENSHOPPINGBILL_REQ = 1797
IZ_AIROLEJOINREPETITION_REQ = 583
MZ_RELOADGMCOMMODITY_NTF = 483
ED_GMCOMMANDINFOS_NTF = 382
ZC_ENTEREDTEAM_NTF = 2260
ZC_STARTTRADEWITHPLAYER_NTF = 639
SC_QUERYALLIEDGUILDS_ACK = 980
ZC_REMOVEVENDITEM_ACK = 1172
ZM_SELLSTOCK_REQ = 940
MZ_CHARKILLPUNISH_NTF = 105
ED_EVENTLOGWHEN_DISKSPACERATEOVERTHAN_NTF = 2241
MD_QUERYUSERINFOBYCHARID_ACK = 1528
CZ_GUESSVENDLISTCANCEL_REQ = 1658
MH_GUILDMEMBERDELETE_NTF = 1606
ZC_FORCEFINISHQUEST_NTF = 2198
CZ_LOADSHOPVERSION_REQ = 449
EE_MS_STOP_NTF = 830
DE_UPDATESCCT_REQ = 1566
SM_SOCIALSTART_NTF = 214
DE_QUERYSCCT_REQ = 1569
ZC_SCENENONPLAYERCOREBODY_NTF = 327
SC_ADDGUILDWARJOINER_ACK = 1264
MZ_LOADVIPINFO_NTF = 991
MD_QUERYUSERLASTLOGININFO_ACK = 1573
SC_QUERYCACHEDCHARACTERSTATUSINFO_ACK = 2194
DM_QUERYOBJECTBANINFO_REQ = 1545
MS_GUILDWARSTART_NTF = 1251
ED_SSTOP_NTF = 882
CS_WEIBO_DELFOLLOWER_REQ = 1819
SM_SOCIALTRANSACTCONFIRM_NTF = 2396
CS_REMOVEENEMY_REQ = 688
ND_CREATEGLOBALNPC_ACK = 1225
ZC_QUERYROLESHOPINFO_ACK = 509
MR_VENDEND_NTF = 1956
ZC_ITEMDATAHFUPDATE_NTF = 1887
MS_MANAGERINFO_NTF = 221
GZ_JOINCHANNEL_REQ = 21
MS_WEIBO_ADDQUEST_REQ = 1946
OM_COMPRESSCENTERSTART_NTF = 338
ZC_ITEMACTIONBEGIN_NTF = 2226
ZC_COMPETITIONMOVEMENTSTART_BRD = 121
GC_GETVALIDATE_ACK = 786
MZ_GLOBALRECLAIM_ITEMSTOCKRECOVERPROBONPRODUCECONSUMEDUPDATE_NTF = 2243
TM_LOADQUESTLOG_NTF = 1312
ZC_MAPPLATFORMLEAVE_NTF = 393
ZM_INITCOMMODITYCUSTOMVALUE_NTF = 808
ZC_LOADMONEYINFO_ACK = 414
ZI_SCENENONPLAYERROLESOCIALBODY_NTF = 2293
MZ_INSERTPRESENTMONEY_NTF = 1474
SC_QUERYMONEYINFOFORGUILD_ACK = 2350
ED_DAEMONPATCHRESULT_NTF = 477
CZ_MOVEITEMPACKET_REQ = 605
CZ_KAIFENGITEM_REQ = 1616
CM_QUERYGUILITEMCOUNT_REQ = 1975
MS_QUERYAGENTSTOP_NTF = 2231
MB_QUERYSHOPPINGBILL_REQ = 1808
MZ_BUYSTOCK_ACK = 937
ZG_CHARACTERCOREINFOUPDATE_NTF = 762
SC_GUILDITEMCOUNTUPDATE_NTF = 2018
MD_ADDNOSALELIST_ACK = 1086
MS_STARTINITGUILD_ACK = 1012
ZC_QUERYDIALOGTEMPLATEINFO_ACK = 435
NZ_CREATEGLOBALNPC_STATIC_REQ = 337
SM_TEAMDISMISS_NTF = 226
MH_CHARPRESENTMONEYDELETE_NTF = 1469
MT_LOADSTOCKLOGINFO_REQ = 1038
MS_WEIBO_ACCEPTGUILDQUESTFINAL_NTF = 201
ZM_MODIFYCHARSKILL_ACK = 1856
EE_MT_GMCOMMANDINFOS_NTF = 849
QM_QUERYUSERINFOBYUSERNAME_ACK = 1523
ED_ADDSCCTRESULT_NTF = 1558
LM_STARTINITINFO_REQ = 272
GC_JOINREPETITIONRESULT_NTF = 578
EE_CHECKSELFCONNECT_NTF = 1035
CZ_VENDITEMLIST_REQ = 1168
DM_UPDATEUSERBANEFITCOTROL_REQ = 2213
CL_GETCHARLIST_REQ = 36
CG_WAITFORLOGOUTING_NTF = 1715
CZ_TALISMANLEVELUPGRADE_REQ = 2390
XC_LOADPATCHOVER_NTF = 1745
ED_ADDSCCT_ACK = 1557
ED_STOPS_ACK = 947
SC_INVITECHARJOINGUILD_ACK = 532
ZC_SUMMONPET_BRD = 829
DE_UPDATESCCTCONTENTEND_NTF = 1570
DE_UPLOADFILEDATA_NTF = 944
ED_CHANGEAUTHORITYROLEGROUPS_ACK = 489
ZM_CHARCHATCOUNT_NTF = 1962
MZ_ADMINREALTIMEMONITOR_ADMINSTOPMONITOR_NTF = 2128
MH_DEFAULTHISTORYCONTEXT_NTF = 1663
MZ_LORDWARSTART_NTF = 1317
CZ_CHANGECHANNELNUMBER_REQ = 1011
DZ_QUERYGLOBALRECLAIMITEMSTOCKRECOVERPROBONENHANCECONSUMED_REQ = 2248
SM_WEIBO_ACCEPTQUESTFINAL_NTF = 2082
SM_GUILDWARHELPDEFENDER_NTF = 1249
SC_WEIBO_LISTINCOMMENT_ACK = 2144
ZC_DEADREVIVE_ACK = 1160
SM_GUILDWARATTACKER_NTF = 1248
EE_TM_OPERATIONCODES_NTF = 420
CZ_LOADCHAREXP_REQ = 313
DE_CHANGEGROUPAUTHORITY_NTF = 852
TM_LOADQUESTOWNERID_NTF = 1309
CS_KICKMEMBER_REQ = 264
MC_QUERYGUILDFUNDLOG_NTF = 2108
SC_TEAMCHAT_ACK = 98
MC_COLLECTPLAYERMACHINEINFO_NTF = 1720
ZC_CELLPOSTITIONCHANGED_NTF = 62
ED_SHUTDOWNNOTICETEMPLATEUPDATE_NTF = 1487
CS_QUERYGUILDQQ_REQ = 2282
ZC_SCENENONPLAYERROLESOCIALBODY_NTF = 197
DE_DESTROYAUTHORITYGROUP_REQ = 856
TM_LOADCHARREGISTRYEND_NTF = 1399
MZ_SUMMONEELOADINGINFO_NTF = 1200
GA_CHARCUTASSISTANT_NTF = 717
QM_QUERYUSERINFOBYCHARID_ACK = 1521
CS_CREATEGUILD_REQ = 537
MH_UNITSKILLUPDATE_NTF = 468
MZ_TEAMLEADERCHANGED_NTF = 239
ZM_CRAFTHISTORYCONTEXT_NTF = 1660
ZC_LOADCHARVITALITYSTATUS_ACK = 2153
MZ_SOCIALUNLINK_NTF = 1949
ZM_CREATESUMMONEEATTRACTEDFROMMAP_NTF = 736
SM_DELETEGUILD_NTF = 528
MZ_ENMITYPATTERN_NTF = 1449
SC_WEIBO_LISTPLAZAFEEDBODY_NTF = 1830
MC_ROLEREGISTRYDATAREMOVE_NTF = 1393
CS_WEIBO_LISTINCOMMENT_REQ = 2145
ZC_UNLOCKTRADE_NTF = 651
SC_PRODUCEBYBLUEPRINT_ACK = 2045
ZM_GMADDCHARSTATEHISTORY_NTF = 2041
DX_GETUNZIPPEDINFO_REQ = 1298
SC_QUERYROLESOCIALDESC_ACK = 593
OG_QUERYDICTINUSEINFO_REQ = 1439
ZI_JOINGUILD_NTF = 2283
ZC_CLEANSHOPPINGLIST_NTF = 2219
ED_SPROCESSINFO_NTF = 945
SC_REGIONCHAT_BRD = 1169
MG_STARTINFO_NTF = 212
MT_LOADPETSEND_NTF = 1343
GC_RANDKEY_NTF = 1712
RM_UNITLIVELONGTIME_NTF = 1961
CA_LOADAFTERLOGINNOTICE_REQ = 873
XD_DELUNZIP_ACK = 1293
MH_USERBANEFITCONTROLUPDATE_NTF = 2286
MH_SINGLEHISTORYCONTEXT_NTF = 362
ED_SHELLSCRIPTINFOS_NTF = 198
TM_LOADCHARSKILL_ACK = 1378
MG_UPDATELOGINLOCATION_NTF = 334
MR_CHARLOGOUT_NTF = 1732
ZM_CHARKILLPUNISHCHANGE_NTF = 106
SM_WEIBO_ACCEPTSYSTEMQUEST_REQ = 2339
MZ_WEIBO_ACCEPTQUEST_REQ = 1950
ED_RUNSHELLSCRIPT_ACK = 246
ZM_GMFORCECHARLOCATION_ACK = 1639
MG_CLOSECLIENT_NTF = 8
MH_ITEMINSERT_NTF = 407
DM_QUERYCHARLOCATION_REQ = 1631
CZ_CANCELPOSE_REQ = 146
CS_QUERYGUILDQUEST_REQ = 2369
EE_TM_CREATEAUTHORITYGROUP_NTF = 419
MZ_CREATEGUILD_REQ = 536
MH_ITEMREMOVE_NTF = 408
EE_TM_STOP_NTF = 1021
CS_WEIBO_QUERYINFORMUNREADCOUNT_REQ = 1783
SC_QUERYGUILDINFO_ACK = 524
IZ_SETDEPLOYTIMEFORCHANGETOSUMMONEE_NTF = 863
ZC_SCENENONPLAYERROLESOCIAL_ACK = 195
ZM_SINGLEHISTORYCONTEXT_NTF = 322
GC_SOCIALCONNECTED_NTF = 249
SM_GUILDCANCELALLYWITHGUILD_NTF = 994
MZ_AMICABILITYPATTERN_NTF = 2333
SC_INVITEFRIENDTIMEOUT_NTF = 702
ZC_MAPFORCETERRAIN_NTF = 507
ZC_COMPETITIONAFFAIR_NTF = 50
ZC_MONSTERCONQUESTOWNERCHANGE_NTF = 180
DZ_QUERYCHANNELITEMDROPRATE_REQ = 2070
MZ_REMOVESUMMONEELOADINGINFO_NTF = 1666
ZC_APPENDWALKWITHCLIMBING_ACK = 582
MZ_CHANNELSTOP_NTF = 1369
ZM_VENDBEGIN_NTF = 1958
TM_LOADPETBASEINFOS_NTF = 1345
OG_DICTINFOS_NTF = 1151
CA_REMOVECLIENTCUSTOMSDATA_REQ = 706
CA_GETCLIENTCUSTOMSDATA_REQ = 710
GS_CHARACTERCOREINFOCHANGED_NTF = 179
ZC_UPDATEPROTECTORINFO_NTF = 1763
MG_ZONEINFO_NTF = 13
SC_WEIBO_LISTFOLLOWERBODY_NTF = 1821
MS_WEIBO_ACCEPTSYSTEMQUEST_ACK = 2337
ZC_GUESSITEM_ACK = 1615
TM_FINISHLOADDATA_NTF = 900
CS_WEIBO_LISTUSERFEED_REQ = 1785
ZM_SUMMONERENTERSCENE_NTF = 320
ZM_INSERTREPETITION_ACK = 584
BM_PAYSERVICESTOP_BRD = 2174
ED_QUERYSCCTXSDDATAEND_NTF = 1583
CS_DISMISSTEAM_REQ = 620
GS_ALIVECHANGED_NTF = 589
TM_LOADQUESTID_NTF = 1310
MG_GMQUERYCONNECTION_REQ = 1090
CG_LOGIN_REQ = 10
ML_BANANDKICK_REQ = 597
MZ_CONTRIBUTEGUILDITEM_ACK = 1972
MZ_GMFORCECHARCLIENTLOCATION_REQ = 1923
SC_GUILDWARREGTIMEUPDATE_NTF = 1335
ZC_COMMODITYAGENTDATEUPDATE_NTF = 1127
ZM_ITEMSLOTUPDATE_NTF = 161
ZC_DECIDEITEMACTION_ACK = 324
MZ_GLOBALRECLAIM_ITEMSTOCKCOUNTUPDATE_NTF = 1994
ZC_MAPDROPNEWBODY_NTF = 190
LD_BANOBJECT_ACK = 1591
CZ_SETGUILDWARHELPER_REQ = 1269
ZC_LEAVEMAP_NTF = 63
DN_LISTGLOBALNPC_REQ = 1214
ZC_WALK_NTF = 40
ZC_LOADCOMMODITYBRIEF_ACK = 462
MT_LOADSUMMONEESEND_NTF = 1410
MC_LORDWARSTATUS_NTF = 1354
MZ_LOADPETSEND_NTF = 677
SC_GUILDMEMBERLOGOUT_NTF = 538
DE_ADDSCCTCONTENTEND_NTF = 1547
ZC_ASKSUMMONEEDOCOMMAND_ACK = 1067
ED_UPLOADFILECANCEL_ACK = 504
ZC_PETSKILLSUPDATE_NTF = 740
ZC_LOADCOMMODITYCUSTOMINFO_ACK = 452
ZM_SENDCOMMODITY_ACK = 1798
CS_QUERYROLEONLINESTATUS_REQ = 772
CZ_DIALOG_REQ = 383
ZC_QUERYFIXPLATFORMLOCATION_ACK = 819
QM_QUERYUSERINFOBYUSERID_ACK = 1539
DE_DESTROYAUTHORITYROLE_REQ = 422
ML_CHARLOGOUT_NTF = 15
MD_STOPSHUTDOWN_ACK = 1492
ZC_GUESSVENDLISTUPDATE_NTF = 1621
ED_SSTART_NTF = 224
QM_QUERYCHARINFOBYCHARID_ACK = 1464
ZC_CANCELCOMPETITIONMOVEMENT_ACK = 67
MZ_COMMODITYNOSALE_NTF = 853
ZM_GLOBALRECLAIM_ITEMSTOCKCOUNTUPDATE_NTF = 1992
ZC_SNSQUESTITEM_ACK = 1944
DA_INSERTSYSTEMNOTICE_REQ = 1669
MC_QUERYGUILITEMCOUNT_ACK = 1976
ZC_REFUSECOMMODITYAGENT_ACK = 1133
CS_WEIBO_DELBLACK_REQ = 1759
MZ_STARTSHUTDOWN_NTF = 1456
TM_LOADGLOBALMUTEINFO_ACK = 1868
DM_SENDPRESENTMONEY_REQ = 1512
ZC_MAPPLATFORMSTATECLEAR_NTF = 738
ZM_TRANSFERPET_NTF = 618
MZ_CHARLOGOUT_NTF = 31
GM_GMQUERYCONNECTION_ACK = 1089
XD_GETUNZIPPEDINFO_ACK = 1292
DE_QUERYSCCTXSD_REQ = 1586
SC_GETSHITLISTPACKAGEMD5_ACK = 1104
DM_SENDPRESENTBYGENIDTOUSER_REQ = 2139
GV_GATESTART_NTF = 1502
CM_QUERYGUILITEMLOGBYID_REQ = 1981
MD_GLOBALUNMUTE_ACK = 1863
MR_CHARCHATCOUNT_NTF = 1965
MZ_STATUSACTUALITYVARIABLEATTRIB_NTF = 137
SM_FINISHLOADCHARINFO_NTF = 599
CZ_APPENDPLATFORMJUMP_REQ = 396
SC_QUERYGUILDLEVEL_ACK = 1307
MS_LOADGUILDTECHNOLOGY_NTF = 2010
DM_QUERYCHARINFOBYUSERNAME_REQ = 1505
MZ_AIROLELOGOUT_NTF = 37
MQ_QUERYCHARINFOBYUSERID_REQ = 1466
SM_UPDATEGUILDQUESTDATA_NTF = 2354
BM_QUERYSHOPPINGBILL_ACK = 1811
ZN_CREATEGLOBALNPC_STATIC_ACK = 222
MC_QUERYGUILITEMLOGBYID_ACK = 1977
ZM_LOADCOMMODITYCUSTOMINFO_NTF = 461
SC_WEIBO_QUERYFEEDDETAIL_ACK = 1778
CZ_CANCELTRADEITEM_REQ = 667
SC_GUILDAPPLICATION_NTF = 780
ZM_WEIBO_ACCEPTWANTEDQUEST_ACK = 2308
CS_RESPONSEFORINVITEFRIEND_REQ = 700
EE_MT_GMCOMMANDFORDAEMONINFOSBEGIN_NTF = 841
MH_GLOBALMUTECHAR_NTF = 2039
CS_QUERYGUILDYY_REQ = 2280
MH_UNITZHAOUPDATE_NTF = 466
CS_QUERYROLESOCIALDESC_REQ = 594
CZ_TALISMANALLELEUNSELECT_REQ = 2392
MZ_GLOBALNPCINFO_NTF = 1191
CS_INVITECHARJOINGUILD_REQ = 521
CS_GUILDAPPLICATION_REQ = 779
ZM_UPDATECHARLEVEL_NTF = 308
MQ_QUERYGUILITEMLOGBYID_REQ = 1980
CZ_ADDTRADEITEM_REQ = 668
ZD_QUERYGLOBALRECLAIMITEMSTOCKRECOVERPROBONPRODUCECONSUMED_ACK = 2253
MH_ITEMPACKETINSERT_NTF = 775
CS_QUERYGUILDWARJOININFO_REQ = 1260
SC_CHANGEMEMBERREMARK_ACK = 795
QM_QUERYCHARINFOBYUSERNAME_ACK = 1467
ZC_GUESSVEND_ACK = 1650
CS_CANCELGUILDWARJOINER_REQ = 1265
ZM_ACTIVEBLUEPRINT_ACK = 2004
MC_QUERYSHOPPINGBILL_ACK = 1781
MZ_LOADMONEYINFO_NTF = 359
ZC_COOLDOWNGROUP_NTF = 92
ML_STARTINITINFO_ACK = 271
MZ_QUERYCHARPROTECTORSTATE_REQ = 637
MH_CHARPRESENTDELETE_NTF = 1076
MZ_GMQUERYROLEZONEINFO_ACK = 1402
CZ_UNLOCKTRADE_REQ = 655
SC_REGIONCHAT_ACK = 1178
CS_ALLYWITHGUILD_REQ = 969
ZC_MAPSCOPEAREADESTROYED_NTF = 1081
QM_QUERYCHARSKILLDESC_ACK = 1907
MC_STOCKSOLD_NTF = 915
AG_SETINDULGESTATE_NTF = 1351
ED_GMCOMMANDFORDAEMONINFOSBEGIN_NTF = 954
SM_UPDATESYSTEMWEIGHT_NTF = 822
CZ_GMOBSERVERITEMINFO_REQ = 2050
CZ_LOADCOMMODITYBRIEF_REQ = 464
CS_WEIBO_ADDCOMMENT_REQ = 1820
ZM_STATELEFTTIMECHANGE_NTF = 131
ZC_QUESTDATA_NTF = 361
GS_VARIABLEATTRIBBOUNDSTATUS_NTF = 1707
ZC_VENDITEMSELL_NTF = 1170
MS_ACTIVEBLUEPRINT_NTF = 2017
ZC_LOADPETSBEGIN_NTF = 621
SC_WEIBO_LISTINCOMMENTBODY_NTF = 2146
MZ_MODIFYCHARSKILL_REQ = 1862
CL_QUERYCREATECHAROPERATION_REQ = 247
MS_GUILITEMLOG_NTF = 2071
ED_DESTROYAUTHORITYROLE_ACK = 865
CZ_GETUNITPARAMETERDATA_REQ = 498
CZ_SWAPITEM_REQ = 156
LC_CREATECHAR_ACK = 71
MZ_CHARCRAFTSTATUS_NTF = 1624
GC_ASSISTANTCONNECTED_NTF = 716
ED_GMCOMMANDFORDAEMONINFOS_NTF = 951
MH_RELEASESNSQUESTHISTORYCONTEXT_NTF = 2113
SC_TEAMUP_ACK = 746
SC_SCENECHARCOREBODY_NTF = 87
SM_GMHISTORYCONTEXT_NTF = 2033
NZ_CLOSEGLOBALNPC_NTF = 1206
CM_QUERYGUILDFUNDLOG_REQ = 2104
SC_WEIBO_DELETEFEED_ACK = 2331
GO_QUERYDICTINUSEINFO_ACK = 1440
ZI_MAPDEPLOYTOSUMMONEE_NTF = 1843
DM_QUERYBANINFO_REQ = 1518
CM_FETCHBILLCOMMODITY_REQ = 1793
CS_WEIBO_LISTCOMMENT_REQ = 1840
MZ_CREATESUMMONEEROLE_NTF = 809
ZC_DIALOGINFO_NTF = 387
SC_DELETEGUILD_ACK = 548
SC_QUERYGUILDWARJOININFO_ACK = 1261
MD_DELETENOSALELIST_ACK = 1083
GS_REGIONCHANGED_NTF = 588
GC_DOWNLOADDICTEND_NTF = 1155
MH_ZONESTARTED_NTF = 368
SC_QUERYGUILDNOTICE_ACK = 2060
SC_QUITTEDTEAM_NTF = 236
SC_QUERYGUILDQUEST_ACK = 2372
MQ_QUERYUSERMONEYINFO_REQ = 1540
MZ_CHARACTERSOCIALVERSIONLOAD_NTF = 748
ZC_VENDITEMLISTCANCEL_ACK = 1226
MZ_ACCEPTGUILDQUEST_REQ = 2373
AG_VALIDATEPICUPDATE_NTF = 1679
CM_QUERYSHOPPINGBILL_REQ = 1788
CZ_CANCELCOMPETITIONMOVEMENT_REQ = 65
EE_MT_SHELLSCRIPTINFOSBEGIN_NTF = 1034
MI_ZONESTOP_NTF = 217
SC_REMOVEMUTED_ACK = 693
LM_USERLOGIN_NTF = 1384
ZC_AVATARSLOTDATABODY_NTF = 354
SC_GUILDWARREGRESULT_NTF = 1337
TM_LOADRECIPESTATUS_NTF = 1969
ZC_PRODUCEFORCRAFTRECIPE_ACK = 2109
MH_QUESTINSERT_NTF = 209
CZ_FETCHMONEY_REQ = 920
MH_PLAYERPKHISTORYCONTEXT_NTF = 1941
CS_WEIBO_LISTNEWPLAZAFEED_REQ = 2204
SC_QUERYGUILDBYPAGE_ACK = 802
CZ_GUESSVENDLIST_REQ = 1652
ZC_ALLITEMDATA_NTF = 695
ZC_DIALOGACK_ACK = 415
MH_ITEMPACKETUPDATE_NTF = 208
MG_LOCATEREPETITION_ACK = 579
DM_QUERYCHARITEMINFO_REQ = 1931
ZC_QUERYPOCKETSHOPID_ACK = 1924
EE_MS_INITINFO_NTF = 894
ZC_VEND_NTF = 1162
MZ_INITLORDWARINFO_NTF = 1315
GC_QUERYDICTINFO_ACK = 1230
CZ_CONFIRMTRADE_REQ = 644
MZ_ACTIVEBLUEPRINT_REQ = 2008
CZ_ADJUSTPETINDEX_REQ = 616
ZM_JOINREPETITION_REQ = 586
CS_WEIBO_ADDGUILDQUEST_REQ = 358
MZ_SETATTACKER_NTF = 1318
ED_DELETESCCT_ACK = 1555
ZI_SUMMONERLOCATIONCHANGED_NTF = 319
MZ_FORCEREMOVEALLCOOLDOWN_NTF = 1987
MZ_INSERTREPETITION_REQ = 560
SC_WEIBO_LISTOUTCOMMENT_ACK = 2143
CS_ACCEPTGUILDQUEST_REQ = 2367
SC_CHARLOADGUILD_NTF = 515
GC_USERASSISTANTDISCONNECTED_NTF = 2224
MZ_SETGUILDWARHELPER_ACK = 1271
MS_ACCEPTGUILDQUEST_ACK = 2365
LM_SETHISTORYCONTEXT_NTF = 2098
DE_REMOVEEVENTLOG_REQ = 495
ZC_VENDWORD_NTF = 1212
ZC_CHARVITALITYSTATUS_NTF = 2149
MZ_GLOBALRECLAIM_SYSTEMINITBEGIN_NTF = 2031
MQ_QUERYCHARLOCATION_REQ = 1636
DM_QUERYCHARSKILLDESC_REQ = 1908
MC_ROLEREGISTRYDATAUPDATE_NTF = 1398
MD_UPDATEUSERBANEFITCOTROL_ACK = 2212
ZI_SELFKILL_ACK = 400
ND_OPENGLOBALNPC_ACK = 1220
ZC_POSEEND_NTF = 144
MH_PAYLISTINSERT_NTF = 2121
CZ_LOADVIPINFO_REQ = 979
SM_WEIBO_ACCEPTGUILDQUEST_REQ = 763
CS_ADDGUILDWARJOINER_REQ = 1262
ZC_ADDTRADEITEM_ACK = 664
MH_GUILDMEMBERREMARKUPDATE_NTF = 1608
CS_WEIBO_LISTSYSTEMFEED_REQ = 2345
SC_GUILDAPPLICATIONREFUSE_NTF = 1364
SC_WEIBO_LISTMENTIONMECOMMENTBODY_NTF = 1882
TM_LOADQUESTDATA_NTF = 1311
CZ_QUERYNONPLAYERFUNCTION_REQ = 427
ZM_FINISHGUILDQUEST_ACK = 2368
MZ_LOADPROTECTORINFO_NTF = 629
CL_QUERYCHARCLASS_REQ = 326
ZC_QUERYCANCONTRIBUTEGUILITEM_ACK = 1984
EE_MT_ACCESSTOKEN_NTF = 1020
ED_QUERYSERVERLOGCONTENTEND_NTF = 1655
MZ_CHANNELWEIGHTCHANGED_NTF = 1368
ZM_GMGENERATEITEM_ACK = 476
CZ_UNSUMMONPET_REQ = 585
DM_QUERYCHANNELDESCINFO_REQ = 1642
OG_DOWNLOADDICTEND_NTF = 1149
ML_MANAGERINFO_NTF = 116
EE_UPLOADCPSFILEBEGIN_NTF = 1696
SM_SOCIALCHARACTERZONETRANSACTBEGIN_NTF = 2394
MH_CHARLOGIN_NTF = 1752
ZM_BACKDOORCOMMANDHISTORY_NTF = 2227
ZC_CHANGETRADEMONEY_ACK = 640
CG_LAGCHECKSOCIAL_REQ = 998
SM_GUILDMONEYDEC_NTF = 2304
ED_UPLOADFILERESULT_NTF = 942
XD_HOTFIXCONNECTTEST_ACK = 1288
MZ_GLOBALRECLAIM_ITEMSTOCKRECOVERPROBONENHANCECONSUMEDUPDATE_NTF = 2244
XC_NEWHOTFIX_BRD = 416
SM_UPDATECHARQUERYWEIGHT_NTF = 823
XD_DELPREACTIVE_ACK = 1296
SC_ACTIVEBLUEPRINT_NTF = 2016
EE_MS_VARSBODY_NTF = 2263
CZ_UPGRADEFIXZHAO_REQ = 441
MZ_GLOBALMUTE_NTF = 1867
CS_WEIBO_LISTFOLLOWER_REQ = 1771
SC_RESPONSEFORINVITEFRIEND_NTF = 678
CA_LOADSYSTEMNOTICE_REQ = 874
MC_ROLEREGISTRYDATAACKBODY_NTF = 1391
EE_UPLOADALLCPSFILEEND_NTF = 1695
MZ_SELLSTOCK_ACK = 919
MZ_LOADPETSBEGIN_NTF = 671
CM_LOADSTOCKINFO_REQ = 912
ZC_LOCALVARIABLEATTRIBUTE_NTF = 2403
GC_SELECTDICT_ACK = 1210
TM_LOADSTOCKLOGINFO_ACK = 1039
SC_GETGLOBALLEVELEXPRANKINGS_ACK = 1912
MH_QUESTREMOVE_NTF = 255
ZC_COMPETITIONMARK_NTF = 403
ZC_GMOBSERVERITEMINFO_NTF = 2052
ZC_STOPWALK_NTF = 129
DM_CREATEGMCOMMODITY_REQ = 1100
MH_GUILDMONEYUPDATE_NTF = 2323
ZC_ENTERMAPBEGIN_NTF = 2202
DM_DELETENOSALELIST_REQ = 1087
CM_QUERYSTOCKMACKET_REQ = 926
MQ_QUERYCHARINFOBYUSERNAME_REQ = 1465
MQ_QUERYUSERINFOBYNICKNAME_REQ = 1532
MT_LOADCHARITEMPACKETSYSTEM_REQ = 1166
SC_UPDATEGUILDQUESTDATA_NTF = 2355
ZC_CHARACTERSOCIALINFOUPDATE_NTF = 283
CZ_LOADMONEYINFO_REQ = 412
CL_DELETECHAR_REQ = 268
MS_STRINGTABLEIDMESSAGETOMAP_NTF = 2178
CZ_SETAVATAROPTIONS_REQ = 275
ED_DELETESCCT_BRD = 1567
VC_LOADHDBBODY_NTF = 1541
MR_CHANNELPLAYERSCHANGED_NTF = 2074
MH_TWOROLEHISTORYCONTEXT_NTF = 1424
ZM_ADDTOSHOPPINGLIST_NTF = 1795
ZC_PETDESCEND_NTF = 613
ZC_PETENTERMAPFAILED_NTF = 811
SM_PRODUCEHISTORYCONTEXT_NTF = 2076
MZ_GLOBALRECORDDELETE_NTF = 930
ZC_FETCHCOMMODITYAGENT_ACK = 1112
MS_LOADGUILDMEMBER_NTF = 523
MI_AIROLELOGOUT_NTF = 76
MH_GUILDALLIANCEINSERT_NTF = 1604
TM_FINISHLOADAIROLEDATA_NTF = 1420
SM_GUILDEXPUPDATE_NTF = 2359
TM_LOADPETEXTRAINFO_ROLEUNITATTRIBUTE_ACK = 1344
ZC_UPDATECHAREXP_NTF = 310
MH_PKPUNISHUPDATE_NTF = 2225
ZC_PRODUCERESULT_NTF = 2078
CX_GETLATESTDIRECTPATCHLIST_REQ = 1743
IZ_SCENENONPLAYERROLESOCIAL_REQ = 2295
ZC_GLOBALRECLAIM_LISTITEM_BODY_NTF = 1995
LM_GMHISTORYCONTEXT_NTF = 2096
ZM_INSERTVITALITY_NTF = 2150
ZG_ORIGINATEJOINREPETITION_NTF = 596
ZC_TALISMANLEVELUPGRADE_ACK = 2387
CS_QUERYGUILDLEVEL_REQ = 1306
ZC_PROTECTON_ACK = 625
ZC_ACCEPTQUEST_NTF = 252
EE_MT_SHELLSCRIPTINFOSEND_NTF = 1027
ZC_ENMITYPATTERN_NTF = 1450
ZM_UPDATEPROTECTFROZENLEFTSEC_NTF = 1749
ZC_CONFIRMTRADE_ACK = 657
TM_LOADCHARBASEINFO_NTF = 902
ZC_FOLDITEMPACKET_ACK = 158
ED_ARCHITECTURESTATUS_NTF = 1362
ZM_CLEARQUESTFINISHTIMES_NTF = 1735
CZ_GMQUERYROLELOCATION_REQ = 839
ZE_EVENTLOG_NTF = 490
IM_AIROLELOGOUT_NTF = 75
CS_UPDATEGUILDYY_REQ = 2273
ED_CHANGEMCUSTOMNAME_ACK = 1188
LG_LOGIN_ACK = 7
CS_WEIBO_LISTFOLLOWING_REQ = 1774
CV_HDBSCANDATABEGIN_NTF = 1577
CZ_LOCKTRADE_REQ = 642
SC_WEIBO_LISTQUESTACCEPTOR_ACK = 2269
CZ_ITEMSELLTOSHOP_REQ = 983
MD_MODIFYCHAREXP_ACK = 1849
ED_CHANGECRASHSHELLSCRIPT_ACK = 1619
SM_TEAMLEADERCHANGED_NTF = 266
ZC_UPDATEVIPINFO_NTF = 1001
CZ_CLEANSHOPPINGLIST_REQ = 1784
MZ_STATUSACTUALITYCOOLDOWNGROUP_NTF = 136
ZM_UPDATEPROTECTORPWSTATE_NTF = 2211
ZC_GUESSVENDEXECUTE_ACK = 1651
SC_WEIBO_DELBLACK_ACK = 1762
SC_ACCEPTGUILDQUEST_ACK = 2371
ZC_MAPDROPNEW_NTF = 154
CZ_BUYSTOCK_REQ = 922
CS_PRIVATECHAT_REQ = 94
ZI_SCENECHARACTERSOCIALBODY_NTF = 754
DZ_QUERYCHANNELRUNNINGCONFIGSTATUS_REQ = 2117
ZD_RUNGMCOMMANDACKDATA_NTF = 472
DX_DELUNZIP_REQ = 1287
CM_COLLECTPLAYERMACHINEINFO_NTF = 1719
CZ_QUERYFIXPLATFORMLOCATION_REQ = 817
MZ_AIROLEJOINREPETITION_ACK = 564
MZ_PETSKILLS_NTF = 739
DE_DOWNLOADFILE_REQ = 884
MD_SENDPRESENTMONEYTOUSER_ACK = 2141
CZ_ADDVENDITEM_REQ = 1163
TM_LOADPRESENTMONEYINFO_NTF = 1479
MZ_PETDATAEND_NTF = 576
ED_QUERYSCCTXSD_ACK = 1584
MZ_LOADGMCOMMODITYTAGINFO_NTF = 487
ED_MSTOP_NTF = 845
ZM_SUMMONPET_NTF = 615
ZC_STACKITEM_NTF = 291
SH_WEIBO_MONEYUPDATE_HISTORY_NTF = 2091
SM_SETGUILDWARHELPER_ACK = 1270
SC_TEAMINVITE_NTF = 235
GA_USERCUTASSISTANT_NTF = 2223
ZI_SCENENONPLAYERCORE_ACK = 2296
IM_AISTART_NTF = 46
CZ_QUERYROLESHOPINFO_REQ = 505
SC_QUERYALLMUTED_NTF = 1729
MH_GMKICKOUTCHAR_NTF = 1921
MZ_GUILDCANCELALLYWITHGUILD_NTF = 974
SC_RESPONSEFORINVITEFRIEND_ACK = 685
SC_GUILITEMLOG_NTF = 2072
ZC_ZHAOACTIVEUPDATE_NTF = 444
SC_WEIBO_QUERYCOMMENTDETAIL_ACK = 1835
GA_CHARLINKASSISTANT_REQ = 712
CM_LOADSTOCKLOGINFO_REQ = 1036
ZE_GMCOMMANDINFOSEND_NTF = 377
ZC_ACCOUNTMONEYUPDATE_NTF = 933
MZ_TALISMANSELECTION_NTF = 2363
CZ_PICKUPMAPDROP_REQ = 193
MS_INCGUILDITEMCOUNT_NTF = 1990
ZC_DESTORYITEM_ACK = 189
ZC_SECRETCOMMODITYCOUNTUPDATE_NTF = 2425
ED_T_STRINGTABLE_NTF = 1442
CS_WEIBO_DELFOLLOWING_REQ = 1782
SC_WEIBO_CHANGEFACE_ACK = 2235
MZ_SOCIALLINK_NTF = 1947
ZM_CHANNELWEIGHTCHANGED_NTF = 1367
ZM_FORCEFINISHQUEST_NTF = 2200
ZC_UPDATEQUESTPERIODSINFO_NTF = 2409
ZC_CANCELPOSE_ACK = 145
ZC_FETCHMONEY_ACK = 935
CZ_VENDITEMLISTCANCEL_REQ = 1222
SC_GUILDLEVELUPDATE_NTF = 2361
MG_LOGINCLOSE_NTF = 273
EE_MT_DAEMONPATCHRESULT_NTF = 870
SC_WEIBO_LISTMENTIONMEFEEDBODY_NTF = 1935
MC_LOADPRESENTINFO_ACK = 1045
SC_WEIBO_QUERYUSERINFO_ACK = 1822
EE_CUSTOMVERSION_NTF = 480
SC_WEIBO_LISTHOTQUEST_ACK = 2064
ZI_SCENECHARCORE_ACK = 2299
CZ_LOADBUYBACKITEMLIST_REQ = 971
ZC_UPDATEQUESTDATA_NTF = 302
CZ_ANSWERTRADEWITHPLAYER_REQ = 641
CM_QUERYSHOPPINGBILLLOG_REQ = 2087
GC_USERASSISTANTCONNECTED_NTF = 2221
MZ_ALLITEMDATA_NTF = 159
MZ_ADMINREALTIMEMONITOR_ADMINSTOPMONITORGLOBAL_NTF = 2189
BM_STOPUSERPAY_NTF = 1889
MH_GUILDLEVELUPDATE_NTF = 1601
SM_LOADGUILD_REQ = 526
SC_ADDMUTED_ACK = 687
CS_WEIBO_LISTMENTIONMEFEED_REQ = 1884
MH_MONEYINFODELETE_NTF = 1135
CA_UPDATECLIENTCUSTOMSDATA_REQ = 713
MH_CHARPRESENTINSERT_NTF = 1077
MC_DELETEPRESENTMONEY_NTF = 1476
SC_WEIBO_LISTMENTIONMECOMMENT_ACK = 1880
SM_REMOVEGUILDMEMBER_NTF = 525
MG_SOCIALSTOP_NTF = 216
DM_ADMINREALTIMEMONITOR_ADMINSTARTMONITORGLOBAL_REQ = 2187
MC_GETSTOCKTAXRATE_ACK = 1092
ZC_TALISMANALLELEUNSELECT_ACK = 2391
ZC_COMPETITIONEFFECTS_NTF = 53
MH_BACKDOORCOMMANDHISTORY_NTF = 2228
DM_SHUTDOWN_REQ = 1459
GC_DOWNLOADDICTSTART_NTF = 339
ZM_ADJUSTCHANNELMAXPLAYERS_NTF = 1063
MG_SOCIALINFO_NTF = 215
ZC_GETALLITEMDATA_ACK = 176
CX_HOTFIXVERCHECK_REQ = 1272
MZ_SHOPOPEN_ACK = 450
CS_TEAMPETITION_REQ = 203
ED_SHELLSCRIPTINFOSEND_NTF = 199
MC_PAYSERVICESTOP_NTF = 2173
MS_FINISHLOADCHARINFO_NTF = 598
TM_LOADAIROLEDATAERROR_NTF = 1416
IZ_SCENECHARACTERSOCIAL_REQ = 755
MH_PRODUCEHISTORYCONTEXT_NTF = 2075
ZC_UPDATESHOPPINGLIST_ACK = 1794
TM_LOADVIPINFO_NTF = 999
ZM_UPDATEVIPINFO_NTF = 992
ED_STARTS_ACK = 948
GA_GATESTART_NTF = 714
CS_LOADCHARIDBYNICKNAME_REQ = 807
ZC_OBJECTSLAMMEDSTART_BRD = 69
CS_GUILDCHAT_REQ = 1002
BM_GENSHOPPINGBILL_ACK = 1815
DE_ADDSCCTCONTENT_NTF = 1549
ZM_UPDATEQUESTSTATUSINFO_NTF = 1445
ZC_ASKFORCOMMODITYAGENT_ACK = 1125
CZ_PRODUCEFORCRAFTRECIPE_REQ = 2110
ZM_ZONESTART_NTF = 9
EE_MS_CONFIGBODY_NTF = 423
MQ_QUERYBANINFO_REQ = 1517
IZ_AIROLELOGOUT_NTF = 183
CZ_TALISMANRANKIMPROVE_REQ = 2401
MH_ZONESTOPPED_NTF = 366
TM_LOADAIROLEUNITACTUALITY_ACK = 1419
MZ_CREATESUMMONEE_NTF = 959
MS_LOADCHARCOREVERSION_ACK = 765
TM_LOADCHARAVATARCACHE_NTF = 1379
MZ_BELONGTEAMQUITED_NTF = 282
SC_CHANGEMEMBERGRADATION_ACK = 791
ML_GATEINFO_NTF = 27
SC_MEMBERGRADATIONUPDATE_NTF = 793
MH_ITEMPACKETREMOVE_NTF = 773
IZ_SETDEPLOYTIME_NTF = 104
ZM_CLEARQUESTLOGS_NTF = 1425
DM_FORCEREMOVESTATE_REQ = 1896
MS_INITALLIEDGUILDS_NTF = 1009
MS_CHECKMANAGERDBSYNCVERSION_NTF = 1451
ZC_REFUSECOMMODITYAGENT_NTF = 1134
MQ_QUERYUSERINFOBYUSERNAME_REQ = 1536
SC_WEIBO_LISTNEWAGGREGATIONFEED_ACK = 2203
ZC_SKILLPRACTICEINFOEND_NTF = 200
MC_SHOPPINGBILLLOG_NTF = 2086
EE_MS_CONFIGBODYEND_NTF = 223
QM_QUERYCHARINFOBYNICKNAME_ACK = 1460
SC_WEIBO_LISTSYSTEMFEED_ACK = 2344
MR_CHARLEAVEMAP_NTF = 1937
SC_WEIBO_LISTFOLLOWINGBODY_NTF = 1834
RM_KILLMONSTERCOUNTUPDATE_NTF = 1742
CM_CANCELSHOPPINGBILL_REQ = 1814
ZM_DELETECOMMODITYAGENTINFO_NTF = 1131
MZ_STOPSHUTDOWN_NTF = 1458
ZC_LINKMAP_NTF = 68
TM_LOADPRESENTITEMINFO_NTF = 1051
MS_GUILDWARHELPER_NTF = 1252
TM_LOADDANYAOINFO_ACK = 2414
SC_QUERYGUILDGRADATIONINFO_ACK = 804
MQ_QUERYUSERINFOBYUSERID_REQ = 1520
MH_CHARPRESENTMONEYINSERT_NTF = 1473
QM_QUERYUSERBANEFITCONTROLINFO_ACK = 2214
ZC_REPLACEITEMPACKET_ACK = 610
ED_DAEMONPATCH_ACK = 1060
GC_HOTFIXFILELIST_NTF = 1274
MZ_ROLEREGISTRYDATA_NTF = 333
ED_QUERYSERVERLOG_ACK = 1654
ZM_SWAPITEMPACKET_NTF = 612
SG_SHITLISTTOTALMD5_BRD = 1108
SC_WEIBO_QUERYFEEDDETAILBODY_NTF = 1824
MR_MONEYDROPNOLIMIT_NTF = 1900
SC_ANSWERALLYWITHGUILD_ACK = 996
CS_QUITGUILD_REQ = 546
SC_RESPONDGUILDAPPLICATION_ACK = 777
MZ_SETDEFENDER_NTF = 1320
CG_CANCELFORLOGOUTING_NTF = 1714
SH_WEIBO_GUILDQUESTINSERT_HISTORY_NTF = 2326
ZC_ROLEWALKSPEED_NTF = 86
MS_GUILDWAREND_NTF = 1250
CZ_DOLEVELUP_REQ = 2346
ZC_TALISMANMATEGENERATE_ACK = 2399
MT_LOADQUEST_NTF = 1313
MH_GMADDCHARSTATE_NTF = 2038
ED_EVENTLOGWHEN_VSZOVERTHAN_NTF = 2264
LC_LOGINQUEUE_NTF = 2
MS_WEIBO_ACCEPTSYSTEMQUESTFINAL_NTF = 2340
MC_QUERYGUILDFUNDLOGBYID_ACK = 2107
ZC_ENTERMAPEND_NTF = 2201
DX_DELPREACTIVE_REQ = 1281
SC_REMOVEGUILDMEMBER_ACK = 543
ZM_UPDATEVITALITY_NTF = 2151
MD_FORCEADDSTATE_ACK = 1891
CZ_REFUSECOMMODITYAGENT_REQ = 1132
MH_GUILDEXPUPDATE_NTF = 1603
CS_QUERYGUILDTECHNOLOGY_REQ = 2015
DE_DAEMONPATCHDATAEND_NTF = 1061
DE_SHUTDOWNNOTICETEMPLATEREMOVE_REQ = 1488
CS_CHANGETEAMLEADER_REQ = 257
CS_WEIBO_QUERYFEEDDETAIL_REQ = 1817
DE_ACCESSTOKENLOGIN_REQ = 1022
MZ_WEIBO_ACCEPTWANTEDQUEST_REQ = 2309
ZC_CHANGEENMITYPATTERN_ACK = 91
ZC_SWAPITEM_ACK = 150
ZM_CREATEAIROLE_NTF = 107
XG_HOTFIXFILELIST_ACK = 1275
CS_REMOVEMUTED_REQ = 681
DM_QUERYCHARINFOBYCHARID_REQ = 1495
SM_WEIBO_LISTOFFLINEFOLLOWINGFEEDS_REQ = 2230
ZC_SKILLPRACTICEINFO_NTF = 1074
ZC_CLEANSHOPPINGLIST_ACK = 1791
MR_QUESTNOLIMIT_NTF = 1736
SM_CHARACTERSOCIALVERSIONLOAD_NTF = 750
MT_LOADPETEXTRAINFOEND_NTF = 1340
DM_ADMINREALTIMEMONITOR_ADMINSTOPMONITORGLOBAL_REQ = 2186
ZC_GUESSVENDLISTCANCEL_ACK = 1659
CZ_CHANGEAMICABILITYPATTERN_REQ = 2336
SM_WEIBO_TRANSFERMONEY_REQ = 1928
MS_GUILDFUNDINC_NTF = 1233
MZ_CANCELSTOCK_NTF = 906
SC_WEIBO_DELCOMMENT_ACK = 1829
ZI_PETLIFEFINISHED_NTF = 769
CS_GUILDLEVELBUILD_REQ = 2357
VC_LOADHDBEND_NTF = 1543
SC_UPDATEGUILDQUESTSTATUS_ACK = 2366
MS_WEIBO_TRANSFERMONEY_ACK = 1927
TM_LOADCOMMODITYAGENTINFO_NTF = 1128
ZC_UPDATECRAFT_ACK = 2027
ZC_CANCELVEND_ACK = 1175
SC_GETGUILDWARJOINER_ACK = 1257
ZM_CONTRIBUTEGUILDFUND_REQ = 1239
MC_SHOPPINGBILLISPAY_NTF = 1810
ZM_CHARLOGOUT_NTF = 32
ZC_LOCKTRADE_NTF = 658
BM_PAYSERVICESTOP_NTF = 2172
ZC_SKILLPRACTICEUPDATE_NTF = 1075
GC_HOTFIXFILELIST_ACK = 1273
DE_RELOADCPS_REQ = 1683
CS_UPDATEGUILDNOTICE_REQ = 2059
MD_DELETEGMCOMMODITY_ACK = 1102
CZ_PROTECTON_REQ = 632
ED_SHUTDOWNNOTICETEMPLATEADD_ACK = 1485
CS_REMOVEGUILDMEMBER_REQ = 544
ED_SHELLSCRIPTINFOSBEGIN_NTF = 205
MZ_CHECKRULEUPDATEZONE_ACK = 972
CS_WEIBO_ADDFORWARD_REQ = 1919
ZC_GENSHOPPINGBILL_ACK = 1786
CS_QUERYCACHEDCHARACTERSTATUSINFO_REQ = 2190
CS_WEIBO_LISTOUTCOMMENT_REQ = 2134
ED_SHUTDOWNNOTICETEMPLATEREMOVE_NTF = 1482
ZC_QUERYNONPLAYERFUNCTION_ACK = 342
MZ_LOADLORDWARHISTORY_NTF = 1357
CS_MEMBERTEAMINVITE_REQ = 704
ZC_CHANGECHANNELNUMBER_ACK = 975
GZ_CHARLOGOUT_NTF = 182
CZ_CONTRIBUTEGUILDFUND_REQ = 1232
SC_QUERYGUILDONLINEMEMBER_ACK = 550
ZM_INCREASECOMMODITYCUSTOMVALUE_NTF = 447
ZC_ROLESHOPINFO_NTF = 508
MZ_DANYAOSLOTUPDATE_NTF = 2417
SM_LOADCHARCOREVERSION_REQ = 88
TM_LOADCOREVERSION_NTF = 899
ZM_SECRETCOMMODITYCOUNTUPDATE_NTF = 2424
MZ_CREATEPETROLE_NTF = 810
CZ_SWAPITEMPACKET_REQ = 604
CZ_DECIDEITEMACTION_REQ = 323
CS_QUERYGUILDBYPAGE_REQ = 801
MD_MODIFYCHARSKILL_ACK = 1857
OG_DOWNLOADDICTSTART_NTF = 1150
MH_GUILDINSERT_NTF = 1600
MS_PRODUCEBYBLUEPRINT_ACK = 2042
MI_CHANNELOPEN_NTF = 349
ED_T_GMCOMMANDCATEGORYINFOEND_NTF = 1435
ZC_MOVEITEMPACKET_ACK = 153
ZC_ITEMSELLTOSHOP_ACK = 968
ZM_UPDATELOGINLOCATION_NTF = 267
MZ_INSERTPRESENT_NTF = 1043
MZ_LOADGMCOMMODITYCUSTOMINFO_NTF = 486
ZC_CANCELINVITETRADEWITHPLAYER_NTF = 659
CA_LOADNOTICEBRIEF_REQ = 875
ZM_CONTRIBUTEGUILDITEM_NTF = 1974
ZC_VARIABLEATTRIBBOUNDCHANGED_BRD = 111
SC_WEIBO_ADDFOLLOWING_ACK = 1773
SC_DISMISSTEAM_ACK = 619
MZ_KILLMONSTERCOUNTUPDATE_NTF = 1741
ZM_CLEANSHOPPINGLIST_NTF = 1767
MZ_CONTRIBUTEGUILDFUND_ACK = 1237
MS_GUILDWARDEFENDER_NTF = 1246
RM_MONEYDROPLIMIT_NTF = 1898
MH_UNITZHAOINSERT_NTF = 470
SC_GETSHITLISTPACKAGEMD5_NTF = 1110
DM_GLOBALUNMUTE_REQ = 1865
DZ_ADJUSTGLOBALRECLAIMITEMSTOCKRECOVERPROBONENHANCECONSUMED_REQ = 2247
SM_GUILDQQUPDATE_NTF = 2279
RM_QUESTLIMIT_NTF = 1734
CM_REPORTCAFEINFO_NTF = 2177
DA_LOADSYSTEMNOTICE_REQ = 1668
SC_REMOVEENEMY_ACK = 683
SM_STARTINITGUILD_REQ = 986
MZ_CHATREPORTCOUNT_NTF = 1964
SC_TEAMMEMBERMAINVARIABLEATTRIB_NTF = 1708
ZC_SUMMONEEDESC_NTF = 1071
ZC_GLOBALRECORD_NTF = 923
MB_CANCELSHOPPINGBILL_NTF = 1812
ZC_VEND_ACK = 1173
MS_QUERYAGENTSTART_NTF = 2236
DM_ADMINREALTIMEMONITOR_ADMINSTARTMONITORROLE_REQ = 2130
QM_QUERYGUILDFUNDLOGBYID_ACK = 2106
DM_QUERYCHARINFOBYNICKNAME_REQ = 1506
SC_TEAMMEMBERQUITTED_NTF = 262
MR_LOADZONE_ACK = 1727
CM_QUERYGUILDMONEYLOG_REQ = 2320
ZM_GENSHOPPINGBILL_REQ = 1765
CG_RANDKEY_NTF = 1713
CX_LOADPATCH_REQ = 1746
ED_UPDATESCCT_BRD = 1554
ZM_PLAYERPKHISTORYCONTEXT_NTF = 1940
MZ_STATUSACTUALITYDATAEND_NTF = 133
ZC_CHANGETRADEMONEY_NTF = 643
SC_GUILDQQUPDATE_NTF = 2272
DE_CHANGEAUTHORITYROLEGROUPS_REQ = 866
MZ_UPDATEGLOBALSERVERINFO_NTF = 2265
DE_LOCKSCC_REQ = 887
ED_CREATEAUTHORITYROLE_ACK = 850
CZ_GLOBALRECLAIM_RECLAIMITEM_REQ = 1993
CM_QUERYGUILDFUNDLOGBYID_REQ = 2049
ZC_CANCELTRADE_NTF = 649
SM_TEAMCREATE_NTF = 202
MZ_INITALLIEDGUILDS_NTF = 535
MH_GUILDMEMBERGRADATIONUPDATE_NTF = 1609
TM_LOADPETEXTRAINFO_ITEMPACKETSYSTEM_ACK = 1371
ZD_QUERYCHANNELRUNNINGCONFIGSTATUS_ACK = 2118
ZM_UPDATEQUESTDATA_NTF = 301
ZM_GLOBALRECORDDATAUPDATE_NTF = 917
ZC_ANKYLOSEBEGIN_NTF = 84
CZ_TALISMANSELECTSTATUS_REQ = 2397
MD_GLOBALMUTE_ACK = 1869
ZC_FIXINDEXPLATFORMLOCATION_NTF = 815
ZM_STACKITEM_NTF = 166
ED_T_GMCOMMANDCATEGORYINFO_NTF = 1436
ZC_QUERYFIXINDEXPLATFORMLINK_ACK = 816
ZC_GUANDINGOPENSLOT_ACK = 2434
MG_CHECKSYNCTIME_NTF = 1701
CZ_BUYCOMMODITY_REQ = 451
CS_WEIBO_LISTNEWUSERFEED_REQ = 2208
MB_CANCELQUERYSHOPPINGBILL_NTF = 1813
DM_ADMINREALTIMEMONITOR_ADMINSTOPMONITORROLE_REQ = 2129
MD_QUERYUSERINFOBYUSERID_ACK = 1525
ZC_GUANDINGSTATUSUPDATE_NTF = 2435
XC_LOADPATCHBODY_NTF = 1747
ZC_QUESTLOADFINISH_NTF = 2199
ED_GMCOMMANDINFOSEND_NTF = 378
ZM_CHANNELCLOSE_NTF = 343
SC_PRIVATECHAT_ACK = 243
CV_SCANHDB_ACK = 1588
ZZ_COMPETIONRANAEVENTSTACK_NTF = 109
MH_VIPPOINTUPDATE_NTF = 1138
MZ_SETINDULGESTATE_NTF = 1338
EE_TM_DESTROYAUTHORITYGROUP_NTF = 833
CZ_APPENDWALKWITHCLIMBING_REQ = 561
CZ_GUANDINGOPENSLOT_REQ = 2433
MQ_QUERYUSERINFOBYCHARID_REQ = 1533
ZM_GMFORCECHARCLIENTLOCATION_ACK = 1680
DM_QUERYUSERBANEFITCONTROLINFO_REQ = 2216
MD_UPDATEGMPROTECTORSTATE_ACK = 2157
LG_SELECTCHAR_ACK = 83
ZM_INSERTPRESENT_NTF = 1053
SC_REGGUILDWAR_ACK = 1243
ZC_MAPLOADED_ACK = 119
SC_GUILDLEVELBUILD_ACK = 2358
MH_MONEYINFOUPDATE_NTF = 1137
MD_QUERYCHARINFOBYUSERID_ACK = 1494
MZ_OBJECTATRRIBUTEEND_NTF = 429
DN_OPENGLOBALNPC_REQ = 1219
MQ_QUERYUSERBANEFITCONTROLINFO_REQ = 2215
ZC_ITEMSLOTUPDATE_NTF = 149
SC_QUERYROLEONLINESTATUS_ACK = 771
ZM_QUERYCHARSTATEDESC_ACK = 1917
ZM_CREATEPET_NTF = 672
CZ_TALISMANALLELEACTIVE_REQ = 2386
MZ_CHARCHANGEGUILD_NTF = 987
OG_DOWNLOADDICTBODY_NTF = 1154
IZ_AISTART_NTF = 128
GS_VARIABLEATTRIBSTATUS_NTF = 1709
ZC_MAPSCOPEAREAINSIGHT_NTF = 723
CG_QUERYDICTINFO_REQ = 1231
SC_GETCLASSLEVELEXPRANKINGS_ACK = 1914
IZ_AIROLEJOINCHANNEL_REQ = 61
MH_ITEMENHANCEHISTORY_NTF = 2132
MI_AIROLEBASEINFO_NTF = 74
RM_ITEMDROPLIMIT_NTF = 1646
ZZ_COMPETIONRANAEVENTOVERFLOW_NTF = 110
GM_LOCATEREPETITION_REQ = 577
MZ_GLOBALRECORDDATA_NTF = 910
AC_LOADAFTERLOGINNOTICE_ACK = 878
MR_SNSQUESTEXPIRED_NTF = 2266
ZC_MAPDROPSNOUTSIGHT_NTF = 698
GC_SELECTCHAR_ACK = 34
SC_WEIBO_LISTCOMMENT_ACK = 1838
SC_LOADCHARIDBYNICKNAME_ACK = 806
SC_TEAMCHAT_NTF = 242
MG_PAYURLINFOUPDATE_NTF = 2165
ZM_MONEYDROPFORCHAR_NTF = 1899
MZ_ADMINREALTIMEMONITOR_ADMINSTARTMONITORROLE_NTF = 2127
SC_MEMBERREMARKUPDATE_NTF = 797
CZ_GLOBALRECLAIM_LISTITEM_REQ = 1997
ZC_MAPOBJECTREMOVED_NTF = 57
CZ_OUTERCLIENTDATA_REQ = 1444
MH_UNITSKILLACTIVE_NTF = 465
SC_WEIBO_MONEYCHANGED_NTF = 1845
DE_AUTHORITYROLELOGIN_REQ = 847
ZM_GMHISTORYCONTEXT_NTF = 2032
MC_DELETEPRESENT_NTF = 1049
SM_WEIBO_TRANSFERMONEYFINAL_NTF = 2081
LC_DELETECHAR_ACK = 376
ED_RUNGMCOMMANDFORDAEMON_ACK = 950
CS_QUERYGUILDGRADATIONINFO_REQ = 805
CZ_TALISMANMATEGENERATE_REQ = 2400
ZM_NEWLORDWARHISTORY_NTF = 1358
MQ_QUERYCHARINFOBYNICKNAME_REQ = 1461
AG_CHARLINKASSISTANT_ACK = 707
ZC_ANKYLOSEEND_NTF = 85
MG_LORDWARSTATUS_BRD = 1355
ZC_SELLSTOCK_ACK = 936
MZ_LINKTEAM_NTF = 240
MH_GLOBALUNMUTECHAR_NTF = 1681
ZC_PETBASICATTRIBCHANGED_NTF = 821
ED_EVENTLOGWHEN_CPUOVERTHAN_NTF = 2240
GA_QUERYINDULGESTATE_NTF = 1350
ZC_QUERYSECRETCOMMODITY_ACK = 2432
CS_LOADCHARACTERSTATUSINFO_REQ = 2191
CZ_QUERYROLEDIALOGITEMINFO_REQ = 510
CZ_CLOSEDIALOG_NTF = 390
MH_REPORTCAFEINFO_NTF = 2176
SC_QUERYALLFRIEND_NTF = 730
ZM_TALISMANCHANGESELECT_NTF = 2382
ZC_ROLECUSTOMDATA_BRD = 1093
CZ_DELFROMSHOPPINGLIST_REQ = 1796
ZC_CHAREXPTOITEM_ACK = 2380
CZ_CANCELTRADE_REQ = 656
SC_QUERYALLIEDGUILDS_NTF = 981
ZC_GUESSVENDLIST_ACK = 1653
DE_UPLOADFILECANCEL_REQ = 503
ZM_UPDATEPROTECTORPASSWORD_NTF = 624
ZM_GLOBALRECLAIM_QUERYITEMSTOCKCOUNT_NTF = 2292
ZM_ENMITYPATTERN_NTF = 1448
CS_SCENECHARACTERSOCIAL_REQ = 751
ZI_AIROLELOGOUT_NTF = 181
EE_SM_START_NTF = 843
ED_RELOADPUBLISHSCC_ACK = 1094
MC_CANCELSTOCK_ACK = 907
CZ_REMOVEPRESENTITEM_REQ = 1519
DX_HOTFIXCONNECTTEST_NTF = 1290
LC_LASTLOGINIPINFO_NTF = 331
MH_CHANNELHISTORYCONTEXT_NTF = 1389
SC_UPDATEGUILDYY_ACK = 2271
SC_QUERYBLUEPRINT_NTF = 2009
LM_SINGLEHISTORYCONTEXT_NTF = 2097
TM_LOADSUMMONEEBASEINFOS_NTF = 1408
QM_QUERYBANINFO_ACK = 1516
ZC_ROLEKILLPUNISHSTATUS_NTF = 100
SC_WEIBO_LISTPLAZAFEED_ACK = 1777
AC_GETACCOUNTCLIENTCUSTOMDATA_ACK = 1145
MS_WEIBO_ACCEPTGUILDQUEST_ACK = 2302
DX_PREACTIVE_REQ = 1280
ZC_POSEBEGIN_NTF = 141
ND_CLOSEGLOBALNPC_ACK = 1221
TM_LOADCHARITEMPACKETSYSTEMDATA_NTF = 1164
BM_STARTUSERPAY_NTF = 1888
ZC_FINISHQUEST_NTF = 254
DL_UNBANOBJECT_REQ = 1593
CS_GETPACKAGEINDEX_REQ = 1361
CG_LAGCHECKZONE_REQ = 993
VC_CPSCHECKEXCEPTION_NTF = 1576
ZM_PETENTERSCENE_NTF = 967
CZ_DESTORYITEM_REQ = 191
MH_GUILDDELETE_NTF = 1602
DM_QUERYUSERINFOBYUSERID_REQ = 1537
CZ_QUERYROLELEVEL_REQ = 345
EE_TM_CHANGEGROUPAUTHORITYBEGIN_NTF = 859
ZC_UNITPARAMETERDATABODY_NTF = 499
TM_LOADCHARITEMPACKETSYSTEM_ACK = 1165
MZ_AIDEPLOYDEVOLVE_NTF = 101
MQ_QUERYCHARINFOBYCHARID_REQ = 1463
ZC_TALISMANRANKIMPROVE_ACK = 2402
CZ_SCREENCHAT_REQ = 97
MT_LOADROLEREGISTRY_NTF = 1341
MI_CLOSECLIENT_NTF = 147
EE_RESTART_NTF = 1097
ZC_GLOBALRECLAIM_RECLAIMITEM_ACK = 1991
ZM_SECRETCOMMODITYUPDATE_NTF = 2426
MZ_CREATESUMMONEEATTRACTEDFROMMAP_NTF = 864
SM_LORDWARPREPARED_NTF = 1325
CZ_TAKEPRESENT_REQ = 1042
MD_ADMINREALTIMEMONITOR_ADMINSTARTMONITORGLOBAL_ACK = 2185
EE_MS_VARSBODYEND_NTF = 2261
SC_TEAMINVITE_ACK = 227
SM_CLEARHISTORYCONTEXT_NTF = 1612
AG_USERLINKASSISTANT_ACK = 2222
CS_RESPONDCHARJOINGUILD_REQ = 517
CS_QUERYALLMUTED_REQ = 1728
QM_QUERYCHARSTATEDESC_ACK = 1905
ZC_ANCESTORSUMMONERUPDATEEND_BRD = 2291
ZC_QUERYACCOUNTMONEY_ACK = 939
MC_INSERTPRESENT_NTF = 1044
ED_ZPROCESSINFO_NTF = 493
MS_GUILDFUNDLOG_NTF = 2051
MC_QUERYGUILDMONEYLOGBYID_ACK = 2317
CZ_DIRECTPATCHLOADED_NTF = 1756
DE_SHUTDOWNNOTICETEMPLATEADD_REQ = 1483
CS_WEIBO_LISTMENTIONMECOMMENT_REQ = 1934
GC_SETINDULGESTATE_NTF = 1349
CX_HOTFIXFILELIST_REQ = 1276
SC_WEIBO_QUERYMONEY_ACK = 1844
MZ_GMGENERATEITEM_REQ = 478
SM_CHARLOADGUILD_REQ = 522
GC_LOGIN_ACK = 3
MH_LOADZONE_ACK = 360
ZC_TAKEPRESENT_ACK = 1046
MC_QUERYSTOCKMACKET_ACK = 924
SC_GUILDMONEYUPDATE_NTF = 2307
ED_LISTSCCTSDATAEND_NTF = 1552
SC_INVITEFRIEND_NTF = 691
CZ_CHANGEENMITYPATTERN_REQ = 103
SC_QUERYALLGUILDNUM_ACK = 803
MS_LOADGUILDNOTICE_NTF = 2058
MR_COMMONVENDDEAL_NTF = 1955
ZC_VENDITEMLIST_ACK = 1167
CZ_LOADCHARVITALITYSTATUS_REQ = 2152
DZ_ADJUSTGLOBALRECLAIMITEMSTOCKRECOVERPROBONPRODUCECONSUMED_REQ = 2250
SC_ROLEQUERYDESCLIST_NTF = 595
MD_QUERYUSERBANEFITCONTROLINFO_ACK = 2217
ZM_TWOROLEHISTORYCONTEXT_NTF = 1423
QM_QUERYCHARPROTECTORSTATE_ACK = 2158
CS_TEAMUP_REQ = 747
ZC_VENDWORD_ACK = 1211
MZ_LOADGMCOMMODITYSELLRULEINFO_NTF = 485
MC_CHARLOGOUT_NTF = 18
ZM_ZHAOACTIVE_NTF = 434
GO_DOWNLOADDICT_NTF = 304
MS_CREATEGUILD_ACK = 533
CS_WEIBO_QUERYMONEY_REQ = 1846
TM_LOADPETBASEINFOSEND_NTF = 1348
MH_DANYAOSLOTOPENCOUNTUPDATE_NTF = 2420
GC_ASSISTANTDISCONNECTED_NTF = 709
ZM_DELETEBUYBACKITEM_NTF = 978
ZC_STARTSHUTDOWN_NTF = 1454
ZC_STOPSHUTDOWN_NTF = 1493
DE_CHECKSELFCONNECT_NTF = 946
VG_CLIENTLINKVERIFIER_ACK = 1501
SC_QUERYTECHNOLOGYBUILDDATA_ACK = 2012
SH_WEIBO_QUESTACCEPT_HISTORY_NTF = 2090
DM_QUERYUSERINFOBYNICKNAME_REQ = 1534
CM_LOADPRESENTINFO_REQ = 1041
MZ_LINKSCENEPREPARED_NTF = 45
ZC_MOVEITEM_ACK = 173
DM_QUERYCHARSTATEDESC_REQ = 1909
AC_GETCLIENTCUSTOMSDATA_ACK = 721
DM_SENDPRESENTMONEYTOUSER_REQ = 2140
ZC_LOADCOMMODITYSELLRULEINFO_NTF = 445
SM_INSERTGUILDMEMBER_NTF = 530
ZC_DANYAOSYSTEMINITBEGIN_NTF = 2411
CS_QUERYALLFRIEND_REQ = 729
MI_ZONEINFO_NTF = 1
ZC_CLEARQUESTGROUPLOG_NTF = 1433
CZ_QUERYFIXINDEXPLATFORMLINK_REQ = 818
MZ_ADDATKHELPER_NTF = 1316
DM_QUERYUSERMONEYINFO_REQ = 1524
ZC_QUERYCOMMODITYAGENTINFO_ACK = 1113
CS_REMOVEFRIEND_REQ = 679
MG_COMPRESSCENTERSTOP_NTF = 1148
MZ_QUESTPERIODSINFO_NTF = 2407
ZM_PRODUCEBYBLUEPRINT_ACK = 2047
MT_ENDLOADCHARDATA_NTF = 909
CZ_SCENENONPLAYERROLESOCIAL_REQ = 196
SC_FINISHGUILDQUEST_ACK = 2377
MH_QUESTSTATUSUPDATE_NTF = 1664
CS_TESTSTRINGFORBID_REQ = 1139
ZC_CHANNELSTOPCLOSE_NTF = 2405
DM_SENDPRESENTBYGENID_REQ = 1513
SC_ADDENEMY_ACK = 686
DE_CHANGEGROUPAUTHORITYEND_NTF = 838
ZC_COMPETITIONMOVEMENTSTOP_BRD = 120
TM_LOADCAFERECORDTIME_NTF = 2175
CS_QUERYGUILDINFO_REQ = 516
CZ_QUERYATTRIBUTEINFO_REQ = 825
ED_UNLOCKSCC_ACK = 955
GC_DICTCHANGE_NTF = 1207
ZC_UNSUMMONPET_ACK = 580
MS_ACTIVEBLUEPRINT_REQ = 2002
DE_UPLOADCPSFILEDATA_NTF = 1689
ZM_PETLIFELEFTTIMEUPDATE_NTF = 592
CS_WEIBO_LISTAGGREGATIONFEED_REQ = 1823
ZC_DISCARDPET_ACK = 562
MQ_QUERYCHARITEMINFO_REQ = 1939
XD_ACTIVE_NTF = 1291
MT_ENDLOADAIROLEDATA_NTF = 1415
ZM_UPDATECHAREXP_NTF = 307
MH_UNITZHAOACTIVE_NTF = 467
ZM_JOINCHANNEL_REQ = 26
SC_QUERYGUILDMEMBER_NTF = 551
MD_QUERYCHARSTATEDESC_ACK = 1906
MZ_DOSHUTDOWN_NTF = 1457
ZN_CHANNELSINFO_NTF = 1186
ZC_GMCHANGECHANNEL_ACK = 851
MC_SERVERIDINFO_NTF = 2155
MZ_OBJECTATRRIBUTECARRYINGSKILLS_NTF = 431
ZC_LOADVIPINFO_ACK = 1007
GC_JOINCHANNELRESULT_NTF = 25
DM_MODIFYCHAREXP_REQ = 1858
EE_UPLOADCPSFILEDATAACK_NTF = 1693
SC_QUERYGUILDTECHNOLOGYUPDATEDATA_ACK = 2020
MT_LOADCHARSKILL_REQ = 1375
SM_MEMBERGRADATIONUPDATE_NTF = 794
CS_WEIBO_LISTHOTQUEST_REQ = 2066
MZ_QUERYCHARLOCATION_REQ = 1634
DZ_ADJUSTCHANNELITEMDROPRATE_REQ = 2056
MQ_QUERYGUILDFUNDLOGBYID_REQ = 2105
DM_QUERYUSERINFOBYUSERNAME_REQ = 1538
ED_CHANGEGROUPAUTHORITYRESULT_NTF = 844
ZM_PETOWNERENTERSCENE_NTF = 962
CG_JOINCHANNEL_NTF = 22
ZM_UPDATEPROTECTOROPENPW_NTF = 628
DM_QUERYUSERLASTLOGININFO_REQ = 1575
MZ_AIROLEJOINCHANNEL_ACK = 64
ED_UPDATESCCT_ACK = 1562
DM_GMFORCECHARLOCATION_REQ = 1637
DM_COLLECTPLAYERMACHINEINFO_REQ = 1718
QM_QUERYCHARINFOBYUSERID_ACK = 1462
ZC_ASKPETDOCOMMAND_ACK = 674
ZC_PICKUPMAPDROP_ACK = 192
CZ_ASKPETDOCOMMAND_REQ = 675
ZM_PRESENTITEMCOUNTUPDATE_NTF = 2124
DE_CHANGEAUTHORITYROLEPASSWORD_REQ = 848
SC_GUILDTECHNOLOGYBUILD_ACK = 2005
DZ_ATTACHSERVERLOG_NTF = 1159
CG_VALIDATE_REQ = 783
MG_LOGINSTART_NTF = 274
MT_LOADCHARMONEYINFO_REQ = 914
MZ_SKILLPRACTICEINFO_NTF = 1073
ZC_CANCELVEND_NTF = 1176
MS_WEIBO_ACCEPTQUEST_ACK = 1881
TM_LOADSECRETCOMMODITY_NTF = 2428
EE_MT_GMCOMMANDINFOSEND_NTF = 1029
GS_GATESTART_NTF = 213
ZN_CREATEGLOBALNPC_AI_ACK = 295
SC_TEAMPETITIONCONFIRM_ACK = 233
ZM_SETHISTORYCONTEXT_NTF = 559
ZM_FORCEADDSTATE_ACK = 1890
SM_ACCEPTGUILDQUEST_REQ = 2375
ZM_INSERTBUYBACKITEM_NTF = 990
ZC_COMPETITIONCASTINGFINISH_NTF = 60
EM_ADMINREALTIMEMONITOR_STOPMONITOR_NTF = 2138
MH_GMCHANGECHARLOCATION_NTF = 1920
MS_LOADGUILDQUEST_NTF = 2353
MZ_LORDWAREND_NTF = 1322
MH_GMREMOVECHARSTATE_NTF = 1922
ZC_CONTRIBUTEGUILDFUND_ACK = 1238
ZM_COMMONVENDDEAL_NTF = 1959
MH_GUILDTECHNOLOGYUPDATE_NTF = 2254
MD_QUERYONLINECHARINFO_ACK = 1509
MZ_GLOBALRECLAIM_SYSTEMINITEND_NTF = 2030
ZM_CONTRIBUTEGUILDMONEY_REQ = 2321
GC_LISTCHANNEL_ACK = 20
ZC_FORCEDIRECTION_NTF = 90
ZC_DIALOGCUSTOMMESSAGE_NTF = 426
IZ_DATACALL_NTF = 140
ZC_VENDITEMBUY_ACK = 1183
CZ_UNFOLDITEMPACKET_REQ = 609
CV_HDBSCANDATAEND_NTF = 1580
MH_ITEMPACKETBARINSERT_NTF = 774
EE_MT_GMCOMMANDINFOSBEGIN_NTF = 421
TM_LOADCHARAVATAR_NTF = 1380
TM_LOADCHARSTOCKDATA_ACK = 931
ZC_STACKITEM_ACK = 152
BM_SERVERIDINFO_NTF = 2156
MZ_USERBANEFITCONTROL_NTF = 2196
SC_WEIBO_QUERYMONEYBODY_NTF = 1847
MS_WEIBO_LISTOFFLINEFOLLOWINGFEEDSSERVICEAGENT_NTF = 2233
CZ_QUERYCANCONTRIBUTEGUILITEM_REQ = 1986
CS_PRODUCEBYBLUEPRINT_REQ = 2043
MZ_CHANNELPLAYERSCHANGED_NTF = 1331
DE_UPLOADFILE_REQ = 956
LM_CLEARHISTORYCONTEXT_NTF = 2095
MH_CREATECHAR_NTF = 1597
MH_STOCKACCOUNTUPDATE_NTF = 871
MH_SERVERCHARCOUNT_NTF = 1366
SG_CHECKSTRINGFORBID_ACK = 1106
MZ_UPDATELORDWARTIME_NTF = 1332
SM_GUILDLEVELUPDATE_NTF = 2360
SC_SCENECHARCORE_ACK = 767
MZ_CONTRIBUTEGUILDMONEY_ACK = 2311
SC_WEIBO_ADDGUILDQUEST_ACK = 764
ZC_ROLEKILLPUNISHCLEAR_NTF = 108
CG_DOWNLOADDICT_NTF = 1153
DM_MODIFYCHARSKILL_REQ = 1851
CZ_CONTRIBUTEGUILDITEM_REQ = 1973
SC_WEIBO_INFORM_NTF = 1842
MZ_PETLOADINGINFO_NTF = 1197
ZC_AMITYGROUPUPDATE_NTF = 2289
CZ_GUESSVENDEXECUTE_REQ = 1649
ZC_ITEMTRADEERROR_NTF = 745
CS_RSYNCFRIEND_REQ = 689
ZC_MAPROLEBRIEFINFO_NTF = 54
DE_DAEMONPATCH_REQ = 479
ZC_QUESTFAILED_NTF = 1432
ZI_DATACALL_NTF = 139
ZC_PRODUCESTART_NTF = 2037
ZD_ADJUSTGLOBALRECLAIMITEMSTOCKRECOVERPROBONENHANCECONSUMED_ACK = 2252
GV_CLIENTLINKVERIFIER_REQ = 1500
ZM_GLOBALRECLAIM_ITEMSTOCKRECOVERPROBONPRODUCECONSUMEDUPDATE_NTF = 2245
AD_INSERTSYSTEMNOTICE_ACK = 1672
ZC_MAPSCOPEAREAOUTSIGHT_NTF = 735
MZ_SENDCOMMODITY_REQ = 1802
ZC_LOADBUYBACKITEMLIST_ACK = 1005
ZM_ITEMDROPNOLIMIT_NTF = 1643
MH_ROLEREGIONHISTORYCONTEXT_NTF = 1943
ZI_SETAIOWNERCUSTOMDATA_NTF = 2147
ZN_ZONESTART_NTF = 1190
ZM_AIROLEJOINREPETITION_REQ = 571
ZI_SUMMONERHANDLE_NTF = 820
MC_QUERYSHOPPINGBILLLOG_ACK = 2083
MZ_GENSHOPPINGBILL_ACK = 1801
CS_QUERYGUILDWARCONDITION_REQ = 1182
LR_QUEUECHARCOUNT_NTF = 1848
CS_REGGUILDWAR_REQ = 1242
SC_WEIBO_LISTAGGREGATIONFEED_ACK = 1825
ZC_VENDINFO_NTF = 1174
MS_WEIBO_ACCEPTQUESTFINAL_NTF = 2080
MZ_BELONGTEAMCHANGED_NTF = 281
MR_ITEMDROPFORCHAR_NTF = 1644
ED_UPLOADCPSFILEDATAACK_NTF = 1687
ZC_OPENDIALOG_NTF = 389
MH_CRAFTHISTORYCONTEXT_NTF = 1661
ED_ACCESSTOKENLOGIN_ACK = 854
SM_WEIBO_ACCEPTSYSTEMQUESTFINAL_NTF = 2341
MT_LOADGLOBALMUTEINFO_REQ = 1864
CS_WEIBO_ADDBLACK_REQ = 1760
CS_TEAMCHAT_REQ = 244
MR_ITEMDROPNOLIMIT_NTF = 1645
MD_QUERYUSERMONEYINFO_ACK = 1531
ED_LISTSCCTS_ACK = 1550
MT_LOADPROTECTORINFO_REQ = 1383
MH_ITEMPACKETSLOTINSERT_NTF = 411
DE_AUTHORITYROLELOGOUT_REQ = 855
MD_QUERYCHARINFOBYUSERNAME_ACK = 1503
DX_NEWHOTFIX_REQ = 418
MZ_LOADPRESENTMONEYINFO_NTF = 1477
ZM_ACCEPTQUEST_NTF = 298
ZC_ANCESTORSUMMONERUPDATEBEGIN_BRD = 2290
MC_QUERYGUILITEMLOG_NTF = 1979
MZ_LOADPRESENTINFO_NTF = 1040
GC_PAYURLINFOUPDATE_NTF = 2168
GM_CHARLOGIN_NTF = 19
CZ_RESETACTIVEDFIXZHAOOFSKILL_REQ = 442
SC_GUILDYYUPDATE_NTF = 2275
SC_INSERTGUILDMEMBER_NTF = 542
ZE_GMCOMMANDONOFFLINECATEGORYINFOS_NTF = 1427
CV_LOADHDBRESULT_NTF = 1542
ED_RELOADAPPLYPATCHPUBLISHSCC_ACK = 1703
MH_BANOBJECTHISTORY_NTF = 2102
CS_QUERYGUILDMONEY_REQ = 1740
ZC_CHANGEAMICABILITYPATTERN_ACK = 2335
EE_DAEMONPATCHDATAEND_NTF = 474
CZ_BACKDOORCOMMAND_NTF = 1330
ZI_SCENECHARACTERSOCIAL_ACK = 753
MZ_PETDATA_NTF = 574
MZ_FROZENQUESTLIST_NTF = 1739
ED_DESTROYAUTHORITYGROUP_ACK = 831
ZC_COMPETITIONAREAOUTSIGHT_NTF = 726
MD_COLLECTPLAYERMACHINEINFO_ACK = 1717
DE_ENUMDIRECTORY_REQ = 1675
MZ_BASEEXPRATE_NTF = 1682
MT_LOADAIROLEUNITACTUALITY_REQ = 1418
LC_QUERYCREATECHAROPERATION_ACK = 374
MR_CHARLOGIN_NTF = 1731
MS_GUILDWARATTACKER_NTF = 1245
GZ_JOINREPETITION_REQ = 587
SC_WEIBO_LISTCOMMENTBODY_NTF = 1836
ZM_STOREMONEY_NTF = 913
GO_COMPRESSDATASIZE_NTF = 1196
ZM_CREATEGUILD_ACK = 513
MZ_QUESTLIMIT_NTF = 1737
EE_RELOADCPSRESULT_NTF = 1697
SH_WEIBO_SYSTEMQUESTINSERT_HISTORY_NTF = 2338
MZ_LORDWARPREPARED_NTF = 1324
MI_CHANNELINFO_NTF = 352
SC_GETGUILDWARJOINER_NTF = 1259
CZ_LOADCOMMODITYCUSTOMINFO_REQ = 456
MT_LOADROLEAVATAR_NTF = 1381
ED_CHANGEAUTHORITYROLEPASSWORD_ACK = 488
ZC_RECORDRECIPESTATUS_NTF = 1967
DX_GETHOTFIXINFO_REQ = 1301
ZC_QUERYCRAFTUPDATECOST_ACK = 2026
SC_LOADFRIENDSINFO_ACK = 731
CZ_FLUSHSECRETCOMMODITY_REQ = 2429
ZC_AVATARSLOTUPDATE_NTF = 171
SC_GUILDNOTICEUPDATE_NTF = 2057
ZC_PRESENTITEMCOUNTUPDATE_NTF = 2123
SC_WEIBO_LISTFOLLOWER_ACK = 1755
MS_SOCIALTRANSACTFAIL_NTF = 2393
MH_GLOBALRECLAIMITEMSTOCKCOUNTUPDATE_NTF = 2238
EE_DAEMONPATCHDATABEGIN_NTF = 1054
DE_RELOADPUBLISHSCC_REQ = 512
ZC_WALKCOMPLETE_NTF = 127
CS_WEIBO_TRANSFERMONEY_REQ = 1926
SC_FRIENDLOGIN_NTF = 756
CV_CHECKICV_ACK = 1508
MD_QUERYCHARPROTECTORSTATE_ACK = 2160
SC_GUILDMEMBERLOGIN_NTF = 531
SC_QUERYGUILDQQ_ACK = 2278
MC_CHARBASEINFO_NTF = 48
CZ_QUERYCOMMODITYAGENTINFO_REQ = 1116
MG_LAGCHECK_ACK = 1017
ZM_MOVEITEM_NTF = 170
MS_SETGUILDWARHELPER_REQ = 1266
IZ_SELFKILL_REQ = 399
LC_QUERYCHARCLASS_ACK = 325
EE_TM_CREATEAUTHORITYROLE_NTF = 1019
MZ_MONEYDROPLIMIT_NTF = 1901
ZI_ASKSUMMONEEDOCOMMAND_NTF = 1066
ED_AUTHORITYROLELOGOUT_ACK = 278
ZC_MAPDROPBODY_NTF = 194
ZM_CONTRIBUTEGUILDITEM_REQ = 1970
ZM_DELETEPRESENT_NTF = 1048
MC_ACTIVEBLUEPRINT_ACK = 2025
MH_CLEARHISTORYCONTEXT_NTF = 363
ZC_QUESTCUSTOMMSG_NTF = 1721
SC_QUERYMONEYINFOFORGUILD_NTF = 2351
DE_DAEMONPATCHDATACANCEL_NTF = 1055
ZC_GLOBALRECLAIM_LISTITEM_ACK = 1996
ZM_QUERYCHARPROTECTORSTATE_ACK = 2162
SC_FRIENDLOGOUT_NTF = 757
ZC_MAPPLATFORMDRIVED_NTF = 395
ZG_JOINCHANNEL_ACK = 28
ZI_GUILDSTATUS_NTF = 2285
GS_EXPERIENCECHANGED_NTF = 1932
MH_RECIPESTATUSUPDATE_NTF = 2163
MZ_QUESTLOG_NTF = 250
SC_WEIBO_LISTUSERFEEDBODY_NTF = 1753
ZC_UPDATECHARLEVEL_BRD = 312
MH_SHOPPINGLISTINSERT_NTF = 2122
DX_UNZIP_REQ = 1289
GA_USERLINKASSISTANT_REQ = 2220
GC_VALIDATE_ACK = 781
SM_PRODUCEBYBLUEPRINT_REQ = 2046
MT_LOADSUMMONEES_NTF = 1414
ZM_LORDWAREND_NTF = 1323
CZ_UPDATESHOPPINGLIST_REQ = 1800
EE_UPLOADCPSFILEDATA_NTF = 1691
SC_TEAMPETITIONCONFIRM_NTF = 1359
ZM_ITEMDATAHFUPDATE_NTF = 1886
CZ_STARTTRADEWITHPLAYER_REQ = 653
SM_TWOROLEHISTORYCONTEXT_NTF = 1613
EE_TM_CHANGEAUTHORITYROLEGROUPS_NTF = 1033
ZG_ORIGINATEJOINCHANNEL_NTF = 130
DE_PUBLISHSCC_REQ = 511
CZ_CONTRIBUTEGUILDMONEY_REQ = 2316
ZC_LOADSHOPVERSION_ACK = 455
MH_GUILDALLIANCEDELETE_NTF = 1605
MQ_QUERYCHARSKILLDESC_REQ = 1911
SC_TEAMLEADERCHANGED_NTF = 225
ZM_GMQUERYROLEZONEINFO_REQ = 1403
ZC_REMOVEPRESENTITEM_ACK = 1522
ZI_SCENENONPLAYERCOREBODY_NTF = 2298
ZM_AMICABILITYPATTERN_NTF = 2332
MZ_NEWCOMMODITYAGENTINFO_NTF = 1124
DE_UPLOADCPSFILEBEGIN_NTF = 1685
CZ_MODIFYPROTECTTIME_REQ = 636
ZM_ROLEREGISTRYDATAUPDATE_NTF = 332
MH_GMUNFREEZEQUEST_NTF = 2287
ZM_DESTROYSUMMONEE_NTF = 405
GL_LOGIN_REQ = 14
CA_UPDATEACCOUNTCLIENTCUSTOMDATA_REQ = 1143
MC_QUERYGUILDFUNDLOG_ACK = 2103
CS_TEAMPETITIONCONFIRM_REQ = 230
ZC_BUYBACKITEM_ACK = 985
MD_QUERYUSERINFOBYNICKNAME_ACK = 1530
MZ_GMFORCECHARLOCATION_REQ = 1638
MC_LOADPRESENTMONEYINFO_NTF = 1478
ED_CREATEAUTHORITYGROUP_ACK = 862
MD_ADMINREALTIMEMONITOR_ADMINSTOPMONITORROLE_ACK = 2131
CS_FINISHGUILDQUEST_REQ = 2378
ZC_BUYCOMMODITY_ACK = 446
MT_LOADPETEXTRAINFO_ITEMPACKETSYSTEM_REQ = 1370
ED_ZSTART_NTF = 880
EE_DAEMONPATCHDATACANCEL_NTF = 1057
MZ_ACCOUNTMONEYADD_NTF = 927
CG_COLLECTMACHINEINFO_NTF = 1594
ED_CHANGEMCUSTOMNAME_NTF = 1205
ZC_CANCELWALK_ACK = 43
MD_ADMINREALTIMEMONITOR_ROLEEVENT_NTF = 2182
ED_EVENTLOG_NTF = 491
CZ_GMQUERYROLEZONEINFO_REQ = 1413
EE_MC_INITINFO_NTF = 834
MG_COMPRESSCENTERINFO_NTF = 1157
MZ_JOINREPETITION_ACK = 566
AD_LOADSYSTEMNOTICE_ACK = 1667
CZ_VENDITEMBUY_REQ = 1179
RM_REPORTSTART_NTF = 1722
MC_QUERYGUILDMONEYLOG_NTF = 2322
CS_QUERYGUILDONLINEMEMBER_REQ = 553
GC_COLLECTMACHINEINFO_NTF = 1595
TM_LOADTOTALGAMETIME_NTF = 889
ZC_FIXSKILLSUPDATE_NTF = 439
VC_SCANHDB_REQ = 1589
ZC_FINISHTRADE_NTF = 676
ZC_MAPPLATFORMBRIEF_NTF = 391
ZC_ITEMPACKETSLOTUPDATE_NTF = 607
MZ_UNFROZENQUESTLIST_NTF = 1733
ED_ADDSCCT_BRD = 1563
ED_DOWNLOADFILE_ACK = 883
ZC_MAPPLATFORMROLEBINDED_NTF = 1185
ZD_QUERYCHANNELITEMDROPRATE_ACK = 2069
GM_LAGCHECK_REQ = 1006
ZC_STATTEAMMEMBER_ACK = 1704
MD_MODIFYCHARZHAO_ACK = 1861
LC_GETCHARLIST_ACK = 35
EE_MT_START_NTF = 1024
SC_QUITTEAM_ACK = 256
MG_CHANNELPLAYERSCHANGED_NTF = 4
MS_FINISHGUILDQUEST_ACK = 2379
MC_QUERYGUILDMONEYLOG_ACK = 2319
MZ_QUESTCUSTOMDATAINFO_NTF = 1673
MH_CHAREXPCHANGE_NTF = 364
CZ_CANCELWALKFROMINDEX_REQ = 79
ED_REMOVEEVENTLOG_NTF = 496
ML_QUERYLOGINDBSYNCVERSION_REQ = 925
ZM_SKILLUPDATED_NTF = 433
ED_NOTENOUGHAUTHORITY_NTF = 1618
ED_QUERYSCCTCONTENT_NTF = 1571
GM_SETINDULGESTATE_NTF = 1352
MD_GETNOSALELIST_ACK = 1084
ND_QUERYGLOBALNPCCOREINFO_ACK = 766
CS_LOADCHARACTERCOREINFO_REQ = 720
ML_CHARLOGIN_NTF = 768
MD_QUERYBANINFO_ACK = 1515
SC_GUILDFUNDLOG_NTF = 2053
DE_CREATEAUTHORITYROLE_REQ = 840
AC_UPDATEACCOUNTCLIENTCUSTOMDATA_ACK = 1142
CZ_LOADCOMMODITYINFO_REQ = 460
MZ_ADMINREALTIMEMONITOR_STOPMONITOR_NTF = 2126
ZN_REPETITIONOPEN_NTF = 1187
CZ_DEADREVIVE_REQ = 1161
MZ_OBJECTATRRIBUTECARRYINGZHAOS_NTF = 428
ZC_BUYSTOCK_ACK = 916
EE_CM_START_NTF = 943
DE_ACCESSTOKEN_REQ = 832
MC_CANCELSHOPPINGBILL_ACK = 1809
ZC_UPDATEMONEYINFO_NTF = 413
ED_GMCOMMANDFORDAEMONINFOSEND_NTF = 953
QM_QUERYUSERLASTLOGININFO_ACK = 1574
IZ_SETDEPLOYADJUSTACTION_NTF = 245
MH_QUESTDATAUPDATE_NTF = 210
ZC_NEWCOMMODITYAGENTINFO_NTF = 1120
ZC_QUERYPETINFO_ACK = 575
ZM_GLOBALRECLAIM_ITEMSTOCKRECOVERPROBONENHANCECONSUMEDUPDATE_NTF = 2242
TM_LOADSHOPPINGBILL_NTF = 1804
MI_CREATEAIROLE_REQ = 99
ZM_SETGUILDWARHELPER_REQ = 1267
ZC_STATEREMOVED_BRD = 115
XD_GETPREACTIVEDINFO_ACK = 1283
ZC_CHANGEPETNICKNAME_ACK = 744
MQ_QUERYOBJECTBANINFO_REQ = 1581
EE_DAEMONPATCHDATA_NTF = 1059
MH_ACCEPTSNSQUESTHISTORYCONTEXT_NTF = 2112
ZM_ITEMENHANCEHISTORY_NTF = 2133
ZC_SETGUILDWARHELPER_ACK = 1268
SC_LOADCHARACTERCOREINFO_ACK = 722
SC_LOADCHARACTERSTATUSINFO_ACK = 2193
MZ_GLOBALRECLAIM_STOCKUPDATEONCONSUMEDDISABLELEFTTIME_NTF = 2237
SC_WEIBO_LISTBLACK_ACK = 1827
ZC_DIRECTPATCHVERSION_NTF = 1757
CZ_SETFINISHPARAM_NTF = 1229
ED_T_GMCOMMANDCATEGORYINFOSBEGIN_NTF = 1437
CM_GETSTOCKTAXRATE_REQ = 1091
SC_TEAMINVITECONFIRM_NTF = 1360
ZE_GMCOMMANDINFOS_NTF = 379
MS_LOADGUILDDATA_NTF = 555
MZ_OBJECTATRRIBUTEBEGIN_NTF = 430
ED_LOCKSCC_ACK = 886
CS_CHANGEMEMBERGRADATION_REQ = 792
SM_SNSQUESTEXPIRED_NTF = 2267
CZ_ENHANCEITEM_REQ = 826
XC_LOADPATCH_ACK = 1748
ZM_UPDATEFORCELOGINLOCATION_NTF = 1327
MZ_DELETEGMCOMMODITY_NTF = 481
ZC_LOCKTRADE_ACK = 661
ZC_VENDITEMLISTUPDATE_NTF = 1223
DX_ACTIVE_REQ = 1285
ZC_SETAVATAROPTIONS_ACK = 277
CZ_GETVENDERLIST_REQ = 1240
ZE_GMCOMMANDINFOSBEGIN_NTF = 381
ZM_CREATESUMMONEE_NTF = 957
LC_BANINFO_NTF = 600
IZ_CUSTOMMESSAGE_NTF = 177
RM_CHATREPORTCOUNT_NTF = 1963
ZC_GMQUERYROLELOCATION_ACK = 1407
ZM_NEWCOMMODITYAGENTDATA_NTF = 1115
ZM_PETACTIVITYSTATUSUPDATE_NTF = 812
ZM_ADJUSTPETINDEX_NTF = 617
ZM_DANYAOSLOTUPDATE_NTF = 2418
ZM_MOVEITEMWITHDATA_NTF = 1998
DM_GLOBALMUTE_REQ = 1866
SC_WEIBO_ADDCOMMENT_ACK = 1766
ZC_PETLIFETIMEUPDATE_NTF = 770
CS_WEIBO_DELCOMMENT_REQ = 1818
ZC_FIXINDEXPLATFORMLINK_NTF = 814
DL_BANOBJECT_REQ = 1592
MS_GUILDWARTIME_NTF = 1333
GZ_GATESTART_NTF = 11
MZ_TEAMMEMBERQUITTED_NTF = 261
ZM_AIROLELOGOUT_NTF = 77
GC_CHARLOGINLIMITCHANGED_NTF = 1328
ZC_ENHANCEITEM_ACK = 827
ZC_ROLESPECDEPLOYTAG_BRD = 2206
CZ_QUERYPOCKETSHOPID_REQ = 1925
MH_DELETECHAR_NTF = 1596
QM_QUERYCHARITEMINFO_ACK = 1938
ED_QUERYSCCT_ACK = 1556
MB_REGENSHOPPINGBILL_REQ = 1875
SC_SCENECHARACTERSOCIALBODY_NTF = 752
ZM_AIROLEJOINCHANNEL_REQ = 81
OG_STOPGENDICT_NTF = 1235
OG_STARTGENDICT_NTF = 1236
GS_CHARLINKSOCIAL_REQ = 219
CZ_CHAREXPTOITEM_REQ = 2381
CS_WEIBO_LISTINFORMWITHTYPE_REQ = 1833
ZC_CONTRIBUTEGUILDITEM_ACK = 1971
ZC_DROPONMAP_ACK = 186
CS_QUERYGUILDNOTICE_REQ = 2054
MZ_LOADSECRETCOMMODITY_NTF = 2421
ZM_STRINGTABLEIDMESSAGETOMAP_NTF = 2179
ZC_GETVENDERLIST_ACK = 1241
SC_CANCELGUILDWARJOINER_ACK = 1263
DN_CLOSEGLOBALNPC_REQ = 1218
ZM_UPDATECOMMODITYSELLSHOPVERSION_NTF = 973
DE_DELETESCCT_REQ = 1568
LM_UNBANOBJECTHISTORY_NTF = 2101
TM_LOADQUESTPERIODSRECORDS_NTF = 2408
SM_WEIBO_ACCEPTQUEST_REQ = 1878
ZN_REPETITIONCLOSE_NTF = 1204
DE_STARTS_REQ = 711
ZC_BASICATTRIBCHANGED_NTF = 117
MG_CHANNELOPEN_NTF = 350
CS_WEIBO_LISTQUESTACCEPTOR_REQ = 2270
ZC_UNLOCKTRADE_ACK = 654
CZ_CANCELQUEST_REQ = 303
MZ_AVATARSLOTDATA_NTF = 157
CZ_MAPDROP_REQ = 185
ZI_SCENENONPLAYERROLESOCIAL_ACK = 2300
ED_T_STRINGTABLEEND_NTF = 1441
ED_ENUMDIRECTORY_ACK = 1677
MC_QUERYGUILITEMLOG_ACK = 1978
SC_REMOVEFRIEND_ACK = 684
ZI_SCENECHARCOREBODY_NTF = 2301
ZC_GETAVATARSLOTDATA_ACK = 163
SC_CHANGETEAMLEADER_ACK = 260
ZC_OBJECTDESTROYED_BRD = 123
SC_PRIVATECHAT_NTF = 93
GC_FORBIDDENSTRING_NTF = 1111
MH_UNBANOBJECTHISTORY_NTF = 2100
ED_GMCOMMANDONOFFLINECATEGORYINFOS_NTF = 1426
MH_CHARLOGOUT_NTF = 1751
CZ_VEND_REQ = 1184
MZ_LOADCHAREXP_NTF = 311
ZC_COMPETITIONAFFAIREND_NTF = 52
CZ_GETVENDWORD_REQ = 1227
CS_QUERYGUILDFUND_REQ = 1304
ZC_NONPLAYERFUNCTIONVERSION_NTF = 375
ZC_QUERYSUMMONEEROLEINFO_ACK = 1065
GV_TRACKVERIFIERSWITCH_NTF = 1699
ZC_GETVENDWORD_ACK = 1228
SC_WEIBO_LISTMENTIONMEFEED_ACK = 1933
ZC_AMICABILITYPATTERN_NTF = 2334
SC_QUERYGUILDTECHNOLOGY_ACK = 2006
CS_WEIBO_QUERYCOMMENTDETAIL_REQ = 1837
MR_VENDBEGIN_NTF = 1954
MI_SUMMONERLOGOUT_NTF = 318
SC_INVITECHARJOINGUILD_NTF = 534
ZC_SWAPITEMPACKET_ACK = 606
CS_QUERYALLGUILDNUM_REQ = 800
AD_DELETESYSTEMNOTICE_ACK = 1670
MZ_STATUSACTUALITYSTATELEFTTIME_NTF = 132
ZC_UPDATEPROTECTFROZENLEFTSEC_NTF = 627
MZ_ADMINREALTIMEMONITOR_ADMINSTARTMONITORGLOBAL_NTF = 2188
GC_LAGCHECKZONE_ACK = 1008
MS_GUILDWARINIT_NTF = 1308
SC_MEMBERTEAMINVITE_NTF = 705
GC_SOCIALDISCONNECTED_NTF = 251
ZC_ANSWERTRADEWITHPLAYER_NTF = 662
MZ_UNLINKTEAM_NTF = 234
ZC_GMQUERYROLEZONEINFO_ACK = 1404
ZC_FIXZHAOSUPDATE_NTF = 438
ZM_CHECKRULEUPDATEZONE_REQ = 988
ED_QUERYSERVERLOGCONTENT_NTF = 1657
SC_WEIBO_QUERYUSERINFOBODY_NTF = 1772
TM_LOADPETEXTRAINFO_ITEMPACKETSYSTEMDATA_NTF = 1372
ED_ENUMDIRECTORYDATAEND_NTF = 1678
GL_USERLOGOUT_NTF = 16
ED_MSTART_NTF = 1028
MS_CHARLOADGUILD_ACK = 527
GS_CHECKSTRINGFORBID_REQ = 1107
CS_SCENECHARCORE_REQ = 760
ZM_FORCEREMOVESTATE_ACK = 1897
CS_ADDENEMY_REQ = 692
SC_QUERYCACHEDCHARACTERCOREINFO_ACK = 372
ZC_TAKEPRESENTMONEY_ACK = 1471
DM_QUERYUSERINFOBYCHARID_REQ = 1529
ZM_RELEASESNSQUESTHISTORYCONTEXT_NTF = 2114
ZC_CHANNELSTARTCLOSE_NTF = 2404
MH_QUESTLOGUPDATE_NTF = 2218
MZ_UPDATEGMPROTECTORSTATE_NTF = 630
CV_HDBSCANDATABODY_NTF = 1578
EE_UPLOADCPSFILEEND_NTF = 1692
ZC_MAPDEPLOYTOSUMMONEE_BRD = 857
ED_UPLOADFILE_ACK = 952
ZC_GETPROTECTORINFO_ACK = 631
ZM_COMMODITYAGENTDATEUPDATE_NTF = 1123
CS_WEIBO_DELETEFEED_REQ = 2330
MR_UNITLIVELONGTIME_NTF = 1953
MH_QUESTOWNERINSERT_NTF = 2210
MH_PAYLISTDELETE_NTF = 2120
AC_NOTICEUPDATE_NTF = 879
TM_LOADCHARDATAERROR_NTF = 905
ZC_APPENDWALK_ACK = 42
SC_TESTSTRINGFORBID_ACK = 1373
MD_SENDPRESENTBYGENID_ACK = 1511
CZ_REPAIRITEM_REQ = 1806
ZC_DELFROMSHOPPINGLIST_ACK = 1799
CZ_PAYFORCOMMODITYAGENT_REQ = 1117
CA_GETACCOUNTCLIENTCUSTOMDATA_REQ = 1144
MZ_CHARIPMACINFO_NTF = 2195
ZC_UNFOLDITEMPACKET_ACK = 603
CZ_FOLDITEMPACKET_REQ = 175
QM_QUERYGUILITEMLOGBYID_ACK = 1982
MS_GUILDMONEYLOG_NTF = 2313
MS_LOADGUILD_ACK = 539
ZM_CLEARHISTORYCONTEXT_NTF = 321
ZC_COMPETITIONCASTINGACTIONS_NTF = 125
ED_REMOVEEVENTLOG_ACK = 497
MH_GMFREEZEQUEST_NTF = 2288
SG_CHARLINKSOCIAL_ACK = 218
ZC_TALISMANALLELEACTIVE_ACK = 2385
CS_WEIBO_LISTNEWAGGREGATIONFEED_REQ = 2209
MH_MONEYINFOCREATE_NTF = 1136
DE_UPLOADCPSFILEEND_NTF = 1690
MZ_RESETLORDWARTIME_NTF = 558
SC_JOINEDTEAM_NTF = 229
MH_STOCKINSERT_NTF = 73
IZ_SCENECHARCORE_REQ = 2294
MC_REGENSHOPPINGBILL_ACK = 1874
ZC_TALISMANALLELESELECTRESET_ACK = 2388
ZC_GLOBALRECORDEND_NTF = 934
MC_ROLEREGISTRYDATA_ACK = 1392
ZC_RESETTRADE_NTF = 660
SC_CANCELALLYWITHGUILD_ACK = 995
SC_QUITGUILD_ACK = 545
TM_LOADVITALITYSTATUS_NTF = 2148
ZC_OBJECTSLAMMEDOVER_BRD = 70
MD_SENDPRESENTBYGENIDTOUSER_ACK = 2142
DZ_QUERYGLOBALRECLAIMITEMSTOCKRECOVERPROBONPRODUCECONSUMED_REQ = 2251
CZ_QUERYACCOUNTMONEY_REQ = 921
CZ_CHANGETRADEMONEY_REQ = 646
CZ_ACCEPTQUEST_REQ = 211
XD_PREACTIVE_ACK = 1295
SC_WEIBO_LISTFOLLOWING_ACK = 1775
DE_UPDATESCCTCONTENT_NTF = 1565
CZ_GMMOVE_REQ = 1068
ZM_CURRENTAVATARSLOTUPDATE_NTF = 357
ZM_SUMMONERLEAVESCENE_NTF = 317
MT_LOADPETS_NTF = 1346
XD_NEWHOTFIX_ACK = 417
ED_CSTOP_NTF = 895
DN_CREATEGLOBALNPC_REQ = 1224
MZ_ITEMDROPLIMIT_NTF = 1648
SC_WEIBO_ADDFORWARD_ACK = 1918
EE_MT_GMCOMMANDFORDAEMONINFOS_NTF = 1026
CZ_STATTEAMMEMBER_REQ = 1705
GA_REPORTMACHINEINFO_NTF = 1710
MR_ZONESTARTED_NTF = 1724
SM_SINGLEHISTORYCONTEXT_NTF = 1611
TM_LOADPRESENTINFO_ACK = 1050
CS_QUERYMONEYINFOFORGUILD_REQ = 2352
SC_WEIBO_LISTBLACKBODY_NTF = 1831
SC_ALLYWITHGUILD_NTF = 982
ZC_CANCELTRADEITEM_ACK = 663
CS_GUILDTECHNOLOGYBUILD_REQ = 2024
MH_ROLEDIE_NTF = 1421
MB_CHARLOGIN_NTF = 1872
SC_INVITEALLYWITHGUILD_NTF = 1013
CZ_GUESSITEM_REQ = 1617
ZM_SWAPITEM_NTF = 164
BM_REGENSHOPPINGBILL_ACK = 1876
MQ_QUERYGUILDMONEYLOGBYID_REQ = 2315
SC_GUILDFUNDUPDATE_NTF = 2094
MZ_WEIBO_ACCEPTSYSTEMQUEST_REQ = 2348
CS_CHANGEMEMBERREMARK_REQ = 796
ZC_ROLEDIALOGITEMINFO_NTF = 386
SC_CHARACTERCOREINFO_NTF = 718
ZM_DISCARDPET_NTF = 669
GC_LOGOUTCOUNTDOWNSTATUS_NTF = 1716
ZC_LEAVEDTEAM_NTF = 2259
SC_MONEYINFOFORGUILDUPDATE_NTF = 2356
SM_GUILDALLYWITHGUILD_NTF = 997
MZ_JOINCHANNEL_ACK = 23
CS_ADDMUTED_REQ = 680
SC_CHARACTERSTATUSINFO_NTF = 2192
ZC_QUERYROLEDIALOGITEMINFO_ACK = 835
CZ_COMPETITIONDICIDEACTION_REQ = 49
QM_QUERYCHARLOCATION_ACK = 1635
SC_RESPONDCHARJOINGUILD_ACK = 518
DZ_ADJUSTCHANNELRUNNINGCONFIGSTATUS_REQ = 2116
TM_LOADDANYAOINFOBODY_NTF = 2416
ZC_QUERYATTRIBUTEINFO_ACK = 824
OG_DELETEDICT_NTF = 1234
DE_CHANGEGROUPAUTHORITYBEGIN_NTF = 842
CS_QUERYALLIEDGUILDS_REQ = 989
ED_ARCHITECTUREADDED_NTF = 473
ZE_PROCESSID_NTF = 492
ML_RELOADCLIENTLOGININFO_NTF = 270
MG_CHECKTIMEDIFF_NTF = 1700
ZC_OBJECTRESTORED_BRD = 122
SC_GUILDMONEYLOG_NTF = 2312
MZ_CREATESUMMONEEROLEATTRACTEDFROMMAP_NTF = 813
ZM_ITEMPACKETSLOTUPDATE_NTF = 611
GS_CHARCUTSOCIAL_NTF = 220
CZ_DROPONMAP_REQ = 188
CS_WEIBO_CHANGEFACE_REQ = 2234
ZC_COMPETITIONAREADESTROY_NTF = 1080
XD_ACTIVE_ACK = 1284
ZM_TALISMANUNSELECT_NTF = 2383
GC_NEWHOTFIX_ACK = 1279
CS_DELETEGUILD_REQ = 547
ZC_SCENENONPLAYERCORE_ACK = 89
SH_WEIBO_SYSTEMQUESTACCEPT_HISTORY_NTF = 2342
ED_CSTART_NTF = 443
SM_LOADGUILDWARINFO_NTF = 1253
AC_NOTICESTART_NTF = 846
SC_INVITECHARJOINGUILDREFUSE_NTF = 1365
AC_LOADSYSTEMNOTICE_ACK = 877
MT_LOADDANYAOINFO_REQ = 2415
MR_ZONESTOPPED_NTF = 1726
MZ_DANYAOSLOTUPDATEEND_NTF = 2419
SC_WEIBO_QUERYCOMMENTDETAILBODY_NTF = 1839
ZC_CANCELQUEST_ACK = 484
ED_RELOADCPS_ACK = 1684
BM_PAYURLINFOUPDATE_NTF = 2167
ZM_SHOPOPEN_REQ = 458
SC_JOINGUILDWAR_ACK = 1255
DE_RUNGMCOMMANDFORDAEMON_REQ = 949
GM_GATESTART_NTF = 6
MD_QUERYCHARLOCATION_ACK = 1633
SC_WEIBO_LISTHOTUSER_ACK = 2061
ZC_VAILDATEFINISHQUEST_ACK = 353
ZD_SERVERLOGSENDINFO_NTF = 1706
EM_ADMINREALTIMEMONITOR_ADMINSTOPMONITOR_NTF = 2137
ZM_ACCEPTSNSQUESTHISTORYCONTEXT_NTF = 2115
CZ_MOVEITEM_REQ = 155
MZ_QUESTINFOEND_NTF = 296
SC_UPDATEGUILDNOTICE_ACK = 2055
ZG_STARTVALIDATE_NTF = 784
ZM_WEIBO_ADDQUEST_NTF = 1948
ZM_DEFAULTHISTORYCONTEXT_NTF = 1662
TM_LOAUSERBANEFITCONTROL_NTF = 2197
TM_LOADPETEXTRAINFOEND_NTF = 1347
ZC_SUMMONEEDESTROY_NTF = 1058
ZC_DIE_NTF = 56
MS_GUILDMONEYINC_NTF = 2305
ZC_COMPETITIONMOVEMENTCOMPLETE_BRD = 124
MD_QUERYCHANNELDESCINFO_ACK = 1641
AG_COLLECTMACHINEINFO_NTF = 1598
MZ_ACCOUNTMONEYINIT_NTF = 928
LM_QUERYLOGINDBSYNCVERSION_ACK = 1452
SC_WEIBO_LISTOUTCOMMENTBODY_NTF = 2136
RM_LOADZONE_REQ = 1723
MD_QUERYCHARINFOBYNICKNAME_ACK = 1497
MH_CRAFTSTATUSUPDATE_NTF = 1630
CS_WEIBO_LISTBLACK_REQ = 1832
ED_UPDATESCCTRESULT_NTF = 1561
ZC_RELIVE_NTF = 55
MC_TOWNCHANGED_NTF = 24
DM_STOPSHUTDOWN_REQ = 1491
ML_CREATECHAR_ACK = 206
EE_UPLOADALLCPSFILEBEGIN_NTF = 1694
ZC_GMOBSERVERITEMINFO_ACK = 2048
SC_GUILDCHAT_ACK = 970
ED_TINITINFO_NTF = 1202
CG_GETVALIDATE_REQ = 789
ZM_SETAVATAROPTIONS_NTF = 369
CZ_SELLSTOCK_REQ = 911
CZ_ASKFORCOMMODITYAGENT_REQ = 1121
ZM_COOLDOWNGROUP_NTF = 135
ED_GMCOMMANDINFOSBEGIN_NTF = 380
SM_WEIBO_ACCEPTGUILDQUESTFINAL_NTF = 2303
ZM_BUYSTOCK_REQ = 938
DM_MODIFYCHARZHAO_REQ = 1860
ZC_VARIABLEATTRIBCHANGED_BRD = 113
ZM_DELFROMSHOPPINGLIST_NTF = 1770
CS_WEIBO_LISTPLAZAFEED_REQ = 1790
EE_TM_CHANGEGROUPAUTHORITY_NTF = 1031
SM_GUILDWARHELPATTACKER_NTF = 1247
IZ_SCENENONPLAYERCORE_REQ = 2297
ZC_PLATFORMJUMPEND_NTF = 397
MH_SETHISTORYCONTEXT_NTF = 569
DM_GETNOSALELIST_REQ = 1085
QM_QUERYSHOPPINGBILLLOG_NTF = 2084
ZM_ZHAOUPDATED_NTF = 432
ZC_DANYAOSYSTEMINITEND_NTF = 2413
CZ_REMOVEVENDITEM_REQ = 1177
ZC_REPAIRITEM_ACK = 1805
SC_WEIBO_LISTQUESTACCEPTORBODY_NTF = 2268
MZ_BUYBACKITEMLIST_NTF = 1014
EE_MT_SHELLSCRIPTINFOS_NTF = 1032
DN_QUERYGLOBALNPCCOREINFO_REQ = 340
MH_ITEMPACKETSLOTUPDATE_NTF = 410
MD_FORCEREMOVESTATE_ACK = 1895
NM_GLOBALNPCSTART_NTF = 1195
TM_LOADCRAFTSTATUS_NTF = 1626
MZ_GUILDALLYWITHGUILD_NTF = 984
ZC_DESTROYPET_ACK = 570
SM_GUILDNOTICEUPDATE_NTF = 2067
SC_QUERYGUILDONLINEMEMBER_NTF = 552
MC_LOADSTOCKINFO_ACK = 918
MT_LOADPETEXTRAINFO_ROLEUNITATTRIBUTE_REQ = 1342
DE_ADDSCCT_REQ = 1553
ZM_UPDATECOREINFOVERSION_NTF = 336
MH_PAYLISTUPDATE_NTF = 2119
ZC_SETAVATAROPTIONS_NTF = 276
ZM_SUMMONEEENTERSCENEFAILED_NTF = 1192
MG_PAYSERVICESTART_BRD = 2170
CZ_GLOBALRECLAIM_BUYITEM_REQ = 2001
ZM_ACCEPTGUILDQUEST_ACK = 2364
QM_QUERYSHOPPINGBILLLOG_ACK = 2088
CZ_BUYSECRETCOMMODITY_REQ = 2427
SC_TEAMPETITION_ACK = 231
ED_UPDATESCCTNAME_ACK = 1548
ZM_ROLEDIE_NTF = 1422
ZM_CREATEITEMSYSTEM_NTF = 696
CZ_STACKITEM_REQ = 151
MT_LOADCHARUNITACTUALITY_REQ = 896
ZC_CUSTOMERROR_NTF = 836
SC_TEAMPETITION_NTF = 238
MZ_ADMINREALTIMEMONITOR_ADMINSTOPMONITORROLE_NTF = 2135
SC_GUILDWARINFO_NTF = 1339
ZI_AIROLEJOINCHANNEL_ACK = 82
MD_SHUTDOWN_ACK = 1455
ZC_SUMMONPET_ACK = 567
ED_SHUTDOWNNOTICETEMPLATEREMOVE_ACK = 1484
ZC_PRODUCEBYCRAFTRECIPE_ACK = 2035
EE_CM_DAEMONPATCHRESULT_NTF = 869
MH_QUESTLOGREMOVE_NTF = 1665
MZ_FORCEREMOVESTATE_REQ = 1894
CZ_REPLACEITEMPACKET_REQ = 168
ZC_CHARCRAFTSTATUS_NTF = 1629
ED_DISKSPACEINFO_NTF = 494
MG_ZONESTOP_NTF = 5
TM_LOADPVPINFO_NTF = 892
ZM_UPDATECRAFT_NTF = 1628
SC_GETPACKAGEINDEX_ACK = 1109
SM_GUILDFUNDDEC_NTF = 2111
MZ_GLOBALNPCSTOP_NTF = 1203
ED_SHUTDOWNNOTICETEMPLATEUPDATE_ACK = 1486
MD_QUERYCHARITEMINFO_ACK = 1930
GA_COLLECTMACHINEINFO_NTF = 1698
ZC_GLOBALRECLAIM_BUYITEM_ACK = 2000
ZC_SCREENCHAT_BRD = 95
CZ_DISCARDPET_REQ = 670
SM_UPDATEGUILDTECHNOLOGY_NTF = 2023
CS_TEAMINVITE_REQ = 204
CM_CANCELSTOCK_REQ = 908
AC_LOADNOTICEBRIEF_ACK = 876
TM_LOADTALISMANSELECTION_NTF = 2384
EE_MT_GMCOMMANDFORDAEMONINFOSEND_NTF = 424
SC_UPDATEGUILDQQ_ACK = 2277
CZ_VAILDATEFINISHQUEST_REQ = 306
CS_CANCELALLYWITHGUILD_REQ = 965
DE_RELOADAPPLYPATCHPUBLISHSCC_REQ = 1702
SM_SETHISTORYCONTEXT_NTF = 1610
SC_SCENECHARACTERSOCIAL_ACK = 749
CS_WEIBO_ADDFOLLOWING_REQ = 1754
EE_STARTS_NTF = 59
CZ_QUERYSECRETCOMMODITY_REQ = 2423
DE_STOPS_REQ = 708
MT_STARTLOADCHARDATA_NTF = 891
TM_LOADSUMMONEEEXTRAINFOEND_NTF = 1411
MH_COMPETITIONHISTORYCONTEXT_NTF = 289
ZM_GMREMOVECHARSTATEHISTORY_NTF = 2040
MB_GENSHOPPINGBILL_REQ = 1816
CG_LISTCHANNEL_REQ = 29
ZC_COMPETITIONCASTINGOUTSIGHT_NTF = 694
XD_PREACTIVE_NTF = 1297
QM_QUERYOBJECTBANINFO_ACK = 1546
ZC_QUERYCOMMODITYAGENTINFO_NTF = 1118
SM_CHARACTERSOCIALINFOUPDATE_NTF = 285
CZ_REMOVEPRESENTMONEY_REQ = 1480
XD_UNZIP_NTF = 1286
TM_LOADCHARSKILLPRACTICE_NTF = 1374
MQ_CHECKLOGINDBSYNCVERSION_NTF = 1453
CZ_APPENDWALK_REQ = 39
SC_KICKMEMBER_ACK = 265
CZ_CHANGEPETNICKNAME_REQ = 742
MT_LOADCHARUNITATTRIBUTE_REQ = 904
TM_LOADLOCATION_NTF = 901
ED_T_STRINGTABLEBEGIN_NTF = 1443
ZI_SUMMONERDIE_NTF = 401
CZ_GETAVATARSLOTDATA_REQ = 355
ZM_CANCELQUEST_NTF = 299
CS_INVITEFRIENDBYNICKNAME_REQ = 728
ZM_SWAPITEMWITHDATA_NTF = 1999
ZC_QUESTINFOEND_NTF = 328
MZ_FORCEADDSTATE_REQ = 1893
MZ_MODIFYCHARLEVEL_NTF = 1852
ZM_VARIABLEATTRIBUTE_NTF = 138
CS_INVITEFRIEND_REQ = 701
CZ_BUYBACKITEM_REQ = 890
CZ_GETPROTECTORINFO_REQ = 638
MC_INSERTPRESENTMONEY_NTF = 1470
ZC_POSE_ACK = 142
SC_WEIBO_ACCEPTQUEST_ACK = 1883
MT_LOADSUMMONEEEXTRAINFO_ROLEUNITATTRIBUTE_REQ = 1406
CZ_QUERYCRAFTUPDATECOST_REQ = 2029
ZC_FORCELOCATION_NTF = 66
GV_USERLOGINSTATUS_NTF = 1499
CM_REGENSHOPPINGBILL_REQ = 1873
MD_MODIFYCHARLEVEL_ACK = 1853
CZ_SUMMONPET_REQ = 563
ZC_LOADCHAREXP_ACK = 314
ZC_ACCEPTQUEST_ACK = 287
ZC_MAPDROPUPDATE_NTF = 167
ZC_STRINGTABLEIDMESSAGE_NTF = 1356
SC_MEMBERTEAMINVITE_ACK = 703
ED_ENUMDIRECTORYDATA_NTF = 1676
VC_CHECKRAC_REQ = 1587
ZC_QUERYCANCONTRIBUTEGUILITEM_NTF = 1985
MZ_TEAMMEMBERJOINED_NTF = 258
ZM_UNFOLDITEMPACKET_NTF = 165
CZ_FETCHCOMMODITYAGENT_REQ = 1126
CM_ACTIVEBLUEPRINT_REQ = 2011
XD_GETHOTFIXINFO_ACK = 1300
SC_CANCELALLYWITHGUILD_NTF = 1015
MT_LOADPRESENTINFO_REQ = 1052
MQ_QUERYUSERLASTLOGININFO_REQ = 1572
ZC_ENTERMAP_NTF = 1072
MH_CHARLEVELCHANGE_NTF = 365
MZ_QUERYCHARSTATEDESC_REQ = 1916
ZG_STRINGTABLEIDMESSAGETOCHAR_NTF = 1363
ED_DOWNLOADFILEDATA_NTF = 860
CS_UPDATEGUILDQQ_REQ = 2274
ZC_LOADCHARCRAFTSTATUS_ACK = 1623
QM_QUERYGUILDMONEYLOGBYID_ACK = 2314
DE_CHANGECRASHSHELLSCRIPT_REQ = 1620
CZ_PRODUCEBYCRAFTRECIPE_REQ = 2036
MT_STARTLOADAIROLEDATA_NTF = 1417
VC_CHECKICV_REQ = 1507
XG_HOTFIXFILELIST_NTF = 1277
DM_QUERYCHARINFOBYUSERID_REQ = 1504
DM_DELETEGMCOMMODITY_REQ = 1101
SM_GUILDFUNDINC_NTF = 556
ZC_ASKFORTRADEWITHPLAYER_NTF = 652
SM_TEAMMEMBERJOINED_NTF = 237
ZC_LEAVESIGHT_NTF = 126
SC_GUILDAPPLICATION_ACK = 776
ZM_UPDATEQUESTPERIODSINFO_NTF = 2410
TM_LOADSUMMONEESEND_NTF = 1400
ZC_RESETACTIVEDFIXZHAOOFSKILL_ACK = 440
MZ_TIESUMMONEE_NTF = 961
MZ_CHARVITALITYSTATUS_NTF = 2154
ED_ENBALEAUTORESTARTS_BRD = 1194
MZ_GLOBALUNMUTE_NTF = 1870
MC_LOADPRESENTINFO_NTF = 1047
MS_WEIBO_TRANSFERMONEYFINAL_NTF = 2079
CZ_QUERYSUMMONEEROLEINFO_REQ = 741
SC_WEIBO_DELFOLLOWING_ACK = 1787
MZ_UPDATEQUESTHOLDERCOUNT_NTF = 1764
GC_LAGCHECKSOCIAL_ACK = 976
TM_LOADCHARUNITATTRIBUTE_ACK = 897
MG_ADJUSTCHANNELMAXPLAYERS_NTF = 1064
TM_LOADCHARMONEYINFO_ACK = 893
XG_NEWHOTFIX_ACK = 1278
SM_DECGUILDITEMCOUNT_NTF = 1988
MR_CHARENTERMAP_NTF = 1936
SC_QUERYTEAM_ACK = 724
ZM_CHANNELSTART_NTF = 348
ED_QUERYSCCTXSDDATA_NTF = 1585
MC_QUERYSHOPPINGBILLLOG_NTF = 2085
CL_SELECTCHAR_REQ = 33
DZ_RUNGMCOMMAND_REQ = 279
ZC_ADDTOSHOPPINGLIST_ACK = 1769
ZC_DOLEVELUP_ACK = 2347
SC_SHITLISTTOTALMD5_NTF = 1314
ZC_QUESTLOG_NTF = 253
MH_VITALITYSTATUSUPDATE_NTF = 2164
CZ_DESTROYPET_REQ = 572
CS_QUERYTECHNOLOGYBUILDDATA_REQ = 2019
MZ_CHARBASEINFO_NTF = 47
ZC_LOADPETSEND_NTF = 601
MZ_DELETEHELPER_NTF = 1321
ZC_WALKFAILED_NTF = 44
ZN_GLOBALNPCCLOSE_NTF = 1201
SC_WEIBO_LISTSYSTEMFEEDBODY_NTF = 2343
GC_DICTOPENSTATE_NTF = 1431
ZC_DANYAOSLOTUPDATE_NTF = 2412
ZC_PLATFORMJUMP_NTF = 392
CS_WEIBO_QUERYUSERINFO_REQ = 1758
ZM_MOVEITEMPACKET_NTF = 608
EE_TM_CHANGEGROUPAUTHORITYEND_NTF = 425
GO_PARSEDATA_NTF = 1152
CS_QUERYBLUEPRINT_REQ = 2021
CS_QUERYGUILDMEMBER_REQ = 554
SC_REMOVEGUILDMEMBER_NTF = 540
SC_WEIBO_LISTAGGREGATIONFEEDBODY_NTF = 1768
EE_MS_CONFIGBODYBEGIN_NTF = 502
ZC_MONSTERCONQUESTOWNERINFO_NTF = 38
ZC_GMMOVE_ACK = 1070
CS_ANSWERALLYWITHGUILD_REQ = 1004
MZ_ADDDEFHELPER_NTF = 1319
SC_LOADFRIENDSINFO_NTF = 732
MQ_QUERYSHOPPINGBILLLOG_REQ = 2089
MZ_LOADCOREINFOVERSION_NTF = 335
ZG_JOINREPETITION_ACK = 568
ZM_UPDATEQUESTCUSTOMDATAINFO_NTF = 1674
ZC_PAYFORCOMMODITYAGENT_ACK = 1114
LM_CREATECHAR_REQ = 72
CS_WEIBO_ACCEPTQUEST_REQ = 1885
MZ_COMMODITYONSALE_NTF = 867
GV_CLIENTCUTVERIFIER_NTF = 1498
MZ_MODIFYCHARZHAO_REQ = 1850
QM_QUERYUSERMONEYINFO_ACK = 1527
GX_GATESTART_NTF = 1303
CZ_QUERYPETINFO_REQ = 758
BM_NEWUSERPAY_NTF = 1807
MZ_LOADSHOPPINGLIST_NTF = 1792
TM_LOADCHARGUILDID_NTF = 514
LD_UNBANOBJECT_ACK = 1590
MS_LOADGUILDITEM_NTF = 1989
CS_TEAMINVITECONFIRM_REQ = 241
CS_REGIONCHAT_REQ = 1180
ZM_INSERTRECIPE_NTF = 1968
ZC_LOADCOMMODITYINFO_ACK = 459
CS_QUERYIDBYNICKNAME_REQ = 371
MZ_ALLITEMDATABODY_NTF = 174
MC_ROLEREGISTRYDATAACKBODYEND_NTF = 1394
ZC_SWAPITEM_NTF = 292
ZI_SUMMONERRELIVE_NTF = 402
CM_QUERYGUILDMONEYLOGBYID_REQ = 2318
BM_PAYSERVICESTART_BRD = 2171
ZC_MODIFYPASSWORD_ACK = 623
DM_QUERYCHARPROTECTORSTATE_REQ = 2159
ZC_SECRETCOMMODITYUPDATE_NTF = 2431
AC_REMOVECLIENTCUSTOMSDATA_ACK = 719
EE_TM_DESTROYAUTHORITYROLE_NTF = 1023
DE_UPLOADFILEDATAEND_NTF = 888
SM_CANCELGUILDWARHELPER_NTF = 1256
ZC_TOUCHMAPSCOPEAREA_ACK = 1429
SC_QUERYIDBYNICKNAME_ACK = 373
ZM_ROLEREGIONHISTORYCONTEXT_NTF = 1942
SG_STRINGTABLEIDMESSAGETOCHAR_NTF = 2180
CZ_UPDATECRAFT_REQ = 2028
CZ_GMCHANGECHANNEL_REQ = 1401
DE_UPDATESCCTNAME_REQ = 1564
MZ_LOADCOMMODITYAGENTINFO_NTF = 1122
ZC_MAPDROP_ACK = 187
MZ_UPDATECOMMODITYSELLSHOPVERSION_NTF = 1003
CZ_QUERYCHARINFO_REQ = 316
MZ_TIEPET_NTF = 964
CZ_TOUCHMAPSCOPEAREA_REQ = 1430
CG_REPORTMACHINEINFO_NTF = 1711
SC_WEIBO_TRANSFERMONEY_ACK = 1929
EE_MS_VARSBODYBEGIN_NTF = 2262
MH_GUILDITEMUPDATE_NTF = 2256
GC_LAGCHECKMANAGER_ACK = 1000
SC_INVITEFRIEND_ACK = 699
CZ_MAPSIGNAL_NTF = 2181
CL_CREATECHAR_REQ = 370
SE_RELOADSHITLIST_NTF = 293
SC_QUERYBLUEPRINT_ACK = 2007
ZC_UPDATECHARLEVEL_NTF = 309
DM_QUERYONLINECHARINFO_REQ = 1510
ZC_MAPDROPSN_NTF = 207
CM_ROLEREGISTRYDATA_REQ = 1396
ZM_FETCHMONEY_NTF = 929
ZM_MONEYDROPNOLIMIT_NTF = 1902
CZ_SCENENONPLAYERCORE_REQ = 330
ZC_APPENDPLATFORMJUMP_ACK = 394
ND_LISTGLOBALNPC_ACK = 1216
MZ_CHARACTERSOCIALINFOUPDATE_NTF = 284
SM_CREATEGUILD_REQ = 520
CZ_ASKSUMMONEEDOCOMMAND_REQ = 1069
DX_GETPREACTIVEDINFO_REQ = 1282
DM_ADDNOSALELIST_REQ = 1088
SC_ALLYWITHGUILD_ACK = 977
ND_LISTGLOBALNPCDATA_NTF = 1217
ZC_COMPETITIONDICIDEACTION_ACK = 51
ED_DOWNLOADFILEDATAEND_NTF = 885
SC_WEIBO_LISTNEWPLAZAFEED_ACK = 2205
XD_GETACTIVEDINFO_ACK = 1294
AC_NOTICEEND_NTF = 861
CS_GETCLASSLEVELEXPRANKINGS_REQ = 1915
MC_LOADSTOCKLOGINFO_ACK = 1037
ML_GATESTOP_NTF = 30
CS_JOINGUILDWAR_REQ = 1254
ZC_STATECHANGED_BRD = 112
SC_WEIBO_QUERYINFORMUNREADCOUNT_ACK = 1779
GM_CHARLOGOUT_NTF = 17
MH_UNITSKILLINSERT_NTF = 469
ZM_REDUCECOMMODITYCUSTOMVALUE_NTF = 457
DM_GETGMCOMMODITYLIST_REQ = 1098
ZM_INSERTPRESENTMONEY_NTF = 1472
MZ_ROLEREGISTRYDATABEGIN_NTF = 1395
ZC_DELETECOMMODITYAGENTINFO_NTF = 1130
XC_GETLATESTDIRECTPATCHLIST_ACK = 1744
ZC_TALISMANSELECTSTATUS_ACK = 2398
ZM_FOLDITEMPACKET_NTF = 160
DN_QUERYGLOBALNPC_REQ = 1141
ZC_MODIFYPROTECTTIME_ACK = 622
ZM_SUMMONEEENTERSCENE_NTF = 404
QM_QUERYUSERINFOBYNICKNAME_ACK = 1535
MZ_DELETECOMMODITYAGENTINFO_NTF = 1129
MZ_LOADCOMMODITYCUSTOMINFO_NTF = 448
SM_SOCIALTRANSACTEND_NTF = 2395
SC_GUILDEXPUPDATE_NTF = 2362
ZC_OUTERCLIENTDATA_ACK = 1446
ZD_RUNGMCOMMAND_ACK = 280
ED_PUBLISHSCC_ACK = 1095
ZM_ROLEREGISTRYDATAREMOVE_NTF = 1390
ZC_MAPOBJECTINFO_NTF = 114
SC_WEIBO_LISTINFORMWITHTYPE_ACK = 1828
ED_ACCESSTOKEN_ACK = 1030
ZM_RELOADGMCOMMODITY_NTF = 482
MH_USERLOGIN_NTF = 1387
NZ_CREATEGLOBALNPC_AI_REQ = 248
MD_QUERYCHARINFOBYCHARID_ACK = 1496
MZ_FINISHGUILDQUEST_REQ = 2370
ZC_ADJUSTPETINDEX_ACK = 565
SM_GUILDYYUPDATE_NTF = 2281
ED_ZSTOP_NTF = 881
ZC_MAPFORCETERRAINCLEAR_NTF = 506
HM_LOADZONE_REQ = 356
GS_LEVELCHANGED_NTF = 590
SC_QUERYGUILDFUND_ACK = 1305
CZ_POSE_REQ = 143
GC_STARTVALIDATE_NTF = 782
ZM_SKILLPRACTICEUPDATE_NTF = 960
ZM_REPLACEITEMPACKET_NTF = 591
ED_AUTHORITYROLELOGIN_ACK = 837
MZ_PRODUCEBYBLUEPRINT_REQ = 2044
ZC_QUERYCHARINFO_ACK = 315
ZC_CONTRIBUTEGUILDMONEY_ACK = 2310
DE_UNLOCKSCC_REQ = 958
SM_ACTIVEBLUEPRINT_ACK = 2014
MZ_UNITLIVELONGTIME_NTF = 1960
ZC_UNSUMMONPET_BRD = 828
CZ_LOADQUESTINFO_NTF = 329
MD_ADMINREALTIMEMONITOR_ADMINSTOPMONITORGLOBAL_ACK = 2184
SC_GETPACKAGEINDEX_NTF = 1140
ZI_QUITGUILD_NTF = 2284
MD_ADMINREALTIMEMONITOR_GLOBALEVENT_NTF = 2183
MZ_STATUSACTUALITYDATABEGIN_NTF = 134
MR_MONEYDROPFORCHAR_NTF = 1903
ZC_DIALOGACKEND_ACK = 384
ZI_CUSTOMMESSAGE_NTF = 178
MH_GUILDMEMBERINSERT_NTF = 1607
DA_DELETESYSTEMNOTICE_REQ = 1671
DE_LISTSCCTS_REQ = 1559
ZM_DELETEPRESENTMONEY_NTF = 1468
DE_DAEMONPATCHDIRECTLY_NTF = 1062
MD_QUERYCHARSKILLDESC_ACK = 1910
CZ_CANCELVEND_REQ = 1171
ZC_STARTTRADEWITHPLAYER_ACK = 650
MD_ADMINREALTIMEMONITOR_ADMINSTARTMONITORROLE_ACK = 2125
ZC_PRODUCEBYFREE_ACK = 2328
CS_RESPONDGUILDAPPLICATION_REQ = 778
CZ_TALISMANALLELESELECTRESET_REQ = 2389
DE_RUNSHELLSCRIPT_REQ = 148
AC_UPDATECLIENTCUSTOMSDATA_ACK = 715
ZM_QUESTNOLIMIT_NTF = 1738
ZC_ADDVENDITEM_ACK = 1181
ZC_ALLITEMDATABODY_NTF = 172
ZM_FINISHQUEST_NTF = 300
ED_QUERYSCCTCONTENTEND_NTF = 1560
ZM_BASEAVATARSLOTUPDATE_NTF = 162
ZC_BUYSECRETCOMMODITY_ACK = 2430
SC_TEAMMEMBERJOINED_NTF = 263
SM_UPDATELORDWARTIME_NTF = 1326
IM_CREATEAIROLE_ACK = 102
CS_WEIBO_LISTHOTUSER_REQ = 2065
GC_DICTNOUSE_NTF = 1208
ZM_UPDATEPROTECTORTIME_NTF = 633
LM_BANOBJECTHISTORY_NTF = 2099
CZ_CANCELWALK_REQ = 41
ZC_MAPPLATFORMSTATUSFORCERESET_NTF = 398
ZC_ADDTRADEITEM_NTF = 665
SC_REMOVEFRIEND_NTF = 682
SM_FINISHGUILDQUEST_REQ = 2374

#Error codes
ERROR_PARSEPACKET = 17
ERROR_VEND_BUYCOUNT = 291
ERROR_ROLEID = 15
ERROR_ACTIVE = 456
ERROR_CPS_RFCDB = 321
ERROR_CANNOT_ENHANCEITEM = 292
ERROR_LOAD_PRESENT_FAIL = 301
ERROR_ITEMSLOT_VERSION = 47
ERROR_REPEATLOGIN = 20
ERROR_DAEMON_SYSTEM_SCC_RELOAD = 277
ERROR_MEMBERLOCKED = 151
ERROR_CANNOT_RECOVERYFEALTY = 414
ERROR_MAPDROP_SYSTEM_FAULT = 114
ERROR_QUEST_NOT_EXIST = 74
ERROR_OBJECT = 30
ERROR_PRESENT_ITEM_COUNT_LIMIT = 427
ERROR_WALK_PROCESS = 199
ERROR_ITEM_FEALTY_EMPTY = 397
ERROR_TEAMID = 78
ERROR_ITEM_FULL = 68
ERROR_ATTENDANT = 417
ERROR_SKILLZHAOLIMIT = 121
ERROR_GLOBAL_MUTED = 378
ERROR_WALK_TARGET = 198
ERROR_GLOBALRECLAIM_ITEM_NOT_EXIST = 411
ERROR_PRICENOTSAME = 257
ERROR_CANNOT_GUESSITEM = 331
ERROR_DEPLOYID = 245
ERROR_UNITCLASSCATEGORY = 253
ERROR_UNITCLASS = 101
ERROR_ACCESS = 4
ERROR__COMPETITION_COOLDOWN = 29
ERROR_NO_SUCH_CHARCTER = 210
ERROR_OBJECTHANDLE = 22
ERROR_DATABASE = 11
ERROR_DAEMON_SYSTEM_FILE_OPEN = 261
ERROR_DBAGENT = 243
ERROR_ITEMSLOT_NOTEMPTY = 50
ERROR_PET_LOCKED = 187
ERROR_ITEM_COMPOSE = 420
ERROR_STRING_TOO_LONG = 306
ERROR_ITEM_RULE_RANA = 89
ERROR_ZONEDISCONNECT = 10
ERROR_DIALOG_ID = 110
ERROR_OWNER = 71
ERROR_CLIENTCUSTOM_SYSTEM_FAULT = 214
ERROR_CPS_SCAN = 323
ERROR_CANNOT_PICKUP = 60
ERROR_INVALID_ITEM = 44
ERROR_BANEFIT_CONTROL = 431
ERROR_NAME_BLACKLIST = 437
ERROR_VALIDATE_NEVER_START = 221
ERROR_GLOBALRECLAIM_STOCK_COUNT_UPDATE_ZERO = 429
ERROR_CANNOT_MOVEITEM = 35
ERROR_TOWN_RULE = 329
ERROR_ALREADYALLIED = 254
ERROR_ITEM_MAXHOLD = 53
ERROR_CANNOT_REPLACEPACKET = 158
ERROR_CHARACTERLOCKED = 152
ERROR_ITEM_ALREADY_KAIFENG = 334
ERROR_PROTECT_PASSWORD_WRONG = 173
ERROR_CANNOT_DROP = 65
ERROR_QUEST_GENERATERULE = 388
ERROR_LOWLEVEL = 143
ERROR_VALIDATE_EXPIRED = 222
ERROR_WEIBO_FOLLOWING_NOT_EXIST = 354
ERROR_ADMINREALTIMEMONITOR_ROLE_COUNT_LIMIT = 422
ERROR_NOT_GUILDWAR_REGTIME = 281
ERROR_ROLEHANDLE = 109
ERROR_GUILDWAR_JOIN = 284
ERROR_UNIT_DEAD = 191
ERROR_ROLEDACTION = 2
ERROR_CPS_DECODE = 322
ERROR_INIT_AVATAR_LESS = 102
ERROR_GLOBALRECLAIM_LEVEL_LIMIT = 435
ERROR_PET_NOT_ACTIVE = 170
ERROR_ITEM_BINDED = 56
ERROR_CANNOT_SWAPITEM = 36
ERROR_PROTECT_NOT_ON = 177
ERROR_ITEM_NOT_QUEST = 268
ERROR_QUEST_OWNER = 453
ERROR_EXP_NOTENOUGH = 449
ERROR_PRICETOOLOW = 256
ERROR_PROTECT_OF_GM = 194
ERROR_NICKNAME_EXIST = 107
ERROR_INVALID_UNITCLASS = 93
ERROR_BILL_NUM_LIMIT = 365
ERROR_HAS_BEEN_MUTED = 346
ERROR_INVALID_ITEMLEVEL = 229
ERROR_WEIBO_QUEST_SELF_ACCEPT = 380
ERROR_ITEM_ALREADY_GUESS = 338
ERROR_LOAD_CRAFT_FAIL = 336
ERROR_PHASE = 18
ERROR__COMPETITION_NOEFFECT = 27
ERROR_BILL_NOT_PAY = 364
ERROR_ITEM_NOT_KAIFENG = 333
ERROR_GUILDWAR_REGTIME = 294
ERROR_TEAMLEADER = 77
ERROR_WEIBO_FEED_FILTER_NOT_EXIST = 419
ERROR_NOT_IN_TRADE_LIST = 181
ERROR_DUPLICATE_SUBCHARACTER = 207
ERROR_GUILD_GRADATION_TOO_LOW = 442
ERROR_SNSQUEST_GROUP = 421
ERROR_QUEST_SYSTEM_PREVENT = 251
ERROR_CANNOT_UNFOLDITEMPACKET = 154
ERROR_WEIBO_FOLLOWING_ALREADY_EXIST = 355
ERROR__COMPETITION_TARGET = 24
ERROR_WEIBO_COMMENT_NOT_EXIST = 358
ERROR_SELLCONDITION = 127
ERROR_SHOP_SELL_MAX = 330
ERROR_BILL_HAS_PAY = 370
ERROR_PET_CORE_DATA = 186
ERROR_DISTANCE = 201
ERROR_SHUTDOWN_TIME_DATA = 314
ERROR_WEIBO_PAGE_SIZE_LIMIT = 372
ERROR_DAEMON_SYSTEM_UNNEED_OPERATION = 138
ERROR_DAEMON_SYSTEM_SCC = 275
ERROR_DAEMON_SYSTEM_UPDATE_DB = 279
ERROR_GUILDNOTINVITED = 140
ERROR_INVALID_ITEMGENERATEID = 463
ERROR_CPS_RAC = 318
ERROR_ITEM_NO_AVATAR = 97
ERROR_QUEST_CANNOT_REPEAT = 433
ERROR_NOTSHUTTINGDOWN = 315
ERROR_OUTPUT_ATTRIBUTE = 131
ERROR_GLOBALRECLAIM_CHARACTER_CANT_INCRE_MONEY = 405
ERROR_TALISMANLEVEL = 465
ERROR_SUBCHARACTER_IS_OTHERS_CHARACTER = 208
ERROR_NO_SUCH_PAYID = 369
ERROR_WEIBO_FEED_FILTER_TYPE = 416
ERROR_GUILDNAMEUSED = 135
ERROR_PET_SUMMONED = 148
ERROR_BLUEPRINT_IN_ACTIVE = 400
ERROR_GLOBALRECLAIM_STOCK_COUNT_UNDERFLOW = 432
ERROR_MONEY_TYPE = 195
ERROR_ITEM_LOCK = 328
ERROR_ITEMEQUIPPART_MISMATCH = 61
ERROR_CANNOT_REPAIRITEM = 368
ERROR_CHARNOEXIST = 16
ERROR_LOAD_SKILL_FAIL = 300
ERROR_CANCEL = 444
ERROR_ITEM_ALREADY_UNSCRAMBLE = 376
ERROR_VEND_FORBIDDEN = 75
ERROR_WEIBO_FEED_NOT_EXIST = 352
ERROR_TRADE_ITEM_LIMIT = 189
ERROR_GLOBALRECLAIM_ITEM_MONEY_NOT_MATCH = 412
ERROR_SUMMONEEOWNER = 360
ERROR_MAPAREA = 309
ERROR_GLOBALRECLAIM_ITEM_TRADE_COUNT_LIMIT = 426
ERROR_KICKOFFBYSERVER = 153
ERROR_EXTERN = 197
ERROR_DAEMON_SYSTEM_AUTHORITY_GROUPS_LENGTH = 235
ERROR_SNSQUEST_PRICE = 418
ERROR_DAEMON_SYSTEM_NAME_DUPLICATE = 325
ERROR_WEIBO_GUILD_USER_NOT_EXIST = 447
ERROR_INVALID_ITEMCOUNT = 46
ERROR_UNITGENDER = 100
ERROR_NOT_SAME_MAP = 286
ERROR_WANTED_AWARD_TOOLOW = 445
ERROR_UNITPARAM = 227
ERROR_OFFLINE = 80
ERROR_ANSWER_TIME_OUT = 182
ERROR_NO_SUCH_SUBCHARACTER = 206
ERROR_DAEMON_SYSTEM_ACCESSTOKEN = 258
ERROR_DUPLICATE_INVITATION = 211
ERROR_BLUEPRINT_HAS_ACTIVE = 401
ERROR_SHUTTINGDOWN = 312
ERROR_WEIBO_BLACK_NOT_EXIST = 356
ERROR_INIT_EQUIP_PART = 103
ERROR_STOCKNOEXIST = 247
ERROR_SHOPDISTANCE = 124
ERROR_ITEM_NOT_UNSCRAMBLE = 375
ERROR_DAEMON_SYSTEM_FILE_OPEN_READ = 263
ERROR_REPETITIONFULL = 144
ERROR_LOAD_QUEST_FAIL = 288
ERROR_SENDRANGE = 231
ERROR_DAEMON_SYSTEM_NOSOURCE = 341
ERROR_VALIDATE_PIC = 220
ERROR_DAEMON_SYSTEM_LOCKED = 238
ERROR_DANYAO_SYSTEM_NOT_INITED = 467
ERROR_ITEM_NOT_GEM = 391
ERROR_TEAMFULL = 79
ERROR_PRODUCE = 407
ERROR_INVALID_GEMSOCKETINDEX = 390
ERROR_GUILD_MEMBER_LIMIT = 296
ERROR_DAEMON_SYSTEM_FILE_OPEN_WRITE = 264
ERROR_PET_ACTIVE = 171
ERROR_STOCKOWNER = 246
ERROR_SHOPNOEXIST = 122
ERROR_CANNOT_MOVEITEMPACKET = 156
ERROR_SENDMESSAGE = 304
ERROR_CANNOT_RECASTATTR = 460
ERROR_WEIBO_FEED_EXPIRED = 425
ERROR_INVALID_ITEMPACKETBARID = 40
ERROR_ITEM_NOT_PACKET = 96
ERROR_LEVEL_LIMIT = 398
ERROR_DANYAO_CHAR_LEVEL_LIMIT = 468
ERROR_PET_SUMMONED_SIZE_LIMIT = 217
ERROR_ITEMPACKETSLOT_LOCKED = 168
ERROR_AIDISCONNECT = 113
ERROR_ITEMSLOT_CANNOTLOCK = 72
ERROR_GUILDQUEST_FINISHCOUNT = 452
ERROR_GEM_EXIST = 393
ERROR_DAEMON_SYSTEM_ID = 234
ERROR_DIALOG_ITEM_ID = 111
ERROR_ITEM_NO_GENSOCKET = 392
ERROR__COMPETITION_RANA = 5
ERROR_DAEMON_SYSTEM_SCC_PUBLISH = 278
ERROR_GLOBAL_NPC_ID = 161
ERROR_STOCKSELLPRICE = 249
ERROR_ITEMSLOT_MAXSTACK = 52
ERROR_QUEUE = 32
ERROR_NOTENOUGHMONEY = 126
ERROR_WEIBO_BLACK_ALREADY_EXIST = 357
ERROR_INTEAM = 76
ERROR_EQUIPQUALITY = 395
ERROR_WALKTYPE = 28
ERROR_PENDING = 8
ERROR_WEIBO_FEED_NOT_FINAL_FORWARD_SOURCE = 361
ERROR_SKILLID = 118
ERROR_DAEMON_SYSTEM_FILE_IO_WRITE = 272
ERROR_INVALID_EQUIPLEVEL = 228
ERROR_WEIBO_FEED_NOT_QUEST = 379
ERROR_QUEST_EXIST = 305
ERROR_COOLDOWN = 116
ERROR_DAEMON_SYSTEM_FILE_IO = 270
ERROR_ADMINREALTIMEMONITOR_NOT_MONITOR = 424
ERROR_TRADE_COOLDOWN = 218
ERROR_ALREADYJOIN = 21
ERROR_DAEMON_SYSTEM_DISCONNECTED = 262
ERROR_PROTECT_TIME_WRONG = 174
ERROR_PET_ACTIVE_SIZE_LIMIT = 147
ERROR_OK = 0
ERROR_ITEMPACKETSLOT_STATE = 59
ERROR_CHAR_IN_TRADE = 180
ERROR_FUNCTION_TYPE = 410
ERROR_ITEM_SYSTEM_NOT_CREATE = 13
ERROR_ITEM_NOTENOUGH = 54
ERROR_ZHAOGROUP = 120
ERROR_DAEMON_SYSTEM_EXTERNAL_ERROR = 269
ERROR_AWARD = 408
ERROR_RANACONTEXT = 130
ERROR_ACCOUNT = 317
ERROR_WEIBO_FEED_NOT_BELONG = 446
ERROR_ITEM_OPERATION_RULE = 132
ERROR_MONEY_LIMIT = 203
ERROR_DAEMON_SYSTEM_AUTHORITY_GROUP_HAS_ROLE = 237
ERROR_NOCOMMODITY = 128
ERROR__COMPETITION_ACTION = 23
ERROR_ITEMSLOT_EMPTY = 49
ERROR_ITEMPACKETSLOT_CANNOTLOCK = 167
ERROR_STRING_TOO_SHORT = 307
ERROR_ITEMPACKET_FULL = 164
ERROR_NOSALE = 255
ERROR_INVITE_LIMIT = 225
ERROR_NOT_ENOUGH_COUNT = 471
ERROR_CANNOT_FOLDITEMPACKET = 155
ERROR_SERVERINIT = 83
ERROR_ITEMPACKET_EXPIRED = 57
ERROR_DAEMON_SYSTEM_AUTHORITY_GROUPS_CONTAIN_INVALID_ID = 236
ERROR_TRADE_LIST_LIMIT = 183
ERROR_SNSQUEST_MAX_ACCEPT_COUNT = 441
ERROR_ITEM_NOT_EXIST = 73
ERROR_SHOPPING_LIST_EMPTY = 366
ERROR_INVALID_ITEMPACKETBAROWNER = 38
ERROR_VALIDATE_VERSION = 316
ERROR_LOAD_AVATAR_FAIL = 303
ERROR_PROTECT_DATABASE = 179
ERROR_WEIBO_FOLLOWER_COUNT_LIMIT = 434
ERROR_BILL_FETCHED = 363
ERROR_CHANNELCLOSE = 466
ERROR_VEND_STATE = 88
ERROR_ITEM_NOT_EQUIPMENT = 95
ERROR_INVALID_ITEMPACKETBARTYPE = 39
ERROR_DUPLICATE = 458
ERROR_GUILDACCESS = 139
ERROR_PROTECT_IS_ON = 176
ERROR_ITEM_LOCKLABEL_NOT_EXIST = 85
ERROR_SUMMONEEID = 266
ERROR_FAIL = 1
ERROR_USERORPASS = 12
ERROR_TERMINATED = 63
ERROR_VEND_VERSION = 289
ERROR_CANNOT_FIND_INIT_LOCATION = 112
ERROR_INVALID_ITEMPACKETSLOTLOCATION = 159
ERROR_STATEID = 382
ERROR_GUILDLEADER = 142
ERROR_ITEM_DURABILITY_EMPTY = 377
ERROR_ITEM_NOT_NORMAL = 267
ERROR_ITEM_ACTION_CASTER = 91
ERROR_VALIDATE_COOLDOWN = 226
ERROR_INVALID_ENHANCELEVEL = 230
ERROR_GUILDQUEST_NOT_RELEASE = 451
ERROR_ITEMPACKETSLOT_NOTEMPTY = 166
ERROR_TECHNOLOGY_TOO_LOW = 402
ERROR_VERSION = 349
ERROR_DAEMON_SYSTEM_AUTHORITY_ITEM = 239
ERROR_ITEM_NO_DURABILITY = 242
ERROR_ROLEACTION = 31
ERROR_INVALID_ITEMPACKETSLOTINDEX = 41
ERROR_VALIDATE_ALREADY_START = 219
ERROR_SYSTEMBUSY = 137
ERROR_AVATAR_SYSTEM_FAULT = 94
ERROR_SOCIALUNLINK = 384
ERROR_ROLE_TEMPLATE_ID = 200
ERROR_ITEMPACKETSLOT_VERSION = 165
ERROR_GUILDNOTEXIST = 134
ERROR_GUILDWAR_REG = 283
ERROR_TRADE_DISTANCE = 188
ERROR_ITEM_EXPIRED = 55
ERROR_ITEM_ACTION_TARGET = 92
ERROR_NO_SUCH_FRIEND = 204
ERROR_DAEMON_SYSTEM_DAEMON_SUB_NOT_EXIST = 241
ERROR_ITEMGUESS_SYSTEM_FAULT = 335
ERROR_ITEM_LOCKCONTAINER_NOT_EXIST = 86
ERROR_CLOSED_BY_DEPLOY = 290
ERROR_INVALID_ITEMTYPEID = 45
ERROR_INIT_EQUIP_LESS = 104
ERROR_OVERFLOW = 19
ERROR_NOT_RMB_COMMODITY = 367
ERROR_INVALID_AVATAR = 105
ERROR_GUILD_LEVEL = 287
ERROR_TRADE_LOCK = 184
ERROR_HASGUILD = 136
ERROR__COMPETITION_SKILL = 26
ERROR_INVALID_DROPSN = 66
ERROR_MAX_CHAR_COUNT = 98
ERROR_DAEMON_SYSTEM_EXPIRED = 326
ERROR_DUPLICATE_FRIEND = 205
ERROR_INVALID_DISTANCE = 70
ERROR_CANNOT_DECOMPOSE = 394
ERROR_PROTECT_SYSTEM_FAULT = 178
ERROR_ALREADY = 345
ERROR_FORBIDDENSTRING = 280
ERROR_CANNOT_RECASTAFFIX_NOGEN = 462
ERROR_DAEMON_SYSTEM_SCC_UPDATE = 276
ERROR_ZHAOID = 119
ERROR_DAEMON_SYSTEM_VERSION = 327
ERROR_TIME_LIMIT = 470
ERROR_CLIENTCUSTOM_DATA = 216
ERROR_CHANNELID = 9
ERROR_DANYAO_SLOT_OPEN_COUNT_LIMIT = 469
ERROR_PROTECT_OF_TIME = 193
ERROR_TALISMAN = 454
ERROR_WEIBO_INFORM_NOT_EXIST = 362
ERROR_SOCIALGROUP = 310
ERROR_ITEM_NOT_SNSQUEST = 169
ERROR_WEIBO_QUEST_ACCEPT_COUNT_LIMIT = 381
ERROR_QUERYAGENT = 383
ERROR_WEIBO_COMMENT_COUNT_LIMIT = 385
ERROR_LOAD_REGISTRY_FAIL = 302
ERROR_GLOBALRECLAIM_SYSTEM_NOT_INITED = 404
ERROR_CANNOTSELL = 259
ERROR_SCC_VALIDATE = 133
ERROR_PET_COMMAND = 190
ERROR_ITEM_NO_FEALTY = 396
ERROR_DAEMON_SYSTEM_NOTARGET = 342
ERROR_DAEMON_SYSTEM_PASSWORD = 233
ERROR_INVALID_AFFIXGROUPID = 464
ERROR_DAEMON_SYSTEM_FILE_IO_READ = 271
ERROR_STOCK_MARKET_CLOSE = 337
ERROR_NOT_INITED = 33
ERROR_TOWN = 81
ERROR_QUERY_COOL_DWON = 150
ERROR_NAME_HEAD = 436
ERROR_PET_NOT_SUMMONED = 149
ERROR_ALLELE = 457
ERROR_GLOBALRECLAIM_STOCK_COUNT_LIMIT = 403
ERROR_INIT_AVATAR_PART = 106
ERROR_CPS_ICV = 319
ERROR_NOHISTORY = 108
ERROR_RANASPACE = 6
ERROR_INVALID_ITEMSLOTINDEX = 42
ERROR_CANNOT_UPDATEDURABILITY = 350
ERROR_ITEM_RULE_TEMPLATE_NOT_EXIST = 260
ERROR_WEIBO_FEED_FILTER_DUPLICATE = 415
ERROR_CANNOT_RECASTAFFIX = 461
ERROR_NO_TECHNOLOGY_ID = 399
ERROR_ITEMPACKET_SIZE = 163
ERROR_WEIBO_FOLLOWING_COUNT_LIMIT = 374
ERROR_WEIBO_MONEY_LOCKED = 386
ERROR_CANNOT_STACKITEM = 37
ERROR_QUEST_FINISH_TOO_MUCH = 348
ERROR_NAME_WHITELIST = 438
ERROR_DAEMON_SYSTEM_DAEMON_CONTROL_NOT_EXIST = 240
ERROR_PLATFORM = 196
ERROR_WEIBO_INFORM_TYPE = 387
ERROR_CPS_HDB = 320
ERROR_ITEM_SYSTEM_FAULT = 82
ERROR_TRADE_CONFIRM = 185
ERROR_ADMINREALTIMEMONITOR_ALREADY_MONITOR = 423
ERROR_VISIBLE = 455
ERROR_REPETITIONID = 145
ERROR_CLIENTCUSTOM_KEY = 215
ERROR_DAEMON_SYSTEM_NAME = 232
ERROR_VEND_LIMIT = 34
ERROR_CHANNELFULL = 7
ERROR_GUILD_LIMIT = 298
ERROR_ITEM_ACTION_TYPE = 90
ERROR_EXPIRED = 311
ERROR_HASNOGUILD = 141
ERROR_WEIBO_QUEST_ALREADY_ACCEPT = 443
ERROR_DAEMON_SYSTEM_FAULT = 129
ERROR_STOCKCOUNT = 248
ERROR_WEIBO_CONTENT_LENGTH_LIMIT = 373
ERROR_NEVER_INVITE = 213
ERROR_QUEST_RELEASE_COSTRATE = 440
ERROR_DAEMON_SYSTEM_PATCH_NOT_START = 273
ERROR_QUEST_FREEZE = 347
ERROR_LOADING = 244
ERROR_ITEM_FEALTY_NOT_FULL = 430
ERROR_BILL_CANCEL_COOLDOWN = 371
ERROR_DAEMON_SYSTEM_AUTHORITY = 252
ERROR_ITEM_NOT_TALISMAN = 450
ERROR_INDULGE = 293
ERROR_VALIDATE_CURRENT_TIMES = 223
ERROR_DUPLICATE_INVITATION_SOURCE = 212
ERROR_WEIBO_COMMENT_NOT_BELONG = 359
ERROR_HEIGHT = 202
ERROR_FRIEND_LIMIT = 297
ERROR_ALREADYLOGIN = 14
ERROR_ITEMPACKET_NOT_VAR = 162
ERROR_STOCKLISTLIMIT = 250
ERROR_TIME_DIFF = 343
ERROR_GLOBALRECLAIM_CHARACTER_CANT_DECRE_MONEY = 406
ERROR_CANNOT_SWAPITEMPACKET = 157
ERROR_RANDKEY = 344
ERROR_DAEMON_SYSTEM_PATCH_NO_TARGET = 274
ERROR_OBJECTMOVEMENT = 3
ERROR_INVALID_MAPCELL = 67
ERROR_ROLE_FUNCTION = 339
ERROR_INVALID_ITEMSLOTLOCATION = 43
ERROR_UNITLEVEL = 459
ERROR__COMPETITION_ACTIONTYPE = 25
ERROR_ONLINE = 99
ERROR_PROTECT_OF_PASSWORD = 192
ERROR_PET_SIZE_LIMIT = 146
ERROR_NOT_GUILDWAR_JOINTIME = 282
ERROR_QUEUEFULL = 64
ERROR_WEIBO_USER_NOT_EXIST = 353
ERROR_MAPCELL_EMPTY = 69
ERROR_ITEM_NOT_MATCH = 448
ERROR_SCOPE_PRIVILEGE = 299
ERROR_ITEMSLOT_CANNOTSTACK = 51
ERROR_GUILDWAR_JOIN_FULL = 285
ERROR_GLOBALRECLAIM_ITEM_CHAR_LEVEL_LIMIT = 439
ERROR_PROTECTOR_FROZEN = 351
ERROR_ITEMSLOT_LOCKED = 48
ERROR_LORDWAR_LORDER = 295
ERROR_VALIDATE = 224
ERROR_DAEMON_SYSTEM_SUB_ERROR = 265
ERROR_RECIPE = 409
ERROR_ITEMPACKETSLOT_EMPTY = 58
ERROR_SHOPNOTOPEN = 123
ERROR_CRAFT_LEVEL_TOO_LOW = 413
ERROR_ITEM_LOCK_EXECUTE_FAILED = 87
ERROR_PRESENT_OVER_TIME = 313
ERROR_ITEMFASHIONPART_MISMATCH = 62
ERROR_ITEM_NO_USAGE = 115
ERROR_CANNOT_KAIFENGITEM = 332
ERROR_PROTECT_PASSWORD_EMPTY = 175
ERROR_DAEMON_SYSTEM_NAME_INVALID = 324
ERROR_ITEMPACKET_NOTEMPTY = 160
ERROR_SHOPVERSION = 125
ERROR_PET_INDEX = 172
ERROR_WEIBO_TARGET_CANT_BE_SELF = 428
ERROR_QUEST_LIMIT = 308
ERROR_GUILD_ITEM_LIMIT = 389
ERROR_ITEM_LOCKLABEL_DUPLICATED = 84
ERROR_SHELL_SCRIPT_NAME = 117
ERROR_ITEM_LOCK_NOT_ITEMUPDATE = 340
ERROR_ITEMPACKETBAROWNER_LOCKED = 209

ASI_HEAD			= 0
ASI_FACE			= ASI_HEAD + 1
ASI_SHOULDER		= ASI_FACE + 1
ASI_UPPERBODY		= ASI_SHOULDER + 1
ASI_TATTOO			= ASI_UPPERBODY + 1
ASI_CLOAK			= ASI_TATTOO + 1
ASI_WEAPON			= ASI_CLOAK + 1
ASI_LEG				= ASI_WEAPON + 1
ASI_FEET			= ASI_LEG + 1
ASI_LWRIST			= ASI_FEET + 1
ASI_RWRIST			= ASI_LWRIST + 1
ASI_HAIRCOLOR		= ASI_RWRIST + 1
ASI_FACEACCESSORY	= ASI_HAIRCOLOR + 1
ASI_FASHIONHEAD		= ASI_FACEACCESSORY + 1
ASI_FASHIONBODY		= ASI_FASHIONHEAD + 1
AIT_ITEM	= 0
AIT_RUNE	= AIT_ITEM + 1
AIT_MONEY	= AIT_RUNE + 1
AIT_COUNT	= AIT_MONEY + 1
AR_MONSTER	= 0
UG_FEMALE	= 0
UG_MALE		= UG_FEMALE + 1
UG_NONE		= UG_MALE + 1
AFET_MAXHP					= 0
AFET_MAXMP					= 1
AFET_PHYSICALATTACK_MIN		= 2
AFET_PHYSICALATTACK_MAX		= 3
AFET_MAGICATTACK_MIN		= 4
AFET_MAGICATTACK_MAX		= 5
AFET_XUANATTACK_MIN			= 6
AFET_XUANATTACK_MAX			= 7
AFET_SPIRITATTACK_MIN		= 8
AFET_SPIRITATTACK_MAX		= 9
AFET_PHYSICALDEFENCE_MIN	= 10
AFET_PHYSICALDEFENCE_MAX	= 11
AFET_MAGICDEFENCE_MIN		= 12
AFET_MAGICDEFENCE_MAX		= 13
AFET_PHYSICALDODGE			= 14
AFET_MAGICDODGE				= 15
AFET_CRITICALHIT			= 16
AFET_LUCK					= 17
AFET_BLOCK					= 18
AFET_BLOCKVALUE				= 19
AFET_RECOVERYHP				= 20
AFET_RECOVERYMP				= 21
AFETCOUNT					= AFET_RECOVERYMP + 1
EItem	= 0
ESkill	= EItem + 1
RL_SS		= 0
RL_S		= RL_SS + 1
RL_A		= RL_S + 1
RL_B		= RL_A + 1
RL_C		= RL_B + 1
RL_D		= RL_C + 1
RL_E		= RL_D + 1
RL_COUNT	= RL_E + 1
IEP_HEAD		= 0
IEP_SHOULDER	= 1
IEP_NECKLACE	= 2
IEP_UPPERBODY	= 3
IEP_TATTOO		= 4
IEP_CLOAK		= 5
IEP_WEAPON		= 6
IEP_BELT		= 7
IEP_WAIST		= 8
IEP_LEG			= 9
IEP_FEET		= 10
IEP_LWRIST		= 11
IEP_RWRIST		= 12
IEP_LRING		= 13
IEP_RRING		= 14
IEP_SPIRIT		= 15
IEP_CRAFTTOOL	= 16
IEP_FASHIONHEAD	= 17
IEP_FASHIONBODY	= 18
IEP_COUNT		= IEP_FASHIONBODY + 1
IEEP_BEGIN	= 200
IEEP_WRIST	= IEEP_BEGIN
IEEP_RING	= IEEP_WRIST + 1
IEEP_END	= IEEP_RING + 1
IC_NORMAL		= 0
IC_GENERALEQUIP	= IC_NORMAL + 1
IC_SNSQUEST		= IC_GENERALEQUIP + 1
IC_PACKET		= IC_SNSQUEST + 1
IC_QUEST		= IC_PACKET + 1
IC_RUNE			= IC_QUEST + 1
IC_GEM			= IC_RUNE + 1
IC_TREASUREBOX	= IC_GEM + 1
IC_TALISMAN		= IC_TREASUREBOX + 1
IC_COUNT		= IC_TALISMAN + 1
IBT_NONE	= 0
IBT_USE		= IBT_NONE + 1
IBT_FOREVER	= IBT_USE + 1
IBTCOUNT	= IBT_FOREVER + 1
GEMC_RED	= 0
GEMC_YELLOW	= GEMC_RED + 1
GEMC_BLUE	= GEMC_YELLOW + 1
GEMCCOUNT	= GEMC_BLUE + 1
EQARC_LJFEEL	= 0
EQARC_LJ2JPFEEL	= EQARC_LJFEEL + 1
EQARCCOUNT		= EQARC_LJ2JPFEEL + 1
IDE_NONE		= 0
IDE_PARTICLE	= IDE_NONE + 1
IDE_EDGELIGHT	= IDE_PARTICLE + 1
PCAT_NONE	= 0
PCAT_ROLE	= PCAT_NONE + 1
PCAT__COUNT	= PCAT_ROLE + 1
CIT_ITEM			= 0
CIT_MONEY			= CIT_ITEM + 1
CONSUMEITEM_COUNT	= CIT_MONEY + 1
RAM_ALL				= 0
RAM_FRONTANDBACK	= RAM_ALL + 1
RAM_BACK			= RAM_FRONTANDBACK + 1
RAMCOUNT			= RAM_BACK + 1
RBT_NONE	= 0
RBT_CHANNEL	= RBT_NONE + 1
CST_SPECIAL	= 0
CST_BUFF	= CST_SPECIAL + 1
CST_DEBUFF	= CST_BUFF + 1
CST_POSE	= CST_DEBUFF + 1
CST_STATIC	= CST_POSE + 1
APC_SS	= 0
APC_S	= APC_SS + 1
APC_A	= APC_S + 1
APC_B	= APC_A + 1
APC_C	= APC_B + 1
APC_D	= APC_C + 1
APC_E	= APC_D + 1
SCV_NONE	= 0
SCV_BUFF	= SCV_NONE + 1
SCV_DEBUFF	= SCV_BUFF + 1
SCV_SPECIAL	= SCV_DEBUFF + 1
SCV_LIFE	= SCV_SPECIAL + 1
CDIT_TEXT	= 0
CDIT_PLAYER	= CDIT_TEXT + 1
CDIT_REGION	= CDIT_PLAYER + 1
TR_F				= 0
TR_E				= TR_F + 1
TR_D				= TR_E + 1
TR_C				= TR_D + 1
TR_B				= TR_C + 1
TR_A				= TR_B + 1
TR_S				= TR_A + 1
TALISMANRANK_COUNT	= TR_S + 1
MSTN_S_COMMON		= 0
MSTN_S_WORMHOLE		= MSTN_S_COMMON + 1
MSTN_S_LORDWAR		= MSTN_S_WORMHOLE + 1
MAPTYPEENUM_COUNT	= MSTN_S_LORDWAR + 1
MST_S_COMMON			= 0
MST_S_PROTECT			= MST_S_COMMON + 1
MST_S_MELEE				= MST_S_PROTECT + 1
MST_S_LORDWAR			= MST_S_MELEE + 1
MST_S_GUILD				= MST_S_LORDWAR + 1
MST_S_COOPERATE			= MST_S_GUILD + 1
MST_S_PROTECTCOOPERATE	= MST_S_COOPERATE + 1
MAPSOCIALSTRATEGY_COUNT	= MST_S_PROTECTCOOPERATE + 1
IAWT_Zone		= 0
IAWT_Monster	= IAWT_Zone + 1
IAWT_Npc		= IAWT_Monster + 1
AC_EQUIP_BASEATTR	= 0
AC_EQUIP_EXTRAATTR	= AC_EQUIP_BASEATTR + 1
AC_EQUIP_UNITPARAM	= AC_EQUIP_EXTRAATTR + 1
AC_EQUIP_SELLPRICE	= AC_EQUIP_UNITPARAM + 1
AC_EQUIP_MF			= AC_EQUIP_SELLPRICE + 1
AC_EQUIP_DECOMPOSE	= AC_EQUIP_MF + 1
AC_ROLE				= AC_EQUIP_DECOMPOSE + 1
ACCOUNT				= AC_ROLE + 1
ITEM	= 0
RUNE	= ITEM + 1
MONEY	= RUNE + 1
TT_None			= 0
TT_Cell			= TT_None + 1
TT_RoleObject	= TT_Cell + 1
ET_None				= 0
ET_PassiveAuxiliary	= ET_None + 1
ET_ActiveAuxiliary	= ET_PassiveAuxiliary + 1
ET_PassiveOffensive	= ET_ActiveAuxiliary + 1
ET_ActiveOffensive	= ET_PassiveOffensive + 1

class AwardGroupName				(String):pass
class AwardGroupCode				(String):pass
class AwardTableName				(String):pass
class AwardTableCode				(String):pass

class AwardItemVec(VECTOR):
	def __init__(self):
		VECTOR.__init__(self,AwardItem)


class AwardGroupRecordVec(VECTOR):
	def __init__(self):
		VECTOR.__init__(self,AwardGroupRecord)

class AwardItemType				(BYTE):pass
class AwardReason				(BYTE):pass

class AwardTableRecordVec(VECTOR):
	def __init__(self):
		VECTOR.__init__(self,AwardTableRecord)

class ErrorType				(WORD):pass
class RoleID				(DWORD):pass
class UserID				(DWORD):pass
class CharacterID				(RoleID):pass
class NpcID				(RoleID):pass
class TownID				(WORD):pass
class GardenID				(DWORD):pass
class CountryID				(BYTE):pass
class DirectType				(GRADS_C):pass
class INT				(INT):pass
class FLOAT				(FLOAT):pass
class UserName				(String):pass
class PassWord				(String):pass
class NickName				(String):pass
class ItemName				(String):pass
class ItemCode				(String):pass
class FilePath				(String):pass
class LuaScript				(String):pass
class ObjPath				(String):pass
class ObjName				(String):pass
class ConsumeItemType				(BYTE):pass
class ConsumeReason				(BYTE):pass
class Location				(POS2D_L):pass
class CellPosition				(POS2D_S):pass

class CellPositionVec(VECTOR):
	def __init__(self):
		VECTOR.__init__(self,CellPosition)

class RegionBaseType				(BYTE):pass
class ChannelNumber				(BYTE):pass
class StringTableID				(DWORD):pass
class ChatText				(String):pass
class StringTableText				(String):pass
class SkillZhaoID				(DWORD):pass
class SkillID				(DWORD):pass
class SkillIntensity				(BYTE):pass
class TalismanGeneGroupID				(DWORD):pass
class ConsumeItemType				(BYTE):pass
class ConsumeReason				(BYTE):pass
class TalismanRank				(BYTE):pass
class TalismanLevel				(CHAR):pass
class TalismanExperience				(LONG):pass
class TalismanGeneID				(WORD):pass
class TalismanGeneIntensity				(BYTE):pass
class TalismanGeneGenerateID				(DWORD):pass
class TalismanGrowthRuleID				(DWORD):pass
class TalismanAlleleIndex				(BYTE):pass
class TalismanGeneGroupID				(DWORD):pass
class ConsumeItemType				(BYTE):pass
class ConsumeReason				(BYTE):pass
class AffixCategory				(BYTE):pass
class UnitParameterID				(WORD):pass

class AIAffixInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("NameResource",String())
		self.setData("HeadResource",String())
		self.setData("HeadResourceDescribe",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.NameResource.pack()
		res += self.HeadResource.pack()
		res += self.HeadResourceDescribe.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.NameResource.unpack(data[index:])
		index += self.HeadResource.unpack(data[index:])
		index += self.HeadResourceDescribe.unpack(data[index:])
		return index
class CharExpToItemInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("useExp",DWORD())
		self.setData("genID",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.useExp.pack()
		res += self.genID.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.useExp.unpack(data[index:])
		index += self.genID.unpack(data[index:])
		return index
class CharacterHeadIconInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("SceneSource",String())
		self.setData("UISource",String())
		self.setData("MiniMapUISource",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.SceneSource.pack()
		res += self.UISource.pack()
		res += self.MiniMapUISource.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.SceneSource.unpack(data[index:])
		index += self.UISource.unpack(data[index:])
		index += self.MiniMapUISource.unpack(data[index:])
		return index
class CharacterVitalityInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("MaxValue",LONG())
		self.setData("name",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.MaxValue.pack()
		res += self.name.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.MaxValue.unpack(data[index:])
		index += self.name.unpack(data[index:])
		return index
class ClientQuestTemplateScriptInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("pathCode",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.pathCode.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.pathCode.unpack(data[index:])
		return index
class CraftTargetInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("lable",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.lable.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.lable.unpack(data[index:])
		return index
class ElixirUIDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("LinkPos",DWORD())
		self.setData("UnUseTexture",String())
		self.setData("Texture",String())
	def pack(self):
		res = ""
		res += self.LinkPos.pack()
		res += self.UnUseTexture.pack()
		res += self.Texture.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.LinkPos.unpack(data[index:])
		index += self.UnUseTexture.unpack(data[index:])
		index += self.Texture.unpack(data[index:])
		return index
class ElixirUIInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Detail",VECTOR(ElixirUIDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Detail.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Detail.unpack(data[index:])
		return index
class GiveClientQuestTemplateScriptInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("pathCode",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.pathCode.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.pathCode.unpack(data[index:])
		return index
class RoadPoint(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("x",DWORD())
		self.setData("y",DWORD())
	def pack(self):
		res = ""
		res += self.x.pack()
		res += self.y.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.x.unpack(data[index:])
		index += self.y.unpack(data[index:])
		return index
class LinkBlockDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("FromBlock",DWORD())
		self.setData("DestBlock",DWORD())
		self.setData("RoadPointPos",RoadPoint())
	def pack(self):
		res = ""
		res += self.FromBlock.pack()
		res += self.DestBlock.pack()
		res += self.RoadPointPos.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.FromBlock.unpack(data[index:])
		index += self.DestBlock.unpack(data[index:])
		index += self.RoadPointPos.unpack(data[index:])
		return index
class LinkBlockInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Name",ItemName())
		self.setData("Detail",VECTOR(LinkBlockDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Name.pack()
		res += self.Detail.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Name.unpack(data[index:])
		index += self.Detail.unpack(data[index:])
		return index
class MapEnterRuleInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("type",DWORD())
		self.setData("value",LONG())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.type.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.type.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class NPCTemplateInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",INT())
		self.setData("name",String())
		self.setData("level",INT())
		self.setData("unit_class",INT())
		self.setData("RoleFuncton",VECTOR(INT))
		self.setData("fix_affixgroups",VECTOR(INT))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.level.pack()
		res += self.unit_class.pack()
		res += self.RoleFuncton.pack()
		res += self.fix_affixgroups.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.level.unpack(data[index:])
		index += self.unit_class.unpack(data[index:])
		index += self.RoleFuncton.unpack(data[index:])
		index += self.fix_affixgroups.unpack(data[index:])
		return index
class QuestCategory(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("category",String())
		self.setData("categoryname",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.category.pack()
		res += self.categoryname.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.category.unpack(data[index:])
		index += self.categoryname.unpack(data[index:])
		return index
class QuestParamInfo_C(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramID",WORD())
		self.setData("datas",VECTOR(TinyBinary))
	def pack(self):
		res = ""
		res += self.paramID.pack()
		res += self.datas.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramID.unpack(data[index:])
		index += self.datas.unpack(data[index:])
		return index
class QuestTemplateInfo_C(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("index",WORD())
		self.setData("id",WORD())
		self.setData("params",VECTOR(QuestParamInfo_C))
	def pack(self):
		res = ""
		res += self.index.pack()
		res += self.id.pack()
		res += self.params.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.index.unpack(data[index:])
		index += self.id.unpack(data[index:])
		index += self.params.unpack(data[index:])
		return index
class QuestTemplateGroupInfo_C(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",BYTE())
		self.setData("templates",VECTOR(QuestTemplateInfo_C))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.templates.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.templates.unpack(data[index:])
		return index
class QuestTemplateGroupInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("templateGroups",VECTOR(QuestTemplateGroupInfo_C))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.templateGroups.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.templateGroups.unpack(data[index:])
		return index
class QuestTemplateScriptInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("pathCode",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.pathCode.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.pathCode.unpack(data[index:])
		return index
class RoleFunctionToHeadIcon(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Icon",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Icon.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Icon.unpack(data[index:])
		return index
class SNSQuestIssueCostRate(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Rate",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Rate.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Rate.unpack(data[index:])
		return index
class ServerCode(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("stringid",DWORD())
		self.setData("tag",VECTOR(WORD))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.stringid.pack()
		res += self.tag.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.stringid.unpack(data[index:])
		index += self.tag.unpack(data[index:])
		return index
class ShopFunction(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("shop",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.shop.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.shop.unpack(data[index:])
		return index
class MapAIRuleGroupInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Name",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Name.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Name.unpack(data[index:])
		return index
class ArtWordInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Str",String())
		self.setData("Width",DWORD())
		self.setData("Source",FilePath())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Str.pack()
		res += self.Width.pack()
		res += self.Source.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Str.unpack(data[index:])
		index += self.Width.unpack(data[index:])
		index += self.Source.unpack(data[index:])
		return index
class AvatarAnimDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("modelpart",BYTE())
		self.setData("sex",BYTE())
		self.setData("fightermodel",ObjName())
		self.setData("magicmodel",ObjName())
		self.setData("taoishtmodel",ObjName())
		self.setData("material",String())
	def pack(self):
		res = ""
		res += self.modelpart.pack()
		res += self.sex.pack()
		res += self.fightermodel.pack()
		res += self.magicmodel.pack()
		res += self.taoishtmodel.pack()
		res += self.material.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.modelpart.unpack(data[index:])
		index += self.sex.unpack(data[index:])
		index += self.fightermodel.unpack(data[index:])
		index += self.magicmodel.unpack(data[index:])
		index += self.taoishtmodel.unpack(data[index:])
		index += self.material.unpack(data[index:])
		return index
class AvatarAnimInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",ObjName())
		self.setData("detail",VECTOR(AvatarAnimDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.detail.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.detail.unpack(data[index:])
		return index
class AvatarDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("roleclass",DWORD())
		self.setData("modelpart",BYTE())
		self.setData("sex",BYTE())
		self.setData("skeleton",BYTE())
		self.setData("activeAdrons",VECTOR(ObjName))
		self.setData("model",ObjName())
		self.setData("socket",ObjName())
		self.setData("overrideMats",VECTOR(ObjName))
		self.setData("soundtype",String())
		self.setData("soundmaterial",DWORD())
	def pack(self):
		res = ""
		res += self.roleclass.pack()
		res += self.modelpart.pack()
		res += self.sex.pack()
		res += self.skeleton.pack()
		res += self.activeAdrons.pack()
		res += self.model.pack()
		res += self.socket.pack()
		res += self.overrideMats.pack()
		res += self.soundtype.pack()
		res += self.soundmaterial.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.roleclass.unpack(data[index:])
		index += self.modelpart.unpack(data[index:])
		index += self.sex.unpack(data[index:])
		index += self.skeleton.unpack(data[index:])
		index += self.activeAdrons.unpack(data[index:])
		index += self.model.unpack(data[index:])
		index += self.socket.unpack(data[index:])
		index += self.overrideMats.unpack(data[index:])
		index += self.soundtype.unpack(data[index:])
		index += self.soundmaterial.unpack(data[index:])
		return index
class AvatarInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",ObjName())
		self.setData("category",ObjName())
		self.setData("detail",VECTOR(AvatarDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.category.pack()
		res += self.detail.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.category.unpack(data[index:])
		index += self.detail.unpack(data[index:])
		return index
class AvatarSoundId(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("avatarType",DWORD())
		self.setData("level",DWORD())
	def pack(self):
		res = ""
		res += self.avatarType.pack()
		res += self.level.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.avatarType.unpack(data[index:])
		index += self.level.unpack(data[index:])
		return index
class EquipAvatarSound(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",AvatarSoundId())
		self.setData("sound",ObjName())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.sound.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.sound.unpack(data[index:])
		return index
class AdronBoneId(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("Gender",DWORD())
		self.setData("Avatar",DWORD())
	def pack(self):
		res = ""
		res += self.Gender.pack()
		res += self.Avatar.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.Gender.unpack(data[index:])
		index += self.Avatar.unpack(data[index:])
		return index
class AdronBones(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",AdronBoneId())
		self.setData("Bones",VECTOR(ObjName))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Bones.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Bones.unpack(data[index:])
		return index
class AnimName(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Name",ObjName())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Name.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Name.unpack(data[index:])
		return index
class AnimSetID(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("AvatarID",DWORD())
		self.setData("WeaponType",INT())
		self.setData("ModelID",DWORD())
		self.setData("StateID",DWORD())
	def pack(self):
		res = ""
		res += self.AvatarID.pack()
		res += self.WeaponType.pack()
		res += self.ModelID.pack()
		res += self.StateID.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.AvatarID.unpack(data[index:])
		index += self.WeaponType.unpack(data[index:])
		index += self.ModelID.unpack(data[index:])
		index += self.StateID.unpack(data[index:])
		return index
class AnimSets(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",AnimSetID())
		self.setData("AnimSet",ObjName())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.AnimSet.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.AnimSet.unpack(data[index:])
		return index
class FirstClassAnims(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",AnimSetID())
		self.setData("Animations",VECTOR(AnimName))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Animations.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Animations.unpack(data[index:])
		return index
class WeaponTypes(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("WeaponType",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.WeaponType.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.WeaponType.unpack(data[index:])
		return index
class Vector3D(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("X",FLOAT())
		self.setData("Y",FLOAT())
		self.setData("Z",FLOAT())
	def pack(self):
		res = ""
		res += self.X.pack()
		res += self.Y.pack()
		res += self.Z.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.X.unpack(data[index:])
		index += self.Y.unpack(data[index:])
		index += self.Z.unpack(data[index:])
		return index
class VectorParam(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("ParaName",ObjName())
		self.setData("Value",Vector3D())
	def pack(self):
		res = ""
		res += self.ParaName.pack()
		res += self.Value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.ParaName.unpack(data[index:])
		index += self.Value.unpack(data[index:])
		return index
class ScalarParam(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("ParaName",ObjName())
		self.setData("Value",FLOAT())
	def pack(self):
		res = ""
		res += self.ParaName.pack()
		res += self.Value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.ParaName.unpack(data[index:])
		index += self.Value.unpack(data[index:])
		return index
class AppearanceID(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("AvatarID",DWORD())
		self.setData("QualityClass",DWORD())
		self.setData("Grade",DWORD())
	def pack(self):
		res = ""
		res += self.AvatarID.pack()
		res += self.QualityClass.pack()
		res += self.Grade.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.AvatarID.unpack(data[index:])
		index += self.QualityClass.unpack(data[index:])
		index += self.Grade.unpack(data[index:])
		return index
class AppearanceEffect(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Model",ObjName())
		self.setData("Material",ObjName())
		self.setData("Scale3D",Vector3D())
		self.setData("Offset3D",Vector3D())
		self.setData("Vectors",VECTOR(VectorParam))
		self.setData("Scalars",VECTOR(ScalarParam))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Model.pack()
		res += self.Material.pack()
		res += self.Scale3D.pack()
		res += self.Offset3D.pack()
		res += self.Vectors.pack()
		res += self.Scalars.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Model.unpack(data[index:])
		index += self.Material.unpack(data[index:])
		index += self.Scale3D.unpack(data[index:])
		index += self.Offset3D.unpack(data[index:])
		index += self.Vectors.unpack(data[index:])
		index += self.Scalars.unpack(data[index:])
		return index
class Appearance(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",AppearanceID())
		self.setData("AppearanceEffectID",DWORD())
		self.setData("WeaponModel",ObjName())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.AppearanceEffectID.pack()
		res += self.WeaponModel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.AppearanceEffectID.unpack(data[index:])
		index += self.WeaponModel.unpack(data[index:])
		return index
class AwardItem_BODY_Item(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("generateID",DWORD())
		self.setData("count",DWORD())
		self.setData("forceBind",BYTE())
	def pack(self):
		res = ""
		res += self.generateID.pack()
		res += self.count.pack()
		res += self.forceBind.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.generateID.unpack(data[index:])
		index += self.count.unpack(data[index:])
		index += self.forceBind.unpack(data[index:])
		return index
class AwardItem_BODY_Rune(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("tid",DWORD())
		self.setData("count",DWORD())
	def pack(self):
		res = ""
		res += self.tid.pack()
		res += self.count.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.tid.unpack(data[index:])
		index += self.count.unpack(data[index:])
		return index
class AwardItem_BODY_Money(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("moneyType",DWORD())
		self.setData("valueMin",DWORD())
		self.setData("valueMax",DWORD())
	def pack(self):
		res = ""
		res += self.moneyType.pack()
		res += self.valueMin.pack()
		res += self.valueMax.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.moneyType.unpack(data[index:])
		index += self.valueMin.unpack(data[index:])
		index += self.valueMax.unpack(data[index:])
		return index
class AwardItem_BODY(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("item",AwardItem_BODY_Item())
		self.setData("rune",AwardItem_BODY_Rune())
		self.setData("money",AwardItem_BODY_Money())
class AwardItem(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("type",AwardItemType())
		self.setData("body",AwardItem_BODY())
	def pack(self):
		res = ""
		res += self.type.pack()
		if self.type==AIT_ITEM:
			res += self.body.item.pack()
		if self.type==AIT_RUNE:
			res += self.body.rune.pack()
		if self.type==AIT_MONEY:
			res += self.body.money.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.type.unpack(data[index:])
		if self.type==AIT_ITEM:
			index += self.body.item.unpack(data[index:])
		if self.type==AIT_RUNE:
			index += self.body.rune.unpack(data[index:])
		if self.type==AIT_MONEY:
			index += self.body.money.unpack(data[index:])
		return index
class AwardItemDesc_BODY_Item(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("generateID",ItemGenerateID())
		self.setData("count",DWORD())
		self.setData("forceBind",BYTE())
	def pack(self):
		res = ""
		res += self.generateID.pack()
		res += self.count.pack()
		res += self.forceBind.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.generateID.unpack(data[index:])
		index += self.count.unpack(data[index:])
		index += self.forceBind.unpack(data[index:])
		return index
class AwardItemDesc_BODY_Rune(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("tid",DWORD())
		self.setData("count",DWORD())
	def pack(self):
		res = ""
		res += self.tid.pack()
		res += self.count.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.tid.unpack(data[index:])
		index += self.count.unpack(data[index:])
		return index
class AwardItemDesc_BODY_Money(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("money",MoneyInfo())
	def pack(self):
		res = ""
		res += self.money.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.money.unpack(data[index:])
		return index
class AwardItemDesc_BODY(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("item",AwardItemDesc_BODY_Item())
		self.setData("rune",AwardItemDesc_BODY_Rune())
		self.setData("money",AwardItemDesc_BODY_Money())
class AwardItemDesc(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("type",AwardItemType())
		self.setData("body",AwardItemDesc_BODY())
	def pack(self):
		res = ""
		res += self.type.pack()
		if self.type==AIT_ITEM:
			res += self.body.item.pack()
		if self.type==AIT_RUNE:
			res += self.body.rune.pack()
		if self.type==AIT_MONEY:
			res += self.body.money.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.type.unpack(data[index:])
		if self.type==AIT_ITEM:
			index += self.body.item.unpack(data[index:])
		if self.type==AIT_RUNE:
			index += self.body.rune.unpack(data[index:])
		if self.type==AIT_MONEY:
			index += self.body.money.unpack(data[index:])
		return index
class AwardGroupRecord(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("award_items",AwardItemVec())
		self.setData("hit_prob",DWORD())
		self.setData("base_prob",DWORD())
	def pack(self):
		res = ""
		res += self.award_items.pack()
		res += self.hit_prob.pack()
		res += self.base_prob.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.award_items.unpack(data[index:])
		index += self.hit_prob.unpack(data[index:])
		index += self.base_prob.unpack(data[index:])
		return index
class AwardGroupInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("code",AwardGroupCode())
		self.setData("name",AwardGroupName())
		self.setData("group_recs",AwardGroupRecordVec())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.code.pack()
		res += self.name.pack()
		res += self.group_recs.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.code.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.group_recs.unpack(data[index:])
		return index
class AwardTableRecord(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("group_id",DWORD())
		self.setData("ir_prob",DWORD())
	def pack(self):
		res = ""
		res += self.group_id.pack()
		res += self.ir_prob.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.group_id.unpack(data[index:])
		index += self.ir_prob.unpack(data[index:])
		return index
class AwardTableInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("code",AwardTableCode())
		self.setData("name",AwardTableName())
		self.setData("table_recs",AwardTableRecordVec())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.code.pack()
		res += self.name.pack()
		res += self.table_recs.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.code.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.table_recs.unpack(data[index:])
		return index
class TerrainRelativeAttrib(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("value",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class BlockStyleInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("terrainRelativeAttribs",VECTOR(TerrainRelativeAttrib))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.terrainRelativeAttribs.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.terrainRelativeAttribs.unpack(data[index:])
		return index
class ClientQuestInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("name",String())
		self.setData("levelLimit",WORD())
		self.setData("bRepeat",WORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.levelLimit.pack()
		res += self.bRepeat.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.levelLimit.unpack(data[index:])
		index += self.bRepeat.unpack(data[index:])
		return index
class ClientQuestStepInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("templateGroups",VECTOR(QuestTemplateGroupInfo_C))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.templateGroups.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.templateGroups.unpack(data[index:])
		return index
class CreateRoleInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("UIStyle",String())
		self.setData("describing",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.UIStyle.pack()
		res += self.describing.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.UIStyle.unpack(data[index:])
		index += self.describing.unpack(data[index:])
		return index
class UICursorTypeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("HWRes",ObjPath())
		self.setData("SWRes",ObjPath())
		self.setData("typeName",String())
		self.setData("Priority",INT())
		self.setData("clearStyleList",VECTOR(DWORD))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.HWRes.pack()
		res += self.SWRes.pack()
		res += self.typeName.pack()
		res += self.Priority.pack()
		res += self.clearStyleList.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.HWRes.unpack(data[index:])
		index += self.SWRes.unpack(data[index:])
		index += self.typeName.unpack(data[index:])
		index += self.Priority.unpack(data[index:])
		index += self.clearStyleList.unpack(data[index:])
		return index
class DefaultAvatarInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("roleclass",DWORD())
		self.setData("gender",BYTE())
		self.setData("defaultskeletalmesh",ObjName())
		self.setData("face",DWORD())
		self.setData("head",DWORD())
		self.setData("body",DWORD())
		self.setData("leftwrist",DWORD())
		self.setData("rightwrist",DWORD())
		self.setData("leg",DWORD())
		self.setData("foot",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.roleclass.pack()
		res += self.gender.pack()
		res += self.defaultskeletalmesh.pack()
		res += self.face.pack()
		res += self.head.pack()
		res += self.body.pack()
		res += self.leftwrist.pack()
		res += self.rightwrist.pack()
		res += self.leg.pack()
		res += self.foot.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.roleclass.unpack(data[index:])
		index += self.gender.unpack(data[index:])
		index += self.defaultskeletalmesh.unpack(data[index:])
		index += self.face.unpack(data[index:])
		index += self.head.unpack(data[index:])
		index += self.body.unpack(data[index:])
		index += self.leftwrist.unpack(data[index:])
		index += self.rightwrist.unpack(data[index:])
		index += self.leg.unpack(data[index:])
		index += self.foot.unpack(data[index:])
		return index
class EquipmentAttrInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("attrType",DWORD())
		self.setData("min",WORD())
		self.setData("max",WORD())
	def pack(self):
		res = ""
		res += self.attrType.pack()
		res += self.min.pack()
		res += self.max.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.attrType.unpack(data[index:])
		index += self.min.unpack(data[index:])
		index += self.max.unpack(data[index:])
		return index
class EquipmentEnhanceInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("attrType",DWORD())
		self.setData("enhanced",WORD())
	def pack(self):
		res = ""
		res += self.attrType.pack()
		res += self.enhanced.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.attrType.unpack(data[index:])
		index += self.enhanced.unpack(data[index:])
		return index
class EquipmentInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("unit_gender",DWORD())
		self.setData("unit_classes",DWORD())
		self.setData("part",DWORD())
		self.setData("aid",DWORD())
		self.setData("fix_affixgroups",VECTOR(DWORD))
		self.setData("MaxDurability",DWORD())
		self.setData("mainattribute",VECTOR(DWORD))
		self.setData("equipLevel",DWORD())
		self.setData("attrInfos",VECTOR(EquipmentAttrInfo))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.unit_gender.pack()
		res += self.unit_classes.pack()
		res += self.part.pack()
		res += self.aid.pack()
		res += self.fix_affixgroups.pack()
		res += self.MaxDurability.pack()
		res += self.mainattribute.pack()
		res += self.equipLevel.pack()
		res += self.attrInfos.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.unit_gender.unpack(data[index:])
		index += self.unit_classes.unpack(data[index:])
		index += self.part.unpack(data[index:])
		index += self.aid.unpack(data[index:])
		index += self.fix_affixgroups.unpack(data[index:])
		index += self.MaxDurability.unpack(data[index:])
		index += self.mainattribute.unpack(data[index:])
		index += self.equipLevel.unpack(data[index:])
		index += self.attrInfos.unpack(data[index:])
		return index
class ForbiddenStringInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("item",String())
		self.setData("isRegExp",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.item.pack()
		res += self.isRegExp.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.item.unpack(data[index:])
		index += self.isRegExp.unpack(data[index:])
		return index
class QuestParam(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramID",WORD())
		self.setData("datas",VECTOR(TinyBinary))
	def pack(self):
		res = ""
		res += self.paramID.pack()
		res += self.datas.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramID.unpack(data[index:])
		index += self.datas.unpack(data[index:])
		return index
class QuestTemplate(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("index",WORD())
		self.setData("id",WORD())
		self.setData("params",VECTOR(QuestParam))
	def pack(self):
		res = ""
		res += self.index.pack()
		res += self.id.pack()
		res += self.params.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.index.unpack(data[index:])
		index += self.id.unpack(data[index:])
		index += self.params.unpack(data[index:])
		return index
class GiveClientQuestStepInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("templates",VECTOR(QuestTemplate))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.templates.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.templates.unpack(data[index:])
		return index
class CompetitionLua(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("LuaName",String())
	def pack(self):
		res = ""
		res += self.LuaName.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.LuaName.unpack(data[index:])
		return index
class RepairConsume(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("repairMoneyType",INT())
		self.setData("repairPriceArithmetic",INT())
	def pack(self):
		res = ""
		res += self.repairMoneyType.pack()
		res += self.repairPriceArithmetic.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.repairMoneyType.unpack(data[index:])
		index += self.repairPriceArithmetic.unpack(data[index:])
		return index
class GlobalConfigInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("TradeDistanceLimit",DWORD())
		self.setData("TradeInviteTimeLimit",DWORD())
		self.setData("TradeItemLimit",DWORD())
		self.setData("TradeInviteCoolDownLimit",DWORD())
		self.setData("GuildCreateMoneyType",DWORD())
		self.setData("GuildCreateMoneyNum",DWORD())
		self.setData("GuildCreateItemType",VECTOR(DWORD))
		self.setData("GuildCreateItemNum",VECTOR(DWORD))
		self.setData("GuildCreateCharacterLevel",DWORD())
		self.setData("StallMapInfo",DWORD())
		self.setData("GuildWarTipsTimeInfo",DWORD())
		self.setData("GuildWarAttackTimeInfo",DWORD())
		self.setData("GuildWarAttackHelperTimeInfo",DWORD())
		self.setData("shitListPackageSize",DWORD())
		self.setData("WormHoleCountDownInterval",DWORD())
		self.setData("WormHoleCountDownLeast",DWORD())
		self.setData("WormHoleCountDownDanger",DWORD())
		self.setData("WormHoleCountDownWarning",DWORD())
		self.setData("WormHoleCountDownComic",DWORD())
		self.setData("ShutDownPer1",DWORD())
		self.setData("ShutDownPer2",DWORD())
		self.setData("ShutDownPer3",DWORD())
		self.setData("ShutDownPer4",DWORD())
		self.setData("LoadingPICOff",DWORD())
		self.setData("LoadingLOGOOff",DWORD())
		self.setData("GuessSkillName",String())
		self.setData("CharNameLoc",DWORD())
		self.setData("GuildNameLoc",LONG())
		self.setData("QuestTraceMax",DWORD())
		self.setData("NormalRoleNameColor",String())
		self.setData("RedRoleNameColor",String())
		self.setData("NormalPetNameColor",String())
		self.setData("GuildWarSelfNameColor",String())
		self.setData("GuildWarMidNameColor",String())
		self.setData("AttackNameColor",String())
		self.setData("FriendNPCNameColor",String())
		self.setData("DeadRoleNameColor",String())
		self.setData("SelfNameColor",String())
		self.setData("TeamMateNameColor",String())
		self.setData("PassivityNameColor",String())
		self.setData("GuildNameColor",String())
		self.setData("InitiativeNameColor",String())
		self.setData("TempCompetitionLua",VECTOR(CompetitionLua))
		self.setData("EquipBreakPercent",DWORD())
		self.setData("JumpHindLen",DWORD())
		self.setData("JumpHintLevel",DWORD())
		self.setData("normallyRepair",RepairConsume())
		self.setData("carefullyRepair",RepairConsume())
		self.setData("JumpHintEffectName",String())
		self.setData("PersonalProductName",String())
		self.setData("NoWeaponAttackRange",DWORD())
		self.setData("ItemDecomposeLevel",DWORD())
		self.setData("globalReclaimItemTradeCountLimit",DWORD())
		self.setData("StallLevel",DWORD())
		self.setData("StockUnit",DWORD())
		self.setData("ExtraShopLevel",DWORD())
		self.setData("AgonalLife",DWORD())
		self.setData("Weibo_QuestLevelRangeForFilter",DWORD())
		self.setData("RedNameInterval",DWORD())
		self.setData("KillPointDecreaseInterval",DWORD())
		self.setData("KillPointDecreaseValue",DWORD())
		self.setData("DecompseConsumeType",DWORD())
		self.setData("RedNameSound",String())
		self.setData("NameShowHeadOffSet",LONG())
		self.setData("NameShowMidOffSet",LONG())
		self.setData("NameShowFeetOffSet",LONG())
		self.setData("NameShowHeadNoOffSet",LONG())
		self.setData("DecomposeLevelLimit",DWORD())
		self.setData("KillPersonPoint",DWORD())
		self.setData("KillPersonPointTime",DWORD())
		self.setData("SamePlatJumpHintLen",DWORD())
		self.setData("AcceptQuestDLevel",DWORD())
		self.setData("LumberSkillName",String())
		self.setData("MiningSkillName",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.TradeDistanceLimit.pack()
		res += self.TradeInviteTimeLimit.pack()
		res += self.TradeItemLimit.pack()
		res += self.TradeInviteCoolDownLimit.pack()
		res += self.GuildCreateMoneyType.pack()
		res += self.GuildCreateMoneyNum.pack()
		res += self.GuildCreateItemType.pack()
		res += self.GuildCreateItemNum.pack()
		res += self.GuildCreateCharacterLevel.pack()
		res += self.StallMapInfo.pack()
		res += self.GuildWarTipsTimeInfo.pack()
		res += self.GuildWarAttackTimeInfo.pack()
		res += self.GuildWarAttackHelperTimeInfo.pack()
		res += self.shitListPackageSize.pack()
		res += self.WormHoleCountDownInterval.pack()
		res += self.WormHoleCountDownLeast.pack()
		res += self.WormHoleCountDownDanger.pack()
		res += self.WormHoleCountDownWarning.pack()
		res += self.WormHoleCountDownComic.pack()
		res += self.ShutDownPer1.pack()
		res += self.ShutDownPer2.pack()
		res += self.ShutDownPer3.pack()
		res += self.ShutDownPer4.pack()
		res += self.LoadingPICOff.pack()
		res += self.LoadingLOGOOff.pack()
		res += self.GuessSkillName.pack()
		res += self.CharNameLoc.pack()
		res += self.GuildNameLoc.pack()
		res += self.QuestTraceMax.pack()
		res += self.NormalRoleNameColor.pack()
		res += self.RedRoleNameColor.pack()
		res += self.NormalPetNameColor.pack()
		res += self.GuildWarSelfNameColor.pack()
		res += self.GuildWarMidNameColor.pack()
		res += self.AttackNameColor.pack()
		res += self.FriendNPCNameColor.pack()
		res += self.DeadRoleNameColor.pack()
		res += self.SelfNameColor.pack()
		res += self.TeamMateNameColor.pack()
		res += self.PassivityNameColor.pack()
		res += self.GuildNameColor.pack()
		res += self.InitiativeNameColor.pack()
		res += self.TempCompetitionLua.pack()
		res += self.EquipBreakPercent.pack()
		res += self.JumpHindLen.pack()
		res += self.JumpHintLevel.pack()
		res += self.normallyRepair.pack()
		res += self.carefullyRepair.pack()
		res += self.JumpHintEffectName.pack()
		res += self.PersonalProductName.pack()
		res += self.NoWeaponAttackRange.pack()
		res += self.ItemDecomposeLevel.pack()
		res += self.globalReclaimItemTradeCountLimit.pack()
		res += self.StallLevel.pack()
		res += self.StockUnit.pack()
		res += self.ExtraShopLevel.pack()
		res += self.AgonalLife.pack()
		res += self.Weibo_QuestLevelRangeForFilter.pack()
		res += self.RedNameInterval.pack()
		res += self.KillPointDecreaseInterval.pack()
		res += self.KillPointDecreaseValue.pack()
		res += self.DecompseConsumeType.pack()
		res += self.RedNameSound.pack()
		res += self.NameShowHeadOffSet.pack()
		res += self.NameShowMidOffSet.pack()
		res += self.NameShowFeetOffSet.pack()
		res += self.NameShowHeadNoOffSet.pack()
		res += self.DecomposeLevelLimit.pack()
		res += self.KillPersonPoint.pack()
		res += self.KillPersonPointTime.pack()
		res += self.SamePlatJumpHintLen.pack()
		res += self.AcceptQuestDLevel.pack()
		res += self.LumberSkillName.pack()
		res += self.MiningSkillName.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.TradeDistanceLimit.unpack(data[index:])
		index += self.TradeInviteTimeLimit.unpack(data[index:])
		index += self.TradeItemLimit.unpack(data[index:])
		index += self.TradeInviteCoolDownLimit.unpack(data[index:])
		index += self.GuildCreateMoneyType.unpack(data[index:])
		index += self.GuildCreateMoneyNum.unpack(data[index:])
		index += self.GuildCreateItemType.unpack(data[index:])
		index += self.GuildCreateItemNum.unpack(data[index:])
		index += self.GuildCreateCharacterLevel.unpack(data[index:])
		index += self.StallMapInfo.unpack(data[index:])
		index += self.GuildWarTipsTimeInfo.unpack(data[index:])
		index += self.GuildWarAttackTimeInfo.unpack(data[index:])
		index += self.GuildWarAttackHelperTimeInfo.unpack(data[index:])
		index += self.shitListPackageSize.unpack(data[index:])
		index += self.WormHoleCountDownInterval.unpack(data[index:])
		index += self.WormHoleCountDownLeast.unpack(data[index:])
		index += self.WormHoleCountDownDanger.unpack(data[index:])
		index += self.WormHoleCountDownWarning.unpack(data[index:])
		index += self.WormHoleCountDownComic.unpack(data[index:])
		index += self.ShutDownPer1.unpack(data[index:])
		index += self.ShutDownPer2.unpack(data[index:])
		index += self.ShutDownPer3.unpack(data[index:])
		index += self.ShutDownPer4.unpack(data[index:])
		index += self.LoadingPICOff.unpack(data[index:])
		index += self.LoadingLOGOOff.unpack(data[index:])
		index += self.GuessSkillName.unpack(data[index:])
		index += self.CharNameLoc.unpack(data[index:])
		index += self.GuildNameLoc.unpack(data[index:])
		index += self.QuestTraceMax.unpack(data[index:])
		index += self.NormalRoleNameColor.unpack(data[index:])
		index += self.RedRoleNameColor.unpack(data[index:])
		index += self.NormalPetNameColor.unpack(data[index:])
		index += self.GuildWarSelfNameColor.unpack(data[index:])
		index += self.GuildWarMidNameColor.unpack(data[index:])
		index += self.AttackNameColor.unpack(data[index:])
		index += self.FriendNPCNameColor.unpack(data[index:])
		index += self.DeadRoleNameColor.unpack(data[index:])
		index += self.SelfNameColor.unpack(data[index:])
		index += self.TeamMateNameColor.unpack(data[index:])
		index += self.PassivityNameColor.unpack(data[index:])
		index += self.GuildNameColor.unpack(data[index:])
		index += self.InitiativeNameColor.unpack(data[index:])
		index += self.TempCompetitionLua.unpack(data[index:])
		index += self.EquipBreakPercent.unpack(data[index:])
		index += self.JumpHindLen.unpack(data[index:])
		index += self.JumpHintLevel.unpack(data[index:])
		index += self.normallyRepair.unpack(data[index:])
		index += self.carefullyRepair.unpack(data[index:])
		index += self.JumpHintEffectName.unpack(data[index:])
		index += self.PersonalProductName.unpack(data[index:])
		index += self.NoWeaponAttackRange.unpack(data[index:])
		index += self.ItemDecomposeLevel.unpack(data[index:])
		index += self.globalReclaimItemTradeCountLimit.unpack(data[index:])
		index += self.StallLevel.unpack(data[index:])
		index += self.StockUnit.unpack(data[index:])
		index += self.ExtraShopLevel.unpack(data[index:])
		index += self.AgonalLife.unpack(data[index:])
		index += self.Weibo_QuestLevelRangeForFilter.unpack(data[index:])
		index += self.RedNameInterval.unpack(data[index:])
		index += self.KillPointDecreaseInterval.unpack(data[index:])
		index += self.KillPointDecreaseValue.unpack(data[index:])
		index += self.DecompseConsumeType.unpack(data[index:])
		index += self.RedNameSound.unpack(data[index:])
		index += self.NameShowHeadOffSet.unpack(data[index:])
		index += self.NameShowMidOffSet.unpack(data[index:])
		index += self.NameShowFeetOffSet.unpack(data[index:])
		index += self.NameShowHeadNoOffSet.unpack(data[index:])
		index += self.DecomposeLevelLimit.unpack(data[index:])
		index += self.KillPersonPoint.unpack(data[index:])
		index += self.KillPersonPointTime.unpack(data[index:])
		index += self.SamePlatJumpHintLen.unpack(data[index:])
		index += self.AcceptQuestDLevel.unpack(data[index:])
		index += self.LumberSkillName.unpack(data[index:])
		index += self.MiningSkillName.unpack(data[index:])
		return index
class GridDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("gridId",INT())
		self.setData("gridType",INT())
		self.setData("itemId",DWORD())
	def pack(self):
		res = ""
		res += self.gridId.pack()
		res += self.gridType.pack()
		res += self.itemId.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.gridId.unpack(data[index:])
		index += self.gridType.unpack(data[index:])
		index += self.itemId.unpack(data[index:])
		return index
class InitShortCutBarInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("shortCurBar",VECTOR(GridDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.shortCurBar.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.shortCurBar.unpack(data[index:])
		return index
class InputKeyInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("keyName",String())
		self.setData("uiKeyName",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.keyName.pack()
		res += self.uiKeyName.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.keyName.unpack(data[index:])
		index += self.uiKeyName.unpack(data[index:])
		return index
class MoneyDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("value",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class ItemDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("tid",DWORD())
		self.setData("count",DWORD())
	def pack(self):
		res = ""
		res += self.tid.pack()
		res += self.count.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.tid.unpack(data[index:])
		index += self.count.unpack(data[index:])
		return index
class SuccessIntensifierDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("tid",DWORD())
		self.setData("count",DWORD())
	def pack(self):
		res = ""
		res += self.tid.pack()
		res += self.count.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.tid.unpack(data[index:])
		index += self.count.unpack(data[index:])
		return index
class DestroySuppressorDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("tid",DWORD())
		self.setData("count",DWORD())
	def pack(self):
		res = ""
		res += self.tid.pack()
		res += self.count.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.tid.unpack(data[index:])
		index += self.count.unpack(data[index:])
		return index
class ItemEnhanceConsumeInfoDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("moneyVec",VECTOR(MoneyDetail))
		self.setData("itemVec",VECTOR(ItemDetail))
		self.setData("successIntensifierVec",VECTOR(SuccessIntensifierDetail))
		self.setData("destroySuppressorVec",VECTOR(DestroySuppressorDetail))
	def pack(self):
		res = ""
		res += self.moneyVec.pack()
		res += self.itemVec.pack()
		res += self.successIntensifierVec.pack()
		res += self.destroySuppressorVec.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.moneyVec.unpack(data[index:])
		index += self.itemVec.unpack(data[index:])
		index += self.successIntensifierVec.unpack(data[index:])
		index += self.destroySuppressorVec.unpack(data[index:])
		return index
class ItemNormalEnhanceConsumeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("curEnhanceLevel",DWORD())
		self.setData("rec",ItemEnhanceConsumeInfoDetail())
	def pack(self):
		res = ""
		res += self.curEnhanceLevel.pack()
		res += self.rec.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.curEnhanceLevel.unpack(data[index:])
		index += self.rec.unpack(data[index:])
		return index
class ItemSpecEnhanceConsumeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("curEnhanceLevel",DWORD())
		self.setData("equipPart",DWORD())
		self.setData("rec",ItemEnhanceConsumeInfoDetail())
	def pack(self):
		res = ""
		res += self.curEnhanceLevel.pack()
		res += self.equipPart.pack()
		res += self.rec.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.curEnhanceLevel.unpack(data[index:])
		index += self.equipPart.unpack(data[index:])
		index += self.rec.unpack(data[index:])
		return index
class EnhanceFailDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("prob",DWORD())
		self.setData("targetEnhanceLevel",DWORD())
	def pack(self):
		res = ""
		res += self.prob.pack()
		res += self.targetEnhanceLevel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.prob.unpack(data[index:])
		index += self.targetEnhanceLevel.unpack(data[index:])
		return index
class ItemEnhanceProbDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipPart",DWORD())
		self.setData("curEnhanceLevel",DWORD())
		self.setData("baseSuccessProb",DWORD())
		self.setData("baseDestroyProb",DWORD())
		self.setData("baseFailProbs",VECTOR(EnhanceFailDetail))
	def pack(self):
		res = ""
		res += self.equipPart.pack()
		res += self.curEnhanceLevel.pack()
		res += self.baseSuccessProb.pack()
		res += self.baseDestroyProb.pack()
		res += self.baseFailProbs.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.equipPart.unpack(data[index:])
		index += self.curEnhanceLevel.unpack(data[index:])
		index += self.baseSuccessProb.unpack(data[index:])
		index += self.baseDestroyProb.unpack(data[index:])
		index += self.baseFailProbs.unpack(data[index:])
		return index
class ItemEnhancementInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("probRecs",VECTOR(ItemEnhanceProbDetail))
		self.setData("consumeRecsNor",VECTOR(ItemNormalEnhanceConsumeInfo))
		self.setData("consumeRecsSpec",VECTOR(ItemSpecEnhanceConsumeInfo))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.probRecs.pack()
		res += self.consumeRecsNor.pack()
		res += self.consumeRecsSpec.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.probRecs.unpack(data[index:])
		index += self.consumeRecsNor.unpack(data[index:])
		index += self.consumeRecsSpec.unpack(data[index:])
		return index
class ScaleDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("curEnhanceLevel",DWORD())
		self.setData("scale",DWORD())
	def pack(self):
		res = ""
		res += self.curEnhanceLevel.pack()
		res += self.scale.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.curEnhanceLevel.unpack(data[index:])
		index += self.scale.unpack(data[index:])
		return index
class AttrDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("attrType",DWORD())
		self.setData("scaleRecs",VECTOR(ScaleDetail))
	def pack(self):
		res = ""
		res += self.attrType.pack()
		res += self.scaleRecs.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.attrType.unpack(data[index:])
		index += self.scaleRecs.unpack(data[index:])
		return index
class EquipLevelDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipLevel",DWORD())
		self.setData("attrTypeScaleRecs",VECTOR(AttrDetail))
	def pack(self):
		res = ""
		res += self.equipLevel.pack()
		res += self.attrTypeScaleRecs.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.equipLevel.unpack(data[index:])
		index += self.attrTypeScaleRecs.unpack(data[index:])
		return index
class ItemEnhanceScaleInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("equipLevelScaleRecs",VECTOR(EquipLevelDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.equipLevelScaleRecs.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.equipLevelScaleRecs.unpack(data[index:])
		return index
class GemAttrRandGenArithmeticInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("attrType",BYTE())
		self.setData("index",BYTE())
	def pack(self):
		res = ""
		res += self.attrType.pack()
		res += self.index.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.attrType.unpack(data[index:])
		index += self.index.unpack(data[index:])
		return index
class EquipAttrRandGenArithmeticInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("attrType",BYTE())
		self.setData("index",BYTE())
	def pack(self):
		res = ""
		res += self.attrType.pack()
		res += self.index.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.attrType.unpack(data[index:])
		index += self.index.unpack(data[index:])
		return index
class ItemGenerateInfo_BODY_Equipment(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("isKaiFeng",BYTE())
		self.setData("qualityLevelID",DWORD())
		self.setData("affixGroups",VAR_ARRAY(DWORD,BYTE))
		self.setData("attrRandGenArithmetics",VAR_ARRAY(EquipAttrRandGenArithmeticInfo,BYTE))
		self.setData("durabilityLimitArithmetic",BYTE())
		self.setData("gemSocketCountArithmetic",BYTE())
	def pack(self):
		res = ""
		res += self.isKaiFeng.pack()
		res += self.qualityLevelID.pack()
		res += self.affixGroups.pack()
		res += self.attrRandGenArithmetics.pack()
		res += self.durabilityLimitArithmetic.pack()
		res += self.gemSocketCountArithmetic.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.isKaiFeng.unpack(data[index:])
		index += self.qualityLevelID.unpack(data[index:])
		index += self.affixGroups.unpack(data[index:])
		index += self.attrRandGenArithmetics.unpack(data[index:])
		index += self.durabilityLimitArithmetic.unpack(data[index:])
		index += self.gemSocketCountArithmetic.unpack(data[index:])
		return index
class ItemGenerateInfo_BODY_SNSQuest(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("isUnscramble",BYTE())
		self.setData("snsQuestTableID",DWORD())
	def pack(self):
		res = ""
		res += self.isUnscramble.pack()
		res += self.snsQuestTableID.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.isUnscramble.unpack(data[index:])
		index += self.snsQuestTableID.unpack(data[index:])
		return index
class ItemGenerateInfo_BODY_Gem(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("attrRandGenArithmetics",VAR_ARRAY(GemAttrRandGenArithmeticInfo,BYTE))
	def pack(self):
		res = ""
		res += self.attrRandGenArithmetics.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.attrRandGenArithmetics.unpack(data[index:])
		return index
class ItemGenerateInfo_BODY(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipment",ItemGenerateInfo_BODY_Equipment())
		self.setData("snsquest",ItemGenerateInfo_BODY_SNSQuest())
		self.setData("gem",ItemGenerateInfo_BODY_Gem())
class ItemGenerateInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("tid",DWORD())
		self.setData("TimeType",DWORD())
		self.setData("TimeValue",DWORD())
		self.setData("category",BYTE())
		self.setData("body",ItemGenerateInfo_BODY())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.tid.pack()
		res += self.TimeType.pack()
		res += self.TimeValue.pack()
		res += self.category.pack()
		if self.category==IC_GENERALEQUIP:
			res += self.body.equipment.pack()
		if self.category==IC_SNSQUEST:
			res += self.body.snsquest.pack()
		if self.category==IC_GEM:
			res += self.body.gem.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.tid.unpack(data[index:])
		index += self.TimeType.unpack(data[index:])
		index += self.TimeValue.unpack(data[index:])
		index += self.category.unpack(data[index:])
		if self.category==IC_GENERALEQUIP:
			index += self.body.equipment.unpack(data[index:])
		if self.category==IC_SNSQUEST:
			index += self.body.snsquest.unpack(data[index:])
		if self.category==IC_GEM:
			index += self.body.gem.unpack(data[index:])
		return index
class GuessExpInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipLevel",DWORD())
		self.setData("exp",DWORD())
	def pack(self):
		res = ""
		res += self.equipLevel.pack()
		res += self.exp.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.equipLevel.unpack(data[index:])
		index += self.exp.unpack(data[index:])
		return index
class GuessMoneyDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("value",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class GuessItemDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("tid",DWORD())
		self.setData("count",DWORD())
	def pack(self):
		res = ""
		res += self.tid.pack()
		res += self.count.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.tid.unpack(data[index:])
		index += self.count.unpack(data[index:])
		return index
class EquipKaiFengConsumeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("moneyVec",VECTOR(GuessMoneyDetail))
		self.setData("itemVec",VECTOR(GuessItemDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.moneyVec.pack()
		res += self.itemVec.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.moneyVec.unpack(data[index:])
		index += self.itemVec.unpack(data[index:])
		return index
class EquipGuessConsumeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("moneyVec",VECTOR(GuessMoneyDetail))
		self.setData("itemVec",VECTOR(GuessItemDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.moneyVec.pack()
		res += self.itemVec.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.moneyVec.unpack(data[index:])
		index += self.itemVec.unpack(data[index:])
		return index
class ItemResultDesc(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("LevelDesc",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.LevelDesc.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.LevelDesc.unpack(data[index:])
		return index
class ItemGuessTitle(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("GuessTitle",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.GuessTitle.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.GuessTitle.unpack(data[index:])
		return index
class ItemGuessInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("accuracy",DWORD())
		self.setData("canLvDown",DWORD())
		self.setData("expVec",VECTOR(GuessExpInfo))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.accuracy.pack()
		res += self.canLvDown.pack()
		res += self.expVec.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.accuracy.unpack(data[index:])
		index += self.canLvDown.unpack(data[index:])
		index += self.expVec.unpack(data[index:])
		return index
class WeaponInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramName",String())
		self.setData("paramValue",DWORD())
	def pack(self):
		res = ""
		res += self.paramName.pack()
		res += self.paramValue.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramName.unpack(data[index:])
		index += self.paramValue.unpack(data[index:])
		return index
class ItemMaterial(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("MaterialIndex",DWORD())
		self.setData("Material",String())
	def pack(self):
		res = ""
		res += self.MaterialIndex.pack()
		res += self.Material.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.MaterialIndex.unpack(data[index:])
		index += self.Material.unpack(data[index:])
		return index
class ItemInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("code",ItemName())
		self.setData("name",ItemName())
		self.setData("category",DWORD())
		self.setData("charge",DWORD())
		self.setData("bind_type",DWORD())
		self.setData("max_hold",DWORD())
		self.setData("max_stack",DWORD())
		self.setData("icon",ItemName())
		self.setData("talismanicon",ItemName())
		self.setData("rarity",DWORD())
		self.setData("baseLevel",DWORD())
		self.setData("dropmodel",String())
		self.setData("ModelParticle",String())
		self.setData("OverrideMats",VECTOR(ItemMaterial))
		self.setData("dropsound",String())
		self.setData("dropeffect",DWORD())
		self.setData("description",String())
		self.setData("specilizedescription",String())
		self.setData("soundtype",String())
		self.setData("soundmaterialtype",String())
		self.setData("weaponInfo",VECTOR(WeaponInfo))
		self.setData("forbidDrop",BYTE())
		self.setData("CustomType",VECTOR(DWORD))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.code.pack()
		res += self.name.pack()
		res += self.category.pack()
		res += self.charge.pack()
		res += self.bind_type.pack()
		res += self.max_hold.pack()
		res += self.max_stack.pack()
		res += self.icon.pack()
		res += self.talismanicon.pack()
		res += self.rarity.pack()
		res += self.baseLevel.pack()
		res += self.dropmodel.pack()
		res += self.ModelParticle.pack()
		res += self.OverrideMats.pack()
		res += self.dropsound.pack()
		res += self.dropeffect.pack()
		res += self.description.pack()
		res += self.specilizedescription.pack()
		res += self.soundtype.pack()
		res += self.soundmaterialtype.pack()
		res += self.weaponInfo.pack()
		res += self.forbidDrop.pack()
		res += self.CustomType.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.code.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.category.unpack(data[index:])
		index += self.charge.unpack(data[index:])
		index += self.bind_type.unpack(data[index:])
		index += self.max_hold.unpack(data[index:])
		index += self.max_stack.unpack(data[index:])
		index += self.icon.unpack(data[index:])
		index += self.talismanicon.unpack(data[index:])
		index += self.rarity.unpack(data[index:])
		index += self.baseLevel.unpack(data[index:])
		index += self.dropmodel.unpack(data[index:])
		index += self.ModelParticle.unpack(data[index:])
		index += self.OverrideMats.unpack(data[index:])
		index += self.dropsound.unpack(data[index:])
		index += self.dropeffect.unpack(data[index:])
		index += self.description.unpack(data[index:])
		index += self.specilizedescription.unpack(data[index:])
		index += self.soundtype.unpack(data[index:])
		index += self.soundmaterialtype.unpack(data[index:])
		index += self.weaponInfo.unpack(data[index:])
		index += self.forbidDrop.unpack(data[index:])
		index += self.CustomType.unpack(data[index:])
		return index
class EquipGemColor(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("equipPart",DWORD())
		self.setData("color",DWORD())
		self.setData("socketNum",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.equipPart.pack()
		res += self.color.pack()
		res += self.socketNum.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.equipPart.unpack(data[index:])
		index += self.color.unpack(data[index:])
		index += self.socketNum.unpack(data[index:])
		return index
class GemAttrInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("attrType",DWORD())
		self.setData("min",WORD())
		self.setData("max",WORD())
	def pack(self):
		res = ""
		res += self.attrType.pack()
		res += self.min.pack()
		res += self.max.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.attrType.unpack(data[index:])
		index += self.min.unpack(data[index:])
		index += self.max.unpack(data[index:])
		return index
class GemItemInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("equipLevelMin",DWORD())
		self.setData("color",DWORD())
		self.setData("attrInfos",VECTOR(GemAttrInfo))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.equipLevelMin.pack()
		res += self.color.pack()
		res += self.attrInfos.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.equipLevelMin.unpack(data[index:])
		index += self.color.unpack(data[index:])
		index += self.attrInfos.unpack(data[index:])
		return index
class EquipQualityAttrRange_BODY_LJFeel(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("min",WORD())
		self.setData("max",WORD())
	def pack(self):
		res = ""
		res += self.min.pack()
		res += self.max.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.min.unpack(data[index:])
		index += self.max.unpack(data[index:])
		return index
class EquipQualityAttrRange_BODY_LJ2JPFeel(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("min",WORD())
		self.setData("max",WORD())
	def pack(self):
		res = ""
		res += self.min.pack()
		res += self.max.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.min.unpack(data[index:])
		index += self.max.unpack(data[index:])
		return index
class EquipQualityAttrRange_BODY(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("ljfeel",EquipQualityAttrRange_BODY_LJFeel())
		self.setData("lf2jpfeel",EquipQualityAttrRange_BODY_LJ2JPFeel())
class EquipQualityAttrRange(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("category",DWORD())
		self.setData("body",EquipQualityAttrRange_BODY())
	def pack(self):
		res = ""
		res += self.category.pack()
		if self.category==EQARC_LJFEEL:
			res += self.body.ljfeel.pack()
		if self.category==EQARC_LJ2JPFEEL:
			res += self.body.lf2jpfeel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.category.unpack(data[index:])
		if self.category==EQARC_LJFEEL:
			index += self.body.ljfeel.unpack(data[index:])
		if self.category==EQARC_LJ2JPFEEL:
			index += self.body.lf2jpfeel.unpack(data[index:])
		return index
class DecomposeDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("level",DWORD())
		self.setData("costMoney",DWORD())
	def pack(self):
		res = ""
		res += self.level.pack()
		res += self.costMoney.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.level.unpack(data[index:])
		index += self.costMoney.unpack(data[index:])
		return index
class EquipDecomposeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("awardGroup",VECTOR(DecomposeDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.awardGroup.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.awardGroup.unpack(data[index:])
		return index
class EquipQualityInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Color",String())
		self.setData("Texture",String())
		self.setData("decomposeAward",DWORD())
		self.setData("qualityClass",BYTE())
		self.setData("attrRange",EquipQualityAttrRange())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Color.pack()
		res += self.Texture.pack()
		res += self.decomposeAward.pack()
		res += self.qualityClass.pack()
		res += self.attrRange.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Color.unpack(data[index:])
		index += self.Texture.unpack(data[index:])
		index += self.decomposeAward.unpack(data[index:])
		index += self.qualityClass.unpack(data[index:])
		index += self.attrRange.unpack(data[index:])
		return index
class ItemSoundGroup(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("touchedID",DWORD())
		self.setData("soundname",String())
	def pack(self):
		res = ""
		res += self.touchedID.pack()
		res += self.soundname.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.touchedID.unpack(data[index:])
		index += self.soundname.unpack(data[index:])
		return index
class ItemSoundInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("touchedGroup",VECTOR(ItemSoundGroup))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.touchedGroup.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.touchedGroup.unpack(data[index:])
		return index
class JumpInfoID(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("MoveType",DWORD())
		self.setData("TerrainID",DWORD())
	def pack(self):
		res = ""
		res += self.MoveType.pack()
		res += self.TerrainID.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.MoveType.unpack(data[index:])
		index += self.TerrainID.unpack(data[index:])
		return index
class JumpInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",JumpInfoID())
		self.setData("JumpRangeBound",FLOAT())
		self.setData("PlatformJumpSourceHeightBoundLower",FLOAT())
		self.setData("PlatformJumpSourceHeightBoundUpper",FLOAT())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.JumpRangeBound.pack()
		res += self.PlatformJumpSourceHeightBoundLower.pack()
		res += self.PlatformJumpSourceHeightBoundUpper.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.JumpRangeBound.unpack(data[index:])
		index += self.PlatformJumpSourceHeightBoundLower.unpack(data[index:])
		index += self.PlatformJumpSourceHeightBoundUpper.unpack(data[index:])
		return index
class MapResourceInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("MapName",ObjPath())
		self.setData("effects",VECTOR(ObjPath))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.MapName.pack()
		res += self.effects.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.MapName.unpack(data[index:])
		index += self.effects.unpack(data[index:])
		return index
class MoneyClientRenderInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("quantityLevel",DWORD())
		self.setData("ModelParticle",ObjPath())
		self.setData("dropeffect",DWORD())
		self.setData("dropsound",ObjPath())
	def pack(self):
		res = ""
		res += self.quantityLevel.pack()
		res += self.ModelParticle.pack()
		res += self.dropeffect.pack()
		res += self.dropsound.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.quantityLevel.unpack(data[index:])
		index += self.ModelParticle.unpack(data[index:])
		index += self.dropeffect.unpack(data[index:])
		index += self.dropsound.unpack(data[index:])
		return index
class MoneyTypeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",ItemName())
		self.setData("rarity",DWORD())
		self.setData("renderInfo",VECTOR(MoneyClientRenderInfo))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.rarity.pack()
		res += self.renderInfo.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.rarity.unpack(data[index:])
		index += self.renderInfo.unpack(data[index:])
		return index
class FeatureData(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("affixID",DWORD())
		self.setData("affixName",String())
		self.setData("featureName",String())
		self.setData("featureType",DWORD())
		self.setData("data1",String())
		self.setData("data2",String())
		self.setData("data3",String())
	def pack(self):
		res = ""
		res += self.affixID.pack()
		res += self.affixName.pack()
		res += self.featureName.pack()
		res += self.featureType.pack()
		res += self.data1.pack()
		res += self.data2.pack()
		res += self.data3.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.affixID.unpack(data[index:])
		index += self.affixName.unpack(data[index:])
		index += self.featureName.unpack(data[index:])
		index += self.featureType.unpack(data[index:])
		index += self.data1.unpack(data[index:])
		index += self.data2.unpack(data[index:])
		index += self.data3.unpack(data[index:])
		return index
class MonsterFeatureInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("features",VECTOR(FeatureData))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.features.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.features.unpack(data[index:])
		return index
class MonsterSkillInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("effectRes",VECTOR(ObjPath))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.effectRes.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.effectRes.unpack(data[index:])
		return index
class MoveSpeedInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("spdpercent",INT())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.spdpercent.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.spdpercent.unpack(data[index:])
		return index
class SlotModel(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("Slot",ObjName())
		self.setData("Model",ObjPath())
	def pack(self):
		res = ""
		res += self.Slot.pack()
		res += self.Model.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.Slot.unpack(data[index:])
		index += self.Model.unpack(data[index:])
		return index
class BreakableJointInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("JointName",ObjName())
		self.setData("bCenterSliceJoint",BYTE())
	def pack(self):
		res = ""
		res += self.JointName.pack()
		res += self.bCenterSliceJoint.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.JointName.unpack(data[index:])
		index += self.bCenterSliceJoint.unpack(data[index:])
		return index
class NpcModel(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Name",ItemName())
		self.setData("Package",ObjName())
		self.setData("SkelMesh",ObjName())
		self.setData("AnimSet",ObjName())
		self.setData("Scale",FLOAT())
		self.setData("Stature",FLOAT())
		self.setData("StatureApp",FLOAT())
		self.setData("SlotModels",VECTOR(SlotModel))
		self.setData("OverrideMats",VECTOR(ObjPath))
		self.setData("DeathStyle",INT())
		self.setData("DeathImpulse",INT())
		self.setData("GoreSkeletalMesh",ObjName())
		self.setData("GorePhysicsAsset",ObjName())
		self.setData("GoreBreakableJoints",VECTOR(BreakableJointInfo))
		self.setData("bBreakable",INT())
		self.setData("iSelectScale",INT())
		self.setData("iRecoverMode",INT())
		self.setData("bAlwaysLoad",INT())
		self.setData("footStepStyle",INT())
		self.setData("IdleSound",ObjPath())
		self.setData("SpringPer",INT())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Name.pack()
		res += self.Package.pack()
		res += self.SkelMesh.pack()
		res += self.AnimSet.pack()
		res += self.Scale.pack()
		res += self.Stature.pack()
		res += self.StatureApp.pack()
		res += self.SlotModels.pack()
		res += self.OverrideMats.pack()
		res += self.DeathStyle.pack()
		res += self.DeathImpulse.pack()
		res += self.GoreSkeletalMesh.pack()
		res += self.GorePhysicsAsset.pack()
		res += self.GoreBreakableJoints.pack()
		res += self.bBreakable.pack()
		res += self.iSelectScale.pack()
		res += self.iRecoverMode.pack()
		res += self.bAlwaysLoad.pack()
		res += self.footStepStyle.pack()
		res += self.IdleSound.pack()
		res += self.SpringPer.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Name.unpack(data[index:])
		index += self.Package.unpack(data[index:])
		index += self.SkelMesh.unpack(data[index:])
		index += self.AnimSet.unpack(data[index:])
		index += self.Scale.unpack(data[index:])
		index += self.Stature.unpack(data[index:])
		index += self.StatureApp.unpack(data[index:])
		index += self.SlotModels.unpack(data[index:])
		index += self.OverrideMats.unpack(data[index:])
		index += self.DeathStyle.unpack(data[index:])
		index += self.DeathImpulse.unpack(data[index:])
		index += self.GoreSkeletalMesh.unpack(data[index:])
		index += self.GorePhysicsAsset.unpack(data[index:])
		index += self.GoreBreakableJoints.unpack(data[index:])
		index += self.bBreakable.unpack(data[index:])
		index += self.iSelectScale.unpack(data[index:])
		index += self.iRecoverMode.unpack(data[index:])
		index += self.bAlwaysLoad.unpack(data[index:])
		index += self.footStepStyle.unpack(data[index:])
		index += self.IdleSound.unpack(data[index:])
		index += self.SpringPer.unpack(data[index:])
		return index
class PetCommandInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("desc",String())
		self.setData("icon",ObjPath())
		self.setData("argumentType",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.desc.pack()
		res += self.icon.pack()
		res += self.argumentType.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.desc.unpack(data[index:])
		index += self.icon.unpack(data[index:])
		index += self.argumentType.unpack(data[index:])
		return index
class PlatformTypeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("PlatformResName",ObjName())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.PlatformResName.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.PlatformResName.unpack(data[index:])
		return index
class PlayerSkillResInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("effectRes",VECTOR(ObjPath))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.effectRes.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.effectRes.unpack(data[index:])
		return index
class ProcessListInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("processName",String())
		self.setData("processDesc",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.processName.pack()
		res += self.processDesc.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.processName.unpack(data[index:])
		index += self.processDesc.unpack(data[index:])
		return index
class ItemCostConsume(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("tid",DWORD())
		self.setData("count",DWORD())
	def pack(self):
		res = ""
		res += self.tid.pack()
		res += self.count.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.tid.unpack(data[index:])
		index += self.count.unpack(data[index:])
		return index
class MoneyInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("value",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class ConsumeItem_BODY(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("item",ItemCostConsume())
		self.setData("money",MoneyInfo())
class ConsumeItem(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("type",ConsumeItemType())
		self.setData("body",ConsumeItem_BODY())
	def pack(self):
		res = ""
		res += self.type.pack()
		if self.type==CIT_ITEM:
			res += self.body.item.pack()
		if self.type==CIT_MONEY:
			res += self.body.money.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.type.unpack(data[index:])
		if self.type==CIT_ITEM:
			index += self.body.item.unpack(data[index:])
		if self.type==CIT_MONEY:
			index += self.body.money.unpack(data[index:])
		return index
class ItemComposeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("itemGenID",DWORD())
		self.setData("count",BYTE())
		self.setData("bind",BYTE())
		self.setData("materials",VECTOR(ConsumeItem))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.itemGenID.pack()
		res += self.count.pack()
		res += self.bind.pack()
		res += self.materials.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.itemGenID.unpack(data[index:])
		index += self.count.unpack(data[index:])
		index += self.bind.unpack(data[index:])
		index += self.materials.unpack(data[index:])
		return index
class ProduceInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("materials",VECTOR(ConsumeItem))
		self.setData("products",DWORD())
		self.setData("consumeTime",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.materials.pack()
		res += self.products.pack()
		res += self.consumeTime.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.materials.unpack(data[index:])
		index += self.products.unpack(data[index:])
		index += self.consumeTime.unpack(data[index:])
		return index
class ProducibleCraftRecipeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("produceID",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.produceID.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.produceID.unpack(data[index:])
		return index
class ProducibleBlueprintInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("produceID",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.produceID.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.produceID.unpack(data[index:])
		return index
class FreeRecipeTypeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("typeName",String())
		self.setData("formulas",VECTOR(ObjName))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.typeName.pack()
		res += self.formulas.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.typeName.unpack(data[index:])
		index += self.formulas.unpack(data[index:])
		return index
class FreeComposeRecipeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("needLevel",DWORD())
		self.setData("RecipeType",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.needLevel.pack()
		res += self.RecipeType.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.needLevel.unpack(data[index:])
		index += self.RecipeType.unpack(data[index:])
		return index
class RecastPartConsumeDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipPart",DWORD())
		self.setData("consumeVec",VECTOR(ConsumeItem))
	def pack(self):
		res = ""
		res += self.equipPart.pack()
		res += self.consumeVec.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.equipPart.unpack(data[index:])
		index += self.consumeVec.unpack(data[index:])
		return index
class RecastLevelConsumeDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipLevel",DWORD())
		self.setData("consumesByEquipPart",VECTOR(RecastPartConsumeDetail))
	def pack(self):
		res = ""
		res += self.equipLevel.pack()
		res += self.consumesByEquipPart.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.equipLevel.unpack(data[index:])
		index += self.consumesByEquipPart.unpack(data[index:])
		return index
class RecastMethodConsumeDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("method",DWORD())
		self.setData("consumesByEquipLevel",VECTOR(RecastLevelConsumeDetail))
	def pack(self):
		res = ""
		res += self.method.pack()
		res += self.consumesByEquipLevel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.method.unpack(data[index:])
		index += self.consumesByEquipLevel.unpack(data[index:])
		return index
class ItemRecastAffixInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("consumesByMethod",VECTOR(RecastMethodConsumeDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.consumesByMethod.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.consumesByMethod.unpack(data[index:])
		return index
class ItemRecastAttrInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("consumesByEquipLevel",VECTOR(RecastLevelConsumeDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.consumesByEquipLevel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.consumesByEquipLevel.unpack(data[index:])
		return index
class QuestToSkillInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("skillLevel",DWORD())
		self.setData("skillID",DWORD())
		self.setData("zhaoUpID",DWORD())
		self.setData("zhaoUpLevelID",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.skillLevel.pack()
		res += self.skillID.pack()
		res += self.zhaoUpID.pack()
		res += self.zhaoUpLevelID.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.skillLevel.unpack(data[index:])
		index += self.skillID.unpack(data[index:])
		index += self.zhaoUpID.unpack(data[index:])
		index += self.zhaoUpLevelID.unpack(data[index:])
		return index
class QuestParam_C(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramID",WORD())
		self.setData("datas",VECTOR(TinyBinary))
	def pack(self):
		res = ""
		res += self.paramID.pack()
		res += self.datas.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramID.unpack(data[index:])
		index += self.datas.unpack(data[index:])
		return index
class QuestTemplate_C(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("index",WORD())
		self.setData("id",WORD())
		self.setData("params",VECTOR(QuestParam_C))
	def pack(self):
		res = ""
		res += self.index.pack()
		res += self.id.pack()
		res += self.params.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.index.unpack(data[index:])
		index += self.id.unpack(data[index:])
		index += self.params.unpack(data[index:])
		return index
class QuestClientData_C(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("type",BYTE())
		self.setData("value",TinyBinary())
	def pack(self):
		res = ""
		res += self.type.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.type.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class QuestTemplateGroup_C(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",BYTE())
		self.setData("templates",VECTOR(QuestTemplate_C))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.templates.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.templates.unpack(data[index:])
		return index
class QuestTemplateGroupTypeInfo_C(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("groups",VECTOR(QuestTemplateGroup_C))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.groups.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.groups.unpack(data[index:])
		return index
class QuestInfo_C(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("name",String())
		self.setData("levelLimit",WORD())
		self.setData("bRepeat",WORD())
		self.setData("bAllowTeamShared",WORD())
		self.setData("funcIssue",VECTOR(WORD))
		self.setData("funcSubmit",VECTOR(WORD))
		self.setData("clientDatas",VECTOR(QuestClientData_C))
		self.setData("tags",VECTOR(WORD))
		self.setData("SNSTag",VECTOR(WORD))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.levelLimit.pack()
		res += self.bRepeat.pack()
		res += self.bAllowTeamShared.pack()
		res += self.funcIssue.pack()
		res += self.funcSubmit.pack()
		res += self.clientDatas.pack()
		res += self.tags.pack()
		res += self.SNSTag.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.levelLimit.unpack(data[index:])
		index += self.bRepeat.unpack(data[index:])
		index += self.bAllowTeamShared.unpack(data[index:])
		index += self.funcIssue.unpack(data[index:])
		index += self.funcSubmit.unpack(data[index:])
		index += self.clientDatas.unpack(data[index:])
		index += self.tags.unpack(data[index:])
		index += self.SNSTag.unpack(data[index:])
		return index
class ChannelID(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("townID",TownID())
		self.setData("channelNumber",ChannelNumber())
	def pack(self):
		res = ""
		res += self.townID.pack()
		res += self.channelNumber.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.townID.unpack(data[index:])
		index += self.channelNumber.unpack(data[index:])
		return index
class RegionID_BODY_Channel(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",ChannelID())
	def pack(self):
		res = ""
		res += self.id.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		return index
class RegionID_BODY(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("channel",RegionID_BODY_Channel())
class RegionID(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("type",RegionBaseType())
		self.setData("body",RegionID_BODY())
	def pack(self):
		res = ""
		res += self.type.pack()
		if self.type==RBT_CHANNEL:
			res += self.body.channel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.type.unpack(data[index:])
		if self.type==RBT_CHANNEL:
			index += self.body.channel.unpack(data[index:])
		return index
class RepetitionInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Name",ItemName())
		self.setData("Music",ItemName())
		self.setData("MapId",DWORD())
		self.setData("LuaFile",ObjPath())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Name.pack()
		res += self.Music.pack()
		res += self.MapId.pack()
		res += self.LuaFile.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Name.unpack(data[index:])
		index += self.Music.unpack(data[index:])
		index += self.MapId.unpack(data[index:])
		index += self.LuaFile.unpack(data[index:])
		return index
class RoleActionInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",ObjName())
		self.setData("index",DWORD())
		self.setData("actionName",ObjName())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.index.pack()
		res += self.actionName.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.index.unpack(data[index:])
		index += self.actionName.unpack(data[index:])
		return index
class Vocation(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("vocation",ObjName())
		self.setData("value",DWORD())
	def pack(self):
		res = ""
		res += self.vocation.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.vocation.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class Collision(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("value",BYTE())
	def pack(self):
		res = ""
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.value.unpack(data[index:])
		return index
class CollisionMask(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("Width",DWORD())
		self.setData("Height",DWORD())
		self.setData("CenterX",DWORD())
		self.setData("CenterY",DWORD())
		self.setData("Mask",VECTOR(Collision))
	def pack(self):
		res = ""
		res += self.Width.pack()
		res += self.Height.pack()
		res += self.CenterX.pack()
		res += self.CenterY.pack()
		res += self.Mask.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.Width.unpack(data[index:])
		index += self.Height.unpack(data[index:])
		index += self.CenterX.unpack(data[index:])
		index += self.CenterY.unpack(data[index:])
		index += self.Mask.unpack(data[index:])
		return index
class NpcInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("nickName",NickName())
		self.setData("code",String())
		self.setData("ModelID",DWORD())
		self.setData("FemaleModelID",DWORD())
		self.setData("Icon",FilePath())
		self.setData("VocationParas",VECTOR(Vocation))
		self.setData("bCanBeChangeMaterial",BYTE())
		self.setData("Labels",VECTOR(DWORD))
		self.setData("WalkAnimRate",DWORD())
		self.setData("RunAnimRate",DWORD())
		self.setData("RotateRate",DWORD())
		self.setData("bBePlayer",BYTE())
		self.setData("NPCRange",DWORD())
		self.setData("DefaultSpeed",DWORD())
		self.setData("AttackSndMatType",DWORD())
		self.setData("BeAttackedSndMatType",DWORD())
		self.setData("AliveCollsion",CollisionMask())
		self.setData("DeadCollsion",CollisionMask())
		self.setData("bVisibleInMiniMap",BYTE())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.nickName.pack()
		res += self.code.pack()
		res += self.ModelID.pack()
		res += self.FemaleModelID.pack()
		res += self.Icon.pack()
		res += self.VocationParas.pack()
		res += self.bCanBeChangeMaterial.pack()
		res += self.Labels.pack()
		res += self.WalkAnimRate.pack()
		res += self.RunAnimRate.pack()
		res += self.RotateRate.pack()
		res += self.bBePlayer.pack()
		res += self.NPCRange.pack()
		res += self.DefaultSpeed.pack()
		res += self.AttackSndMatType.pack()
		res += self.BeAttackedSndMatType.pack()
		res += self.AliveCollsion.pack()
		res += self.DeadCollsion.pack()
		res += self.bVisibleInMiniMap.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.nickName.unpack(data[index:])
		index += self.code.unpack(data[index:])
		index += self.ModelID.unpack(data[index:])
		index += self.FemaleModelID.unpack(data[index:])
		index += self.Icon.unpack(data[index:])
		index += self.VocationParas.unpack(data[index:])
		index += self.bCanBeChangeMaterial.unpack(data[index:])
		index += self.Labels.unpack(data[index:])
		index += self.WalkAnimRate.unpack(data[index:])
		index += self.RunAnimRate.unpack(data[index:])
		index += self.RotateRate.unpack(data[index:])
		index += self.bBePlayer.unpack(data[index:])
		index += self.NPCRange.unpack(data[index:])
		index += self.DefaultSpeed.unpack(data[index:])
		index += self.AttackSndMatType.unpack(data[index:])
		index += self.BeAttackedSndMatType.unpack(data[index:])
		index += self.AliveCollsion.unpack(data[index:])
		index += self.DeadCollsion.unpack(data[index:])
		index += self.bVisibleInMiniMap.unpack(data[index:])
		return index
class PlayerClassInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("normalId",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.normalId.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.normalId.unpack(data[index:])
		return index
class MonsterNameColorInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("affixID",DWORD())
		self.setData("color",String())
		self.setData("nfont",String())
		self.setData("yfont",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.affixID.pack()
		res += self.color.pack()
		res += self.nfont.pack()
		res += self.yfont.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.affixID.unpack(data[index:])
		index += self.color.unpack(data[index:])
		index += self.nfont.unpack(data[index:])
		index += self.yfont.unpack(data[index:])
		return index
class server_errorcode(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("proto",DWORD())
		self.setData("errorcode",DWORD())
		self.setData("stringid",DWORD())
		self.setData("bwindow",BYTE())
		self.setData("bscreen",BYTE())
		self.setData("berror",BYTE())
		self.setData("bchat",BYTE())
		self.setData("btip",BYTE())
		self.setData("btriggereditor",BYTE())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.proto.pack()
		res += self.errorcode.pack()
		res += self.stringid.pack()
		res += self.bwindow.pack()
		res += self.bscreen.pack()
		res += self.berror.pack()
		res += self.bchat.pack()
		res += self.btip.pack()
		res += self.btriggereditor.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.proto.unpack(data[index:])
		index += self.errorcode.unpack(data[index:])
		index += self.stringid.unpack(data[index:])
		index += self.bwindow.unpack(data[index:])
		index += self.bscreen.unpack(data[index:])
		index += self.berror.unpack(data[index:])
		index += self.bchat.unpack(data[index:])
		index += self.btip.unpack(data[index:])
		index += self.btriggereditor.unpack(data[index:])
		return index
class ItemSalePriceInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("moneyType",DWORD())
		self.setData("moneyValue",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.moneyType.pack()
		res += self.moneyValue.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.moneyType.unpack(data[index:])
		index += self.moneyValue.unpack(data[index:])
		return index
class ShopNameInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("shoptype",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.shoptype.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.shoptype.unpack(data[index:])
		return index
class CommodityInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("icon",String())
		self.setData("name",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.icon.pack()
		res += self.name.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.icon.unpack(data[index:])
		index += self.name.unpack(data[index:])
		return index
class SkillQuestRequireInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		return index
class ZhaoGroup(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("zhaoID",DWORD())
		self.setData("groupID",DWORD())
	def pack(self):
		res = ""
		res += self.zhaoID.pack()
		res += self.groupID.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.zhaoID.unpack(data[index:])
		index += self.groupID.unpack(data[index:])
		return index
class SkillZhaoGroupInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("maxActiveCount",DWORD())
		self.setData("zhaoGroups",VECTOR(ZhaoGroup))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.maxActiveCount.pack()
		res += self.zhaoGroups.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.maxActiveCount.unpack(data[index:])
		index += self.zhaoGroups.unpack(data[index:])
		return index
class extraParam(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramID",DWORD())
		self.setData("paramName",String())
		self.setData("baseValue",FLOAT())
		self.setData("effectDesc",String())
	def pack(self):
		res = ""
		res += self.paramID.pack()
		res += self.paramName.pack()
		res += self.baseValue.pack()
		res += self.effectDesc.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramID.unpack(data[index:])
		index += self.paramName.unpack(data[index:])
		index += self.baseValue.unpack(data[index:])
		index += self.effectDesc.unpack(data[index:])
		return index
class SkillExtraParamInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("extraParams",VECTOR(extraParam))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.extraParams.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.extraParams.unpack(data[index:])
		return index
class UnitBaseParameter(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramID",WORD())
		self.setData("value",LONG())
	def pack(self):
		res = ""
		res += self.paramID.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramID.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class SkillUnitParamRules(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("params",VECTOR(UnitBaseParameter))
	def pack(self):
		res = ""
		res += self.params.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.params.unpack(data[index:])
		return index
class SkillParam(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramID",DWORD())
		self.setData("name",ItemName())
		self.setData("value",LONG())
	def pack(self):
		res = ""
		res += self.paramID.pack()
		res += self.name.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramID.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class SkillParamInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("params",VECTOR(SkillParam))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.params.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.params.unpack(data[index:])
		return index
class QuestParamInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("skillLevel",DWORD())
		self.setData("questID",DWORD())
		self.setData("levelLimit",DWORD())
	def pack(self):
		res = ""
		res += self.skillLevel.pack()
		res += self.questID.pack()
		res += self.levelLimit.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.skillLevel.unpack(data[index:])
		index += self.questID.unpack(data[index:])
		index += self.levelLimit.unpack(data[index:])
		return index
class SkillQuestInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("questInfo",VECTOR(QuestParamInfo))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.questInfo.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.questInfo.unpack(data[index:])
		return index
class FracturedSoundInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("FracturedMeshName",ObjName())
		self.setData("FracturedSound",ObjName())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.FracturedMeshName.pack()
		res += self.FracturedSound.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.FracturedMeshName.unpack(data[index:])
		index += self.FracturedSound.unpack(data[index:])
		return index
class NpcSoundInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Sounds",VECTOR(ObjPath))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Sounds.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Sounds.unpack(data[index:])
		return index
class GroundGroup(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("groundID",DWORD())
		self.setData("soundname",String())
	def pack(self):
		res = ""
		res += self.groundID.pack()
		res += self.soundname.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.groundID.unpack(data[index:])
		index += self.soundname.unpack(data[index:])
		return index
class SoundStepInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("FootGroup",VECTOR(GroundGroup))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.FootGroup.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.FootGroup.unpack(data[index:])
		return index
class StateInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Name",ItemName())
		self.setData("StateType",BYTE())
		self.setData("StateClass",BYTE())
		self.setData("Tags",VECTOR(DWORD))
		self.setData("IconName",ObjPath())
		self.setData("StateDesc",String())
		self.setData("StateClientView",BYTE())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Name.pack()
		res += self.StateType.pack()
		res += self.StateClass.pack()
		res += self.Tags.pack()
		res += self.IconName.pack()
		res += self.StateDesc.pack()
		res += self.StateClientView.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Name.unpack(data[index:])
		index += self.StateType.unpack(data[index:])
		index += self.StateClass.unpack(data[index:])
		index += self.Tags.unpack(data[index:])
		index += self.IconName.unpack(data[index:])
		index += self.StateDesc.unpack(data[index:])
		index += self.StateClientView.unpack(data[index:])
		return index
class ChatDataUnit_BODY__Player(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",UserID())
	def pack(self):
		res = ""
		res += self.id.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		return index
class ChatDataUnit_BODY__Region_BODY__None(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
	def pack(self):
		res = ""
		return res
	def unpack(self,data):
		index=0
		return index
class ChatDataUnit_BODY__Region_BODY__Channel(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("location",Location())
	def pack(self):
		res = ""
		res += self.location.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.location.unpack(data[index:])
		return index
class ChatDataUnit_BODY__Region_BODY(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("none",ChatDataUnit_BODY__Region_BODY__None())
		self.setData("channel",ChatDataUnit_BODY__Region_BODY__Channel())
class ChatDataUnit_BODY__Region(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("regionID",RegionID())
		self.setData("isHaveDetail",BYTE())
		self.setData("detail",ChatDataUnit_BODY__Region_BODY())
	def pack(self):
		res = ""
		res += self.regionID.pack()
		res += self.isHaveDetail.pack()
		if self.regionID.type==RBT_NONE:
			res += self.detail.none.pack()
		if self.regionID.type==RBT_CHANNEL:
			res += self.detail.channel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.regionID.unpack(data[index:])
		index += self.isHaveDetail.unpack(data[index:])
		if self.regionID.type==RBT_NONE:
			index += self.detail.none.unpack(data[index:])
		if self.regionID.type==RBT_CHANNEL:
			index += self.detail.channel.unpack(data[index:])
		return index
class ChatDataUnit_BODY(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("player",ChatDataUnit_BODY__Player())
		self.setData("region",ChatDataUnit_BODY__Region())
class ChatDataUnit(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("type",BYTE())
		self.setData("text",ChatText())
		self.setData("body",ChatDataUnit_BODY())
	def pack(self):
		res = ""
		res += self.type.pack()
		res += self.text.pack()
		if self.type==CDIT_PLAYER:
			res += self.body.player.pack()
		if self.type==CDIT_REGION:
			res += self.body.region.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.type.unpack(data[index:])
		index += self.text.unpack(data[index:])
		if self.type==CDIT_PLAYER:
			index += self.body.player.unpack(data[index:])
		if self.type==CDIT_REGION:
			index += self.body.region.unpack(data[index:])
		return index
class ChatContent(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("units",VECTOR(ChatDataUnit))
	def pack(self):
		res = ""
		res += self.units.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.units.unpack(data[index:])
		return index
class StringTableInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",StringTableID())
		self.setData("texts",VECTOR(StringTableText))
		self.setData("indexes",VECTOR(BYTE))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.texts.pack()
		res += self.indexes.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.texts.unpack(data[index:])
		index += self.indexes.unpack(data[index:])
		return index
class clientshow_string(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("ClientShowString",String())
		self.setData("stringid",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.ClientShowString.pack()
		res += self.stringid.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.ClientShowString.unpack(data[index:])
		index += self.stringid.unpack(data[index:])
		return index
class CarryingZhaoDesc(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("zhaoID",SkillZhaoID())
		self.setData("level",SkillIntensity())
		self.setData("activeOrder",BYTE())
	def pack(self):
		res = ""
		res += self.zhaoID.pack()
		res += self.level.pack()
		res += self.activeOrder.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.zhaoID.unpack(data[index:])
		index += self.level.unpack(data[index:])
		index += self.activeOrder.unpack(data[index:])
		return index
class CarryingSkillDesc(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("skillID",SkillID())
		self.setData("level",SkillIntensity())
	def pack(self):
		res = ""
		res += self.skillID.pack()
		res += self.level.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.skillID.unpack(data[index:])
		index += self.level.unpack(data[index:])
		return index
class CarryingSkillZhaoList(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("skills",VECTOR(CarryingSkillDesc))
		self.setData("zhaos",VECTOR(CarryingZhaoDesc))
	def pack(self):
		res = ""
		res += self.skills.pack()
		res += self.zhaos.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.skills.unpack(data[index:])
		index += self.zhaos.unpack(data[index:])
		return index
class TalismanIntensityStatus(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("consumes",VECTOR(ConsumeItem))
		self.setData("skillStatus",CarryingSkillZhaoList())
	def pack(self):
		res = ""
		res += self.consumes.pack()
		res += self.skillStatus.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.consumes.unpack(data[index:])
		index += self.skillStatus.unpack(data[index:])
		return index
class TalismanGeneInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",TalismanGeneID())
		self.setData("intensityStatus",VECTOR(TalismanIntensityStatus))
		self.setData("limitLevel",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.intensityStatus.pack()
		res += self.limitLevel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.intensityStatus.unpack(data[index:])
		index += self.limitLevel.unpack(data[index:])
		return index
class TalismanAllele(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("geneID_dominant",WORD())
		self.setData("geneID_recessive",WORD())
		self.setData("intensity",BYTE())
	def pack(self):
		res = ""
		res += self.geneID_dominant.pack()
		res += self.geneID_recessive.pack()
		res += self.intensity.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.geneID_dominant.unpack(data[index:])
		index += self.geneID_recessive.unpack(data[index:])
		index += self.intensity.unpack(data[index:])
		return index
class TalismanLevelUpgradeConfig(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("upgradeExperience",TalismanExperience())
		self.setData("consumes",VECTOR(ConsumeItem))
	def pack(self):
		res = ""
		res += self.upgradeExperience.pack()
		res += self.consumes.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.upgradeExperience.unpack(data[index:])
		index += self.consumes.unpack(data[index:])
		return index
class TalismanLevelConfig(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("needExperience",TalismanExperience())
		self.setData("openAlleleIndex",VECTOR(TalismanAlleleIndex))
		self.setData("upgradeConfigs",VECTOR(TalismanLevelUpgradeConfig))
	def pack(self):
		res = ""
		res += self.needExperience.pack()
		res += self.openAlleleIndex.pack()
		res += self.upgradeConfigs.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.needExperience.unpack(data[index:])
		index += self.openAlleleIndex.unpack(data[index:])
		index += self.upgradeConfigs.unpack(data[index:])
		return index
class TalismanGrowthInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",TalismanGrowthRuleID())
		self.setData("startLevel",TalismanLevel())
		self.setData("expTable",VECTOR(TalismanLevelConfig))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.startLevel.pack()
		res += self.expTable.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.startLevel.unpack(data[index:])
		index += self.expTable.unpack(data[index:])
		return index
class TerrainParam(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("value",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class TerrainInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("nickName",NickName())
		self.setData("speedPercent",INT())
		self.setData("moveType",BYTE())
		self.setData("heightCheck",BYTE())
		self.setData("blockStyle",BYTE())
		self.setData("params",VECTOR(TerrainParam))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.nickName.pack()
		res += self.speedPercent.pack()
		res += self.moveType.pack()
		res += self.heightCheck.pack()
		res += self.blockStyle.pack()
		res += self.params.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.nickName.unpack(data[index:])
		index += self.speedPercent.unpack(data[index:])
		index += self.moveType.unpack(data[index:])
		index += self.heightCheck.unpack(data[index:])
		index += self.blockStyle.unpack(data[index:])
		index += self.params.unpack(data[index:])
		return index
class TextBlackListInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",INT())
	def pack(self):
		res = ""
		res += self.id.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		return index
class TextHanziPinyinInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",INT())
		self.setData("hz",ObjName())
		self.setData("py",ObjName())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.hz.pack()
		res += self.py.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.hz.unpack(data[index:])
		index += self.py.unpack(data[index:])
		return index
class TextWhiteListInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",INT())
	def pack(self):
		res = ""
		res += self.id.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		return index
class Transmissionlocation(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("x",DWORD())
		self.setData("y",DWORD())
	def pack(self):
		res = ""
		res += self.x.pack()
		res += self.y.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.x.unpack(data[index:])
		index += self.y.unpack(data[index:])
		return index
class TransmissionInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("platform",DWORD())
		self.setData("pos",Transmissionlocation())
		self.setData("targetTown",DWORD())
	def pack(self):
		res = ""
		res += self.platform.pack()
		res += self.pos.pack()
		res += self.targetTown.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.platform.unpack(data[index:])
		index += self.pos.unpack(data[index:])
		index += self.targetTown.unpack(data[index:])
		return index
class MusicInterval(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("down",DWORD())
		self.setData("up",DWORD())
	def pack(self):
		res = ""
		res += self.down.pack()
		res += self.up.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.down.unpack(data[index:])
		index += self.up.unpack(data[index:])
		return index
class TownInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Name",ItemName())
		self.setData("bAutoWalk",DWORD())
		self.setData("bHard",DWORD())
		self.setData("Zone",DWORD())
		self.setData("Music",ItemName())
		self.setData("PlayInterval",MusicInterval())
		self.setData("BackGroundPicture",ItemName())
		self.setData("MapId",DWORD())
		self.setData("LuaFile",ObjPath())
		self.setData("transmission",VECTOR(TransmissionInfo))
		self.setData("mapStrategy",DWORD())
		self.setData("mapStrategyName",DWORD())
		self.setData("needToLoadModels",VECTOR(DWORD))
		self.setData("needToLoadClasses",VECTOR(DWORD))
		self.setData("needToMonsterIDs",VECTOR(DWORD))
		self.setData("mapArtFont",String())
		self.setData("describe",String())
		self.setData("bSafe",DWORD())
		self.setData("bCountryBattle",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Name.pack()
		res += self.bAutoWalk.pack()
		res += self.bHard.pack()
		res += self.Zone.pack()
		res += self.Music.pack()
		res += self.PlayInterval.pack()
		res += self.BackGroundPicture.pack()
		res += self.MapId.pack()
		res += self.LuaFile.pack()
		res += self.transmission.pack()
		res += self.mapStrategy.pack()
		res += self.mapStrategyName.pack()
		res += self.needToLoadModels.pack()
		res += self.needToLoadClasses.pack()
		res += self.needToMonsterIDs.pack()
		res += self.mapArtFont.pack()
		res += self.describe.pack()
		res += self.bSafe.pack()
		res += self.bCountryBattle.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Name.unpack(data[index:])
		index += self.bAutoWalk.unpack(data[index:])
		index += self.bHard.unpack(data[index:])
		index += self.Zone.unpack(data[index:])
		index += self.Music.unpack(data[index:])
		index += self.PlayInterval.unpack(data[index:])
		index += self.BackGroundPicture.unpack(data[index:])
		index += self.MapId.unpack(data[index:])
		index += self.LuaFile.unpack(data[index:])
		index += self.transmission.unpack(data[index:])
		index += self.mapStrategy.unpack(data[index:])
		index += self.mapStrategyName.unpack(data[index:])
		index += self.needToLoadModels.unpack(data[index:])
		index += self.needToLoadClasses.unpack(data[index:])
		index += self.needToMonsterIDs.unpack(data[index:])
		index += self.mapArtFont.unpack(data[index:])
		index += self.describe.unpack(data[index:])
		index += self.bSafe.unpack(data[index:])
		index += self.bCountryBattle.unpack(data[index:])
		return index
class UnitDataInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Data",ObjName())
		self.setData("Value",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Data.pack()
		res += self.Value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Data.unpack(data[index:])
		index += self.Value.unpack(data[index:])
		return index
class XPSkillResInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("effectRes",VECTOR(ObjPath))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.effectRes.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.effectRes.unpack(data[index:])
		return index
class adjustedParam(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramID",DWORD())
		self.setData("paramName",String())
		self.setData("valueScript",String())
		self.setData("effectDesc",String())
	def pack(self):
		res = ""
		res += self.paramID.pack()
		res += self.paramName.pack()
		res += self.valueScript.pack()
		res += self.effectDesc.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramID.unpack(data[index:])
		index += self.paramName.unpack(data[index:])
		index += self.valueScript.unpack(data[index:])
		index += self.effectDesc.unpack(data[index:])
		return index
class ZhaoInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("rendName",String())
		self.setData("baseDesc",String())
		self.setData("IconName",ObjPath())
		self.setData("adjustedParams",VECTOR(adjustedParam))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.rendName.pack()
		res += self.baseDesc.pack()
		res += self.IconName.pack()
		res += self.adjustedParams.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.rendName.unpack(data[index:])
		index += self.baseDesc.unpack(data[index:])
		index += self.IconName.unpack(data[index:])
		index += self.adjustedParams.unpack(data[index:])
		return index
class CustomErrorCompetition(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("stringid",DWORD())
		self.setData("bwindow",BYTE())
		self.setData("bscreen",BYTE())
		self.setData("berror",BYTE())
		self.setData("bchat",BYTE())
		self.setData("btip",BYTE())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.stringid.pack()
		res += self.bwindow.pack()
		res += self.bscreen.pack()
		res += self.berror.pack()
		res += self.bchat.pack()
		res += self.btip.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.stringid.unpack(data[index:])
		index += self.bwindow.unpack(data[index:])
		index += self.bscreen.unpack(data[index:])
		index += self.berror.unpack(data[index:])
		index += self.bchat.unpack(data[index:])
		index += self.btip.unpack(data[index:])
		return index
class UIFrameAnim(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("texture",String())
		self.setData("texXL",DWORD())
		self.setData("texYL",DWORD())
		self.setData("colNum",DWORD())
		self.setData("frameNum",DWORD())
		self.setData("frameInter",FLOAT())
		self.setData("loop",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.texture.pack()
		res += self.texXL.pack()
		res += self.texYL.pack()
		res += self.colNum.pack()
		res += self.frameNum.pack()
		res += self.frameInter.pack()
		res += self.loop.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.texture.unpack(data[index:])
		index += self.texXL.unpack(data[index:])
		index += self.texYL.unpack(data[index:])
		index += self.colNum.unpack(data[index:])
		index += self.frameNum.unpack(data[index:])
		index += self.frameInter.unpack(data[index:])
		index += self.loop.unpack(data[index:])
		return index
class GuildGradationInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("sortvalue",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.sortvalue.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.sortvalue.unpack(data[index:])
		return index
class ItemAutoWalkSingleData(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("type",DWORD())
		self.setData("value",DWORD())
	def pack(self):
		res = ""
		res += self.type.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.type.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class ItemAutoWalk(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("ItemAutoWalkList",VECTOR(ItemAutoWalkSingleData))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.ItemAutoWalkList.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.ItemAutoWalkList.unpack(data[index:])
		return index
class ItemFealtyRecoveryConsumeRecC(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("curFealty",WORD())
		self.setData("materials",VECTOR(ConsumeItem))
	def pack(self):
		res = ""
		res += self.curFealty.pack()
		res += self.materials.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.curFealty.unpack(data[index:])
		index += self.materials.unpack(data[index:])
		return index
class ItemFealtyInfoDetail(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipLevel",WORD())
		self.setData("consumeRecs",VECTOR(ItemFealtyRecoveryConsumeRecC))
	def pack(self):
		res = ""
		res += self.equipLevel.pack()
		res += self.consumeRecs.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.equipLevel.unpack(data[index:])
		index += self.consumeRecs.unpack(data[index:])
		return index
class ItemFealtyInfoC(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("consumesByEquipLevel",VECTOR(ItemFealtyInfoDetail))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.consumesByEquipLevel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.consumesByEquipLevel.unpack(data[index:])
		return index
class ItemQuestInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("ItemQuestId",INT())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.ItemQuestId.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.ItemQuestId.unpack(data[index:])
		return index
class ItemUsageTemplateParam(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramID",WORD())
		self.setData("datas",VECTOR(TinyBinary))
	def pack(self):
		res = ""
		res += self.paramID.pack()
		res += self.datas.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramID.unpack(data[index:])
		index += self.datas.unpack(data[index:])
		return index
class usageParam(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramID",WORD())
		self.setData("value",DWORD())
	def pack(self):
		res = ""
		res += self.paramID.pack()
		res += self.value.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramID.unpack(data[index:])
		index += self.value.unpack(data[index:])
		return index
class ItemRuleTemplate(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("seq",WORD())
		self.setData("templateID",WORD())
		self.setData("params",VECTOR(ItemUsageTemplateParam))
	def pack(self):
		res = ""
		res += self.seq.pack()
		res += self.templateID.pack()
		res += self.params.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.seq.unpack(data[index:])
		index += self.templateID.unpack(data[index:])
		index += self.params.unpack(data[index:])
		return index
class ItemUsageRule(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("templates",VECTOR(ItemRuleTemplate))
	def pack(self):
		res = ""
		res += self.templates.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.templates.unpack(data[index:])
		return index
class ItemUsageInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("targetType",DWORD())
		self.setData("unit_classes",DWORD())
		self.setData("coolDownGroups",VECTOR(DWORD))
		self.setData("usagelevel",DWORD())
		self.setData("usageParams",VECTOR(usageParam))
		self.setData("usageRule",ItemUsageRule())
		self.setData("skill",INT())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.targetType.pack()
		res += self.unit_classes.pack()
		res += self.coolDownGroups.pack()
		res += self.usagelevel.pack()
		res += self.usageParams.pack()
		res += self.usageRule.pack()
		res += self.skill.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.targetType.unpack(data[index:])
		index += self.unit_classes.unpack(data[index:])
		index += self.coolDownGroups.unpack(data[index:])
		index += self.usagelevel.unpack(data[index:])
		index += self.usageParams.unpack(data[index:])
		index += self.usageRule.unpack(data[index:])
		index += self.skill.unpack(data[index:])
		return index
class MonsterNameDesc(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("unit_class",DWORD())
		self.setData("fix_affixgroups",VECTOR(DWORD))
		self.setData("ShowName",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.unit_class.pack()
		res += self.fix_affixgroups.pack()
		res += self.ShowName.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.unit_class.unpack(data[index:])
		index += self.fix_affixgroups.unpack(data[index:])
		index += self.ShowName.unpack(data[index:])
		return index
class NPCDialog(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("NpcId",DWORD())
		self.setData("index",DWORD())
		self.setData("DialogText",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.NpcId.pack()
		res += self.index.pack()
		res += self.DialogText.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.NpcId.unpack(data[index:])
		index += self.index.unpack(data[index:])
		index += self.DialogText.unpack(data[index:])
		return index
class PacketItemInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("size",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.size.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.size.unpack(data[index:])
		return index
class QuestGroupMutexInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("allGroupQuest",VECTOR(DWORD))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.allGroupQuest.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.allGroupQuest.unpack(data[index:])
		return index
class QuestGroupInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("questlist",VECTOR(DWORD))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.questlist.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.questlist.unpack(data[index:])
		return index
class QuestPeriodsRuleInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Count",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Count.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Count.unpack(data[index:])
		return index
class SNSItemGenerateInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("QuestRule",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.QuestRule.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.QuestRule.unpack(data[index:])
		return index
class SNSQuestItem(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("MoneyType",DWORD())
		self.setData("MoneyValue",DWORD())
		self.setData("ConsumeValue",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.MoneyType.pack()
		res += self.MoneyValue.pack()
		res += self.ConsumeValue.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.MoneyType.unpack(data[index:])
		index += self.MoneyValue.unpack(data[index:])
		index += self.ConsumeValue.unpack(data[index:])
		return index
class costRateLevelInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("costRateLevel",DWORD())
		self.setData("acceptCount",DWORD())
	def pack(self):
		res = ""
		res += self.costRateLevel.pack()
		res += self.acceptCount.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.costRateLevel.unpack(data[index:])
		index += self.acceptCount.unpack(data[index:])
		return index
class SNSQuestRuleInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Price",VECTOR(INT))
		self.setData("Tax",DWORD())
		self.setData("Time",DWORD())
		self.setData("Min",DWORD())
		self.setData("Max",DWORD())
		self.setData("BaseCost",DWORD())
		self.setData("IncreaseCost",DWORD())
		self.setData("GenerateQuestList",VECTOR(DWORD))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Price.pack()
		res += self.Tax.pack()
		res += self.Time.pack()
		res += self.Min.pack()
		res += self.Max.pack()
		res += self.BaseCost.pack()
		res += self.IncreaseCost.pack()
		res += self.GenerateQuestList.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Price.unpack(data[index:])
		index += self.Tax.unpack(data[index:])
		index += self.Time.unpack(data[index:])
		index += self.Min.unpack(data[index:])
		index += self.Max.unpack(data[index:])
		index += self.BaseCost.unpack(data[index:])
		index += self.IncreaseCost.unpack(data[index:])
		index += self.GenerateQuestList.unpack(data[index:])
		return index
class ScreenRatePhase(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		return index
class ScreenRate(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("phaselist",VECTOR(DWORD))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.phaselist.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.phaselist.unpack(data[index:])
		return index
class imageinfodata(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("imagesource",String())
		self.setData("distance",INT())
	def pack(self):
		res = ""
		res += self.imagesource.pack()
		res += self.distance.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.imagesource.unpack(data[index:])
		index += self.distance.unpack(data[index:])
		return index
class ScrollImageInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("speed",INT())
		self.setData("imageinfo",VECTOR(imageinfodata))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.speed.pack()
		res += self.imageinfo.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.speed.unpack(data[index:])
		index += self.imageinfo.unpack(data[index:])
		return index
class StoryQuestTown(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("qid",DWORD())
		self.setData("townid",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.qid.pack()
		res += self.townid.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.qid.unpack(data[index:])
		index += self.townid.unpack(data[index:])
		return index
class TalismanInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("unit_classes",DWORD())
		self.setData("levelcanuse",DWORD())
		self.setData("upgradetype",DWORD())
		self.setData("select_num",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.unit_classes.pack()
		res += self.levelcanuse.pack()
		res += self.upgradetype.pack()
		res += self.select_num.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.unit_classes.unpack(data[index:])
		index += self.levelcanuse.unpack(data[index:])
		index += self.upgradetype.unpack(data[index:])
		index += self.select_num.unpack(data[index:])
		return index
class UIHyperlinkDefine(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Color",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Color.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Color.unpack(data[index:])
		return index
class UIColor(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("nameUsage",String())
		self.setData("name",String())
		self.setData("ColorR",DWORD())
		self.setData("ColorG",DWORD())
		self.setData("ColorB",DWORD())
		self.setData("ColorA",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.nameUsage.pack()
		res += self.name.pack()
		res += self.ColorR.pack()
		res += self.ColorG.pack()
		res += self.ColorB.pack()
		res += self.ColorA.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.nameUsage.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.ColorR.unpack(data[index:])
		index += self.ColorG.unpack(data[index:])
		index += self.ColorB.unpack(data[index:])
		index += self.ColorA.unpack(data[index:])
		return index
class UIFont(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("FontPath",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.FontPath.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.FontPath.unpack(data[index:])
		return index
class UIStyle(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("texture",String())
		self.setData("texx",INT())
		self.setData("texy",INT())
		self.setData("texxl",INT())
		self.setData("texyl",INT())
		self.setData("effX1",INT())
		self.setData("effY1",INT())
		self.setData("effX2",INT())
		self.setData("effY2",INT())
		self.setData("backUpName",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.texture.pack()
		res += self.texx.pack()
		res += self.texy.pack()
		res += self.texxl.pack()
		res += self.texyl.pack()
		res += self.effX1.pack()
		res += self.effY1.pack()
		res += self.effX2.pack()
		res += self.effY2.pack()
		res += self.backUpName.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.texture.unpack(data[index:])
		index += self.texx.unpack(data[index:])
		index += self.texy.unpack(data[index:])
		index += self.texxl.unpack(data[index:])
		index += self.texyl.unpack(data[index:])
		index += self.effX1.unpack(data[index:])
		index += self.effY1.unpack(data[index:])
		index += self.effX2.unpack(data[index:])
		index += self.effY2.unpack(data[index:])
		index += self.backUpName.unpack(data[index:])
		return index
class ZoneAutoWalkSingleData(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("town",DWORD())
		self.setData("platform",DWORD())
		self.setData("location",Location())
	def pack(self):
		res = ""
		res += self.town.pack()
		res += self.platform.pack()
		res += self.location.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.town.unpack(data[index:])
		index += self.platform.unpack(data[index:])
		index += self.location.unpack(data[index:])
		return index
class ZoneAutoWalk(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("ZoneAutoWalkList",VECTOR(ZoneAutoWalkSingleData))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.ZoneAutoWalkList.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.ZoneAutoWalkList.unpack(data[index:])
		return index
class ZoneMapNpc(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Townid",DWORD())
		self.setData("RoleTemplateId",DWORD())
		self.setData("describe",String())
		self.setData("tag",DWORD())
		self.setData("searchcode",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Townid.pack()
		res += self.RoleTemplateId.pack()
		res += self.describe.pack()
		res += self.tag.pack()
		res += self.searchcode.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Townid.unpack(data[index:])
		index += self.RoleTemplateId.unpack(data[index:])
		index += self.describe.unpack(data[index:])
		index += self.tag.unpack(data[index:])
		index += self.searchcode.unpack(data[index:])
		return index
class AffixInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("desc",String())
		self.setData("MaxHP",String())
		self.setData("MaxMP",String())
		self.setData("PhysicalAttackMin",String())
		self.setData("PhysicalAttackMax",String())
		self.setData("MagicalAttackMin",String())
		self.setData("MagicalAttackMax",String())
		self.setData("XuanAttackMin",String())
		self.setData("XuanAttackMax",String())
		self.setData("SpiritAttackMin",String())
		self.setData("SpiritAttackMax",String())
		self.setData("PhysicalDefenceMin",String())
		self.setData("PhysicalDefenceMax",String())
		self.setData("MagicalDefenceMin",String())
		self.setData("MagicalDefenceMax",String())
		self.setData("PhysicalDodge",String())
		self.setData("MagicalDodge",String())
		self.setData("CriticalHit",String())
		self.setData("Luck",String())
		self.setData("Block",String())
		self.setData("BlockValue",String())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.desc.pack()
		res += self.MaxHP.pack()
		res += self.MaxMP.pack()
		res += self.PhysicalAttackMin.pack()
		res += self.PhysicalAttackMax.pack()
		res += self.MagicalAttackMin.pack()
		res += self.MagicalAttackMax.pack()
		res += self.XuanAttackMin.pack()
		res += self.XuanAttackMax.pack()
		res += self.SpiritAttackMin.pack()
		res += self.SpiritAttackMax.pack()
		res += self.PhysicalDefenceMin.pack()
		res += self.PhysicalDefenceMax.pack()
		res += self.MagicalDefenceMin.pack()
		res += self.MagicalDefenceMax.pack()
		res += self.PhysicalDodge.pack()
		res += self.MagicalDodge.pack()
		res += self.CriticalHit.pack()
		res += self.Luck.pack()
		res += self.Block.pack()
		res += self.BlockValue.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.desc.unpack(data[index:])
		index += self.MaxHP.unpack(data[index:])
		index += self.MaxMP.unpack(data[index:])
		index += self.PhysicalAttackMin.unpack(data[index:])
		index += self.PhysicalAttackMax.unpack(data[index:])
		index += self.MagicalAttackMin.unpack(data[index:])
		index += self.MagicalAttackMax.unpack(data[index:])
		index += self.XuanAttackMin.unpack(data[index:])
		index += self.XuanAttackMax.unpack(data[index:])
		index += self.SpiritAttackMin.unpack(data[index:])
		index += self.SpiritAttackMax.unpack(data[index:])
		index += self.PhysicalDefenceMin.unpack(data[index:])
		index += self.PhysicalDefenceMax.unpack(data[index:])
		index += self.MagicalDefenceMin.unpack(data[index:])
		index += self.MagicalDefenceMax.unpack(data[index:])
		index += self.PhysicalDodge.unpack(data[index:])
		index += self.MagicalDodge.unpack(data[index:])
		index += self.CriticalHit.unpack(data[index:])
		index += self.Luck.unpack(data[index:])
		index += self.Block.unpack(data[index:])
		index += self.BlockValue.unpack(data[index:])
		return index
class AttrRange(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("attrType",WORD())
		self.setData("min",WORD())
		self.setData("max",WORD())
	def pack(self):
		res = ""
		res += self.attrType.pack()
		res += self.min.pack()
		res += self.max.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.attrType.unpack(data[index:])
		index += self.min.unpack(data[index:])
		index += self.max.unpack(data[index:])
		return index
class EquipAttrAffixRangeByAffixQuality(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("quality",WORD())
		self.setData("attrRanges",VECTOR(AttrRange))
	def pack(self):
		res = ""
		res += self.quality.pack()
		res += self.attrRanges.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.quality.unpack(data[index:])
		index += self.attrRanges.unpack(data[index:])
		return index
class EquipAttrAffixRangeByEquipLevel(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipLevel",WORD())
		self.setData("rangesAffixQuality",VECTOR(EquipAttrAffixRangeByAffixQuality))
	def pack(self):
		res = ""
		res += self.equipLevel.pack()
		res += self.rangesAffixQuality.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.equipLevel.unpack(data[index:])
		index += self.rangesAffixQuality.unpack(data[index:])
		return index
class EquipAttrAffixRangeByEquipPart(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipPart",WORD())
		self.setData("rangesEquipLevel",VECTOR(EquipAttrAffixRangeByEquipLevel))
	def pack(self):
		res = ""
		res += self.equipPart.pack()
		res += self.rangesEquipLevel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.equipPart.unpack(data[index:])
		index += self.rangesEquipLevel.unpack(data[index:])
		return index
class EquipBaseAttrAffixRangeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("rangesEquipPart",VECTOR(EquipAttrAffixRangeByEquipPart))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.rangesEquipPart.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.rangesEquipPart.unpack(data[index:])
		return index
class EquipExtraAttrAffixRangeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("rangesEquipPart",VECTOR(EquipAttrAffixRangeByEquipPart))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.rangesEquipPart.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.rangesEquipPart.unpack(data[index:])
		return index
class EquipParamAffixRangeByAffixQuality(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("quality",WORD())
		self.setData("min",LONG())
		self.setData("max",LONG())
	def pack(self):
		res = ""
		res += self.quality.pack()
		res += self.min.pack()
		res += self.max.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.quality.unpack(data[index:])
		index += self.min.unpack(data[index:])
		index += self.max.unpack(data[index:])
		return index
class EquipParamAffixRangeByEquipLevel(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipLevel",WORD())
		self.setData("rangesAffixQuality",VECTOR(EquipParamAffixRangeByAffixQuality))
	def pack(self):
		res = ""
		res += self.equipLevel.pack()
		res += self.rangesAffixQuality.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.equipLevel.unpack(data[index:])
		index += self.rangesAffixQuality.unpack(data[index:])
		return index
class EquipUnitParamAffixRangeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("rangesEquipLevel",VECTOR(EquipParamAffixRangeByEquipLevel))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.rangesEquipLevel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.rangesEquipLevel.unpack(data[index:])
		return index
class AttrAffixRandGenArithmetic(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramIndex",BYTE())
		self.setData("attrType",DWORD())
		self.setData("arithmetic",BYTE())
	def pack(self):
		res = ""
		res += self.paramIndex.pack()
		res += self.attrType.pack()
		res += self.arithmetic.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramIndex.unpack(data[index:])
		index += self.attrType.unpack(data[index:])
		index += self.arithmetic.unpack(data[index:])
		return index
class UnitParamAffixRandGenArithmetic(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("paramIndex",BYTE())
		self.setData("id",DWORD())
		self.setData("arithmetic",BYTE())
	def pack(self):
		res = ""
		res += self.paramIndex.pack()
		res += self.id.pack()
		res += self.arithmetic.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.paramIndex.unpack(data[index:])
		index += self.id.unpack(data[index:])
		index += self.arithmetic.unpack(data[index:])
		return index
class AttrAffixGenByAffixQuality(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("quality",DWORD())
		self.setData("randGenArithmetics",VAR_ARRAY(AttrAffixRandGenArithmetic,BYTE))
	def pack(self):
		res = ""
		res += self.quality.pack()
		res += self.randGenArithmetics.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.quality.unpack(data[index:])
		index += self.randGenArithmetics.unpack(data[index:])
		return index
class UnitParamAffixGenByAffixQuality(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("quality",DWORD())
		self.setData("randGenArithmetics",VAR_ARRAY(UnitParamAffixRandGenArithmetic,BYTE))
		self.setData("fixUnitParams",VAR_ARRAY(UnitBaseParameter,BYTE))
	def pack(self):
		res = ""
		res += self.quality.pack()
		res += self.randGenArithmetics.pack()
		res += self.fixUnitParams.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.quality.unpack(data[index:])
		index += self.randGenArithmetics.unpack(data[index:])
		index += self.fixUnitParams.unpack(data[index:])
		return index
class UnitParamAffixExtraSkill(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("skillID",DWORD())
		self.setData("intensity",BYTE())
	def pack(self):
		res = ""
		res += self.skillID.pack()
		res += self.intensity.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.skillID.unpack(data[index:])
		index += self.intensity.unpack(data[index:])
		return index
class SellPriceAffixGenByAffixQuality(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("quality",WORD())
		self.setData("arithmetic",BYTE())
	def pack(self):
		res = ""
		res += self.quality.pack()
		res += self.arithmetic.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.quality.unpack(data[index:])
		index += self.arithmetic.unpack(data[index:])
		return index
class AffixGroupRecord(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("quality",WORD())
		self.setData("coProb",WORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.quality.pack()
		res += self.coProb.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.quality.unpack(data[index:])
		index += self.coProb.unpack(data[index:])
		return index
class MFAwardItem_BODY_Item(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("tid",DWORD())
	def pack(self):
		res = ""
		res += self.tid.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.tid.unpack(data[index:])
		return index
class MFAwardItem_BODY_Rune(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("tid",DWORD())
	def pack(self):
		res = ""
		res += self.tid.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.tid.unpack(data[index:])
		return index
class MFAwardItem_BODY_Money(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("moneyType",DWORD())
	def pack(self):
		res = ""
		res += self.moneyType.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.moneyType.unpack(data[index:])
		return index
class MFAwardItem_BODY(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("item",MFAwardItem_BODY_Item())
		self.setData("rune",MFAwardItem_BODY_Rune())
		self.setData("money",MFAwardItem_BODY_Money())
class MFAwardItem(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("type",AwardItemType())
		self.setData("body",MFAwardItem_BODY())
	def pack(self):
		res = ""
		res += self.type.pack()
		if self.type==AIT_ITEM:
			res += self.body.item.pack()
		if self.type==AIT_RUNE:
			res += self.body.rune.pack()
		if self.type==AIT_MONEY:
			res += self.body.money.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.type.unpack(data[index:])
		if self.type==AIT_ITEM:
			index += self.body.item.unpack(data[index:])
		if self.type==AIT_RUNE:
			index += self.body.rune.unpack(data[index:])
		if self.type==AIT_MONEY:
			index += self.body.money.unpack(data[index:])
		return index
class MFAffixGenByAffixQuality(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("quality",WORD())
		self.setData("arithmetic",BYTE())
	def pack(self):
		res = ""
		res += self.quality.pack()
		res += self.arithmetic.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.quality.unpack(data[index:])
		index += self.arithmetic.unpack(data[index:])
		return index
class EquipMFAffixRangeByAffixQuality(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("quality",WORD())
		self.setData("min",SHORT())
		self.setData("max",SHORT())
	def pack(self):
		res = ""
		res += self.quality.pack()
		res += self.min.pack()
		res += self.max.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.quality.unpack(data[index:])
		index += self.min.unpack(data[index:])
		index += self.max.unpack(data[index:])
		return index
class EquipMFAffixRangeByEquipLevel(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipLevel",WORD())
		self.setData("rangesAffixQuality",VECTOR(EquipMFAffixRangeByAffixQuality))
	def pack(self):
		res = ""
		res += self.equipLevel.pack()
		res += self.rangesAffixQuality.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.equipLevel.unpack(data[index:])
		index += self.rangesAffixQuality.unpack(data[index:])
		return index
class EquipMFAffixRangeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",BYTE())
		self.setData("rangesEquipLevel",VECTOR(EquipMFAffixRangeByEquipLevel))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.rangesEquipLevel.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.rangesEquipLevel.unpack(data[index:])
		return index
class EquipSellPriceAffixRangeByAffixQuality(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("quality",WORD())
		self.setData("min",SHORT())
		self.setData("max",SHORT())
	def pack(self):
		res = ""
		res += self.quality.pack()
		res += self.min.pack()
		res += self.max.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.quality.unpack(data[index:])
		index += self.min.unpack(data[index:])
		index += self.max.unpack(data[index:])
		return index
class EquipSellPriceAffixRangeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",BYTE())
		self.setData("rangesAffixQuality",VECTOR(EquipSellPriceAffixRangeByAffixQuality))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.rangesAffixQuality.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.rangesAffixQuality.unpack(data[index:])
		return index
class AffixGroupInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("records",VECTOR(AffixGroupRecord))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.records.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.records.unpack(data[index:])
		return index
class AffixDesc_BODY_EquipBaseAttr(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("attrAffixGens",VAR_ARRAY(AttrAffixGenByAffixQuality,BYTE))
	def pack(self):
		res = ""
		res += self.attrAffixGens.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.attrAffixGens.unpack(data[index:])
		return index
class AffixDesc_BODY_EquipExtraAttr(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("attrAffixGens",VAR_ARRAY(AttrAffixGenByAffixQuality,BYTE))
	def pack(self):
		res = ""
		res += self.attrAffixGens.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.attrAffixGens.unpack(data[index:])
		return index
class AffixDesc_BODY_EquipUnitParam(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("unitParamAffixGens",VAR_ARRAY(UnitParamAffixGenByAffixQuality,BYTE))
		self.setData("extraSkills",VAR_ARRAY(UnitParamAffixExtraSkill,BYTE))
	def pack(self):
		res = ""
		res += self.unitParamAffixGens.pack()
		res += self.extraSkills.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.unitParamAffixGens.unpack(data[index:])
		index += self.extraSkills.unpack(data[index:])
		return index
class AffixDesc_BODY_EquipSellPrice(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("adjustIndex",BYTE())
		self.setData("sellPriceAffixGens",VAR_ARRAY(SellPriceAffixGenByAffixQuality,BYTE))
	def pack(self):
		res = ""
		res += self.adjustIndex.pack()
		res += self.sellPriceAffixGens.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.adjustIndex.unpack(data[index:])
		index += self.sellPriceAffixGens.unpack(data[index:])
		return index
class AffixDesc_BODY_EquipMF(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("adjustIndex",BYTE())
		self.setData("mfAffixGens",VAR_ARRAY(MFAffixGenByAffixQuality,BYTE))
		self.setData("mfAwards",VAR_ARRAY(MFAwardItem,BYTE))
	def pack(self):
		res = ""
		res += self.adjustIndex.pack()
		res += self.mfAffixGens.pack()
		res += self.mfAwards.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.adjustIndex.unpack(data[index:])
		index += self.mfAffixGens.unpack(data[index:])
		index += self.mfAwards.unpack(data[index:])
		return index
class AffixDesc_BODY(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("equipbaseattr",AffixDesc_BODY_EquipBaseAttr())
		self.setData("equipextraattr",AffixDesc_BODY_EquipExtraAttr())
		self.setData("equipunitparam",AffixDesc_BODY_EquipUnitParam())
		self.setData("equipsellprice",AffixDesc_BODY_EquipSellPrice())
		self.setData("equipmf",AffixDesc_BODY_EquipMF())
class AffixDesc(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",WORD())
		self.setData("category",AffixCategory())
		self.setData("desc",String())
		self.setData("correctDesc",String())
		self.setData("body",AffixDesc_BODY())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.category.pack()
		res += self.desc.pack()
		res += self.correctDesc.pack()
		if self.category==AC_EQUIP_BASEATTR:
			res += self.body.equipbaseattr.pack()
		if self.category==AC_EQUIP_EXTRAATTR:
			res += self.body.equipextraattr.pack()
		if self.category==AC_EQUIP_UNITPARAM:
			res += self.body.equipunitparam.pack()
		if self.category==AC_EQUIP_SELLPRICE:
			res += self.body.equipsellprice.pack()
		if self.category==AC_EQUIP_MF:
			res += self.body.equipmf.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.category.unpack(data[index:])
		index += self.desc.unpack(data[index:])
		index += self.correctDesc.unpack(data[index:])
		if self.category==AC_EQUIP_BASEATTR:
			index += self.body.equipbaseattr.unpack(data[index:])
		if self.category==AC_EQUIP_EXTRAATTR:
			index += self.body.equipextraattr.unpack(data[index:])
		if self.category==AC_EQUIP_UNITPARAM:
			index += self.body.equipunitparam.unpack(data[index:])
		if self.category==AC_EQUIP_SELLPRICE:
			index += self.body.equipsellprice.unpack(data[index:])
		if self.category==AC_EQUIP_MF:
			index += self.body.equipmf.unpack(data[index:])
		return index
class AutoPickInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("itemsInfo",VECTOR(DWORD))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.itemsInfo.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.itemsInfo.unpack(data[index:])
		return index
class AIMapDeployStrategyBrief(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("TemplateIDinAIGenGroup",VECTOR(DWORD))
		self.setData("TemplateIDinAIRoleClassGenGroup",VECTOR(DWORD))
		self.setData("AITemplateModel",VECTOR(ObjName))
		self.setData("platformIndex",BYTE())
		self.setData("location",Location())
		self.setData("direction",DirectType())
	def pack(self):
		res = ""
		res += self.TemplateIDinAIGenGroup.pack()
		res += self.TemplateIDinAIRoleClassGenGroup.pack()
		res += self.AITemplateModel.pack()
		res += self.platformIndex.pack()
		res += self.location.pack()
		res += self.direction.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.TemplateIDinAIGenGroup.unpack(data[index:])
		index += self.TemplateIDinAIRoleClassGenGroup.unpack(data[index:])
		index += self.AITemplateModel.unpack(data[index:])
		index += self.platformIndex.unpack(data[index:])
		index += self.location.unpack(data[index:])
		index += self.direction.unpack(data[index:])
		return index
class ChannelAIRoleInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("townID",TownID())
		self.setData("deployBrief",AIMapDeployStrategyBrief())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.townID.pack()
		res += self.deployBrief.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.townID.unpack(data[index:])
		index += self.deployBrief.unpack(data[index:])
		return index
class StaticMapDeployStrategyBrief(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("templateID",DWORD())
		self.setData("roleName",NickName())
		self.setData("platformIndex",BYTE())
		self.setData("location",Location())
		self.setData("direction",DirectType())
	def pack(self):
		res = ""
		res += self.templateID.pack()
		res += self.roleName.pack()
		res += self.platformIndex.pack()
		res += self.location.pack()
		res += self.direction.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.templateID.unpack(data[index:])
		index += self.roleName.unpack(data[index:])
		index += self.platformIndex.unpack(data[index:])
		index += self.location.unpack(data[index:])
		index += self.direction.unpack(data[index:])
		return index
class ChannelStaticRoleInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("townID",TownID())
		self.setData("deployBrief",StaticMapDeployStrategyBrief())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.townID.pack()
		res += self.deployBrief.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.townID.unpack(data[index:])
		index += self.deployBrief.unpack(data[index:])
		return index
class client_hintcode(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("stringindex",String())
		self.setData("stringid",DWORD())
		self.setData("bwindow",BYTE())
		self.setData("bscreen",BYTE())
		self.setData("berror",BYTE())
		self.setData("bchat",BYTE())
		self.setData("btip",BYTE())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.stringindex.pack()
		res += self.stringid.pack()
		res += self.bwindow.pack()
		res += self.bscreen.pack()
		res += self.berror.pack()
		res += self.bchat.pack()
		res += self.btip.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.stringindex.unpack(data[index:])
		index += self.stringid.unpack(data[index:])
		index += self.bwindow.unpack(data[index:])
		index += self.bscreen.unpack(data[index:])
		index += self.berror.unpack(data[index:])
		index += self.bchat.unpack(data[index:])
		index += self.btip.unpack(data[index:])
		return index
class CraftUpdateCost(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("level",DWORD())
		self.setData("exp",DWORD())
		self.setData("needTime",DWORD())
		self.setData("materials",VECTOR(ConsumeItem))
	def pack(self):
		res = ""
		res += self.level.pack()
		res += self.exp.pack()
		res += self.needTime.pack()
		res += self.materials.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.level.unpack(data[index:])
		index += self.exp.unpack(data[index:])
		index += self.needTime.unpack(data[index:])
		index += self.materials.unpack(data[index:])
		return index
class CraftInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("startLevel",DWORD())
		self.setData("expTable",VECTOR(DWORD))
		self.setData("datas",VECTOR(CraftUpdateCost))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.startLevel.pack()
		res += self.expTable.pack()
		res += self.datas.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.startLevel.unpack(data[index:])
		index += self.expTable.unpack(data[index:])
		index += self.datas.unpack(data[index:])
		return index
class CraftRecipeInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("bindCraft",DWORD())
		self.setData("needLevel",DWORD())
		self.setData("needRecord",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.bindCraft.pack()
		res += self.needLevel.pack()
		res += self.needRecord.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.bindCraft.unpack(data[index:])
		index += self.needLevel.unpack(data[index:])
		index += self.needRecord.unpack(data[index:])
		return index
class BuildItem(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("tid",DWORD())
		self.setData("needCount",DWORD())
	def pack(self):
		res = ""
		res += self.tid.pack()
		res += self.needCount.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.tid.unpack(data[index:])
		index += self.needCount.unpack(data[index:])
		return index
class TechnologyBuildData(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("level",DWORD())
		self.setData("buildTime",DWORD())
		self.setData("buildExp",DWORD())
		self.setData("needFund",DWORD())
		self.setData("needItems",VECTOR(BuildItem))
	def pack(self):
		res = ""
		res += self.level.pack()
		res += self.buildTime.pack()
		res += self.buildExp.pack()
		res += self.needFund.pack()
		res += self.needItems.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.level.unpack(data[index:])
		index += self.buildTime.unpack(data[index:])
		index += self.buildExp.unpack(data[index:])
		index += self.needFund.unpack(data[index:])
		index += self.needItems.unpack(data[index:])
		return index
class TechnologyBuildInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("datas",VECTOR(TechnologyBuildData))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.datas.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.datas.unpack(data[index:])
		return index
class GuildBlueprintInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("tec",DWORD())
		self.setData("needLevel",DWORD())
		self.setData("needRecord",DWORD())
		self.setData("needItem",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.tec.pack()
		res += self.needLevel.pack()
		res += self.needRecord.pack()
		res += self.needItem.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.tec.unpack(data[index:])
		index += self.needLevel.unpack(data[index:])
		index += self.needRecord.unpack(data[index:])
		index += self.needItem.unpack(data[index:])
		return index
class GuildTechnologyInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("name",String())
		self.setData("startLevel",DWORD())
		self.setData("expTable",VECTOR(DWORD))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.name.pack()
		res += self.startLevel.pack()
		res += self.expTable.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.name.unpack(data[index:])
		index += self.startLevel.unpack(data[index:])
		index += self.expTable.unpack(data[index:])
		return index
class GuildLevelInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("needExp",DWORD())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.needExp.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.needExp.unpack(data[index:])
		return index
class GuildLevelBuildInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("buildTime",DWORD())
		self.setData("buildExp",DWORD())
		self.setData("needFund",DWORD())
		self.setData("needItems",VECTOR(BuildItem))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.buildTime.pack()
		res += self.buildExp.pack()
		res += self.needFund.pack()
		res += self.needItems.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.buildTime.unpack(data[index:])
		index += self.buildExp.unpack(data[index:])
		index += self.needFund.unpack(data[index:])
		index += self.needItems.unpack(data[index:])
		return index
class MonInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("MonPos",Location())
		self.setData("JumpPos",VECTOR(Location))
	def pack(self):
		res = ""
		res += self.MonPos.pack()
		res += self.JumpPos.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.MonPos.unpack(data[index:])
		index += self.JumpPos.unpack(data[index:])
		return index
class MapInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Name",ItemName())
		self.setData("CellMapFile",ObjPath())
		self.setData("SceneFile",ObjPath())
		self.setData("LinkBlockMapFile",ObjPath())
		self.setData("MiniMap",ItemName())
		self.setData("WorldMap",ItemName())
		self.setData("LevelStreaming",BYTE())
		self.setData("LinkMap",ObjName())
		self.setData("CurrentLevel",ObjName())
		self.setData("fixPlatforms",VECTOR(BYTE))
		self.setData("JumpMarkPos",VECTOR(Location))
		self.setData("SamePlatJumpMarkPos",VECTOR(MonInfo))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Name.pack()
		res += self.CellMapFile.pack()
		res += self.SceneFile.pack()
		res += self.LinkBlockMapFile.pack()
		res += self.MiniMap.pack()
		res += self.WorldMap.pack()
		res += self.LevelStreaming.pack()
		res += self.LinkMap.pack()
		res += self.CurrentLevel.pack()
		res += self.fixPlatforms.pack()
		res += self.JumpMarkPos.pack()
		res += self.SamePlatJumpMarkPos.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Name.unpack(data[index:])
		index += self.CellMapFile.unpack(data[index:])
		index += self.SceneFile.unpack(data[index:])
		index += self.LinkBlockMapFile.unpack(data[index:])
		index += self.MiniMap.unpack(data[index:])
		index += self.WorldMap.unpack(data[index:])
		index += self.LevelStreaming.unpack(data[index:])
		index += self.LinkMap.unpack(data[index:])
		index += self.CurrentLevel.unpack(data[index:])
		index += self.fixPlatforms.unpack(data[index:])
		index += self.JumpMarkPos.unpack(data[index:])
		index += self.SamePlatJumpMarkPos.unpack(data[index:])
		return index
class MapPlatformInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Name",ItemName())
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Name.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Name.unpack(data[index:])
		return index
class SkillInfo(STRUCT):
	def __init__(self):
		STRUCT.__init__(self)
		self.setData("id",DWORD())
		self.setData("Name",ItemName())
		self.setData("unitParamRules",VECTOR(SkillUnitParamRules))
		self.setData("TargetType",BYTE())
		self.setData("MinDist",DWORD())
		self.setData("MaxDist",DWORD())
		self.setData("skillDesc",String())
		self.setData("IconName",ObjPath())
		self.setData("CoolDownGroupID",DWORD())
		self.setData("Tags",VECTOR(DWORD))
		self.setData("CanMove",BYTE())
		self.setData("bInSkillZhaoPanel",BYTE())
		self.setData("bInSkillShortCutBar",BYTE())
		self.setData("EffectType",BYTE())
		self.setData("params",VECTOR(SkillParam))
	def pack(self):
		res = ""
		res += self.id.pack()
		res += self.Name.pack()
		res += self.unitParamRules.pack()
		res += self.TargetType.pack()
		res += self.MinDist.pack()
		res += self.MaxDist.pack()
		res += self.skillDesc.pack()
		res += self.IconName.pack()
		res += self.CoolDownGroupID.pack()
		res += self.Tags.pack()
		res += self.CanMove.pack()
		res += self.bInSkillZhaoPanel.pack()
		res += self.bInSkillShortCutBar.pack()
		res += self.EffectType.pack()
		res += self.params.pack()
		return res
	def unpack(self,data):
		index=0
		index += self.id.unpack(data[index:])
		index += self.Name.unpack(data[index:])
		index += self.unitParamRules.unpack(data[index:])
		index += self.TargetType.unpack(data[index:])
		index += self.MinDist.unpack(data[index:])
		index += self.MaxDist.unpack(data[index:])
		index += self.skillDesc.unpack(data[index:])
		index += self.IconName.unpack(data[index:])
		index += self.CoolDownGroupID.unpack(data[index:])
		index += self.Tags.unpack(data[index:])
		index += self.CanMove.unpack(data[index:])
		index += self.bInSkillZhaoPanel.unpack(data[index:])
		index += self.bInSkillShortCutBar.unpack(data[index:])
		index += self.EffectType.unpack(data[index:])
		index += self.params.unpack(data[index:])
		return index
